"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MovieType = void 0;
const Price_1 = require("./Price");
var MovieType;
(function (MovieType) {
    MovieType[MovieType["REGULAR"] = 0] = "REGULAR";
    MovieType[MovieType["NEW_RELEASE"] = 1] = "NEW_RELEASE";
    MovieType[MovieType["CHILDRENS"] = 2] = "CHILDRENS";
})(MovieType = exports.MovieType || (exports.MovieType = {}));
class Movie {
    // static REGULAR = MovieType.REGULAR;
    // static NEW_RELEASE = MovieType.NEW_RELEASE;
    // static CHILDRENS = MovieType.CHILDRENS;
    _title;
    // 因为是在setPriceCode 中初始化 _price
    // 所以ts 没能识别 在 constructor 中初始化 所以需要加上! 说明是由调用者保证的
    _price;
    constructor(title, priceCode) {
        this._title = title;
        this.setPriceCode(priceCode);
    }
    getPriceCode() {
        return this._price.getPriceCode();
    }
    setPriceCode(arg) {
        switch (arg) {
            case MovieType.REGULAR:
                this._price = new Price_1.RegularPrice();
                break;
            case MovieType.CHILDRENS:
                this._price = new Price_1.ChildrenPrices();
                break;
            case MovieType.NEW_RELEASE:
                this._price = new Price_1.NewReleasePrice();
                break;
            default:
                throw new Error("Incorrect Price Code");
        }
    }
    getTitle() {
        return this._title;
    }
    getCharge(getDaysRented) {
        return this._price.getCharge(getDaysRented);
    }
    getFrequentRenterPoints(getDaysRented) {
        return this._price.getFrequentRenterPoints(getDaysRented);
    }
}
exports.default = Movie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW92aWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbIumHjeaehOaKgOW3py/ph43mnoQt5pS55ZaE5pei5pyJ5Luj56CB55qE6K6+6K6hL+mHjeaehOWQji9Nb3ZpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBc0U7QUFFdEUsSUFBWSxTQUlYO0FBSkQsV0FBWSxTQUFTO0lBQ2pCLCtDQUFPLENBQUE7SUFDUCx1REFBVyxDQUFBO0lBQ1gsbURBQVMsQ0FBQTtBQUNiLENBQUMsRUFKVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUlwQjtBQUdELE1BQXFCLEtBQUs7SUFDdEIsc0NBQXNDO0lBQ3RDLDhDQUE4QztJQUM5QywwQ0FBMEM7SUFFekIsTUFBTSxDQUFTO0lBQ2hDLCtCQUErQjtJQUMvQixrREFBa0Q7SUFDMUMsTUFBTSxDQUFTO0lBRXZCLFlBQVksS0FBYSxFQUFFLFNBQW9CO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLFlBQVk7UUFDZixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVNLFlBQVksQ0FBQyxHQUFjO1FBQzlCLFFBQVEsR0FBRyxFQUFFO1lBQ1QsS0FBSyxTQUFTLENBQUMsT0FBTztnQkFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLG9CQUFZLEVBQUUsQ0FBQztnQkFDakMsTUFBTTtZQUNWLEtBQUssU0FBUyxDQUFDLFNBQVM7Z0JBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxzQkFBYyxFQUFFLENBQUM7Z0JBQ25DLE1BQU07WUFDVixLQUFLLFNBQVMsQ0FBQyxXQUFXO2dCQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksdUJBQWUsRUFBRSxDQUFDO2dCQUNwQyxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBRS9DO0lBQ0wsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUdNLFNBQVMsQ0FBQyxhQUFxQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWhELENBQUM7SUFHTSx1QkFBdUIsQ0FBQyxhQUFxQjtRQUNoRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUVKO0FBbkRELHdCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcmljZSBmcm9tIFwiLi9QcmljZVwiO1xyXG5pbXBvcnQge0NoaWxkcmVuUHJpY2VzLCBOZXdSZWxlYXNlUHJpY2UsIFJlZ3VsYXJQcmljZX0gZnJvbSBcIi4vUHJpY2VcIjtcclxuXHJcbmV4cG9ydCBlbnVtIE1vdmllVHlwZSB7XHJcbiAgICBSRUdVTEFSLFxyXG4gICAgTkVXX1JFTEVBU0UsXHJcbiAgICBDSElMRFJFTlNcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdmllIHtcclxuICAgIC8vIHN0YXRpYyBSRUdVTEFSID0gTW92aWVUeXBlLlJFR1VMQVI7XHJcbiAgICAvLyBzdGF0aWMgTkVXX1JFTEVBU0UgPSBNb3ZpZVR5cGUuTkVXX1JFTEVBU0U7XHJcbiAgICAvLyBzdGF0aWMgQ0hJTERSRU5TID0gTW92aWVUeXBlLkNISUxEUkVOUztcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90aXRsZTogc3RyaW5nO1xyXG4gICAgLy8g5Zug5Li65piv5Zyoc2V0UHJpY2VDb2RlIOS4reWIneWni+WMliBfcHJpY2VcclxuICAgIC8vIOaJgOS7pXRzIOayoeiDveivhuWIqyDlnKggY29uc3RydWN0b3Ig5Lit5Yid5aeL5YyWIOaJgOS7pemcgOimgeWKoOS4iiEg6K+05piO5piv55Sx6LCD55So6ICF5L+d6K+B55qEXHJcbiAgICBwcml2YXRlIF9wcmljZSE6IFByaWNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlOiBzdHJpbmcsIHByaWNlQ29kZTogTW92aWVUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLnNldFByaWNlQ29kZShwcmljZUNvZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcmljZUNvZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaWNlLmdldFByaWNlQ29kZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQcmljZUNvZGUoYXJnOiBNb3ZpZVR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKGFyZykge1xyXG4gICAgICAgICAgICBjYXNlIE1vdmllVHlwZS5SRUdVTEFSOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpY2UgPSBuZXcgUmVndWxhclByaWNlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBNb3ZpZVR5cGUuQ0hJTERSRU5TOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpY2UgPSBuZXcgQ2hpbGRyZW5QcmljZXMoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE1vdmllVHlwZS5ORVdfUkVMRUFTRTpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByaWNlID0gbmV3IE5ld1JlbGVhc2VQcmljZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbmNvcnJlY3QgUHJpY2UgQ29kZVwiKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaXRsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldENoYXJnZShnZXREYXlzUmVudGVkOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJpY2UuZ2V0Q2hhcmdlKGdldERheXNSZW50ZWQpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldEZyZXF1ZW50UmVudGVyUG9pbnRzKGdldERheXNSZW50ZWQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcmljZS5nZXRGcmVxdWVudFJlbnRlclBvaW50cyhnZXREYXlzUmVudGVkKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19