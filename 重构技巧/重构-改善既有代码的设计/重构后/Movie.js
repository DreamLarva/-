"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Price_1 = require("./Price");
var MovieType;
(function (MovieType) {
    MovieType[MovieType["REGULAR"] = 0] = "REGULAR";
    MovieType[MovieType["NEW_RELEASE"] = 1] = "NEW_RELEASE";
    MovieType[MovieType["CHILDRENS"] = 2] = "CHILDRENS";
})(MovieType = exports.MovieType || (exports.MovieType = {}));
class Movie {
    constructor(title, priceCode) {
        this._title = title;
        this.setPriceCode(priceCode);
    }
    getPriceCode() {
        return this._price.getPriceCode();
    }
    setPriceCode(arg) {
        switch (arg) {
            case Movie.REGULAR:
                this._price = new Price_1.RegularPrice();
                break;
            case Movie.CHILDRENS:
                this._price = new Price_1.ChildrenPrices();
                break;
            case Movie.NEW_RELEASE:
                this._price = new Price_1.NewReleasePrice();
                break;
            default:
                throw new Error("Incorrect Price Code");
        }
    }
    getTitle() {
        return this._title;
    }
    getCharge(getDaysRented) {
        return this._price.getCharge(getDaysRented);
    }
    getFrequentRenterPoints(getDaysRented) {
        return this._price.getFrequentRenterPoints(getDaysRented);
    }
}
Movie.REGULAR = MovieType.REGULAR;
Movie.NEW_RELEASE = MovieType.NEW_RELEASE;
Movie.CHILDRENS = MovieType.CHILDRENS;
exports.default = Movie;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW92aWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbIumHjeaehOaKgOW3py/ph43mnoQt5pS55ZaE5pei5pyJ5Luj56CB55qE6K6+6K6hL+mHjeaehOWQji9Nb3ZpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1DQUFxRTtBQUVyRSxJQUFZLFNBSVg7QUFKRCxXQUFZLFNBQVM7SUFDakIsK0NBQU8sQ0FBQTtJQUNQLHVEQUFXLENBQUE7SUFDWCxtREFBUyxDQUFBO0FBQ2IsQ0FBQyxFQUpXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBSXBCO0FBR0QsTUFBcUIsS0FBSztJQVV0QixZQUFZLEtBQWEsRUFBRSxTQUFpQjtRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFTSxZQUFZO1FBQ2YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxZQUFZLENBQUMsR0FBVztRQUMzQixRQUFRLEdBQUcsRUFBRTtZQUNULEtBQUssS0FBSyxDQUFDLE9BQU87Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLG9CQUFZLEVBQUUsQ0FBQztnQkFDakMsTUFBTTtZQUNWLEtBQUssS0FBSyxDQUFDLFNBQVM7Z0JBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxzQkFBYyxFQUFFLENBQUM7Z0JBQ25DLE1BQU07WUFDVixLQUFLLEtBQUssQ0FBQyxXQUFXO2dCQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksdUJBQWUsRUFBRSxDQUFDO2dCQUNwQyxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO1NBRTlDO0lBQ0wsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUdNLFNBQVMsQ0FBQyxhQUFxQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRS9DLENBQUM7SUFHTSx1QkFBdUIsQ0FBQyxhQUFxQjtRQUNoRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDN0QsQ0FBQzs7QUFoRE0sYUFBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDNUIsaUJBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO0FBQ3BDLGVBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBSDNDLHdCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcmljZSBmcm9tIFwiLi9QcmljZVwiXHJcbmltcG9ydCB7Q2hpbGRyZW5QcmljZXMsIE5ld1JlbGVhc2VQcmljZSwgUmVndWxhclByaWNlfSBmcm9tIFwiLi9QcmljZVwiXHJcblxyXG5leHBvcnQgZW51bSBNb3ZpZVR5cGUge1xyXG4gICAgUkVHVUxBUixcclxuICAgIE5FV19SRUxFQVNFLFxyXG4gICAgQ0hJTERSRU5TXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb3ZpZSB7XHJcbiAgICBzdGF0aWMgUkVHVUxBUiA9IE1vdmllVHlwZS5SRUdVTEFSO1xyXG4gICAgc3RhdGljIE5FV19SRUxFQVNFID0gTW92aWVUeXBlLk5FV19SRUxFQVNFO1xyXG4gICAgc3RhdGljIENISUxEUkVOUyA9IE1vdmllVHlwZS5DSElMRFJFTlM7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGl0bGU6IHN0cmluZztcclxuICAgIC8vIOWboOS4uuaYr+WcqHNldFByaWNlQ29kZSDkuK3liJ3lp4vljJYgX3ByaWNlXHJcbiAgICAvLyDmiYDku6V0cyDmsqHog73or4bliKsg5ZyoIGNvbnN0cnVjdG9yIOS4reWIneWni+WMliDmiYDku6XpnIDopoHliqDkuIohIOivtOaYjuaYr+eUseiwg+eUqOiAheS/neivgeeahFxyXG4gICAgcHJpdmF0ZSBfcHJpY2UhOiBQcmljZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZTogc3RyaW5nLCBwcmljZUNvZGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5zZXRQcmljZUNvZGUocHJpY2VDb2RlKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcmljZUNvZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaWNlLmdldFByaWNlQ29kZSgpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFByaWNlQ29kZShhcmc6IG51bWJlcikge1xyXG4gICAgICAgIHN3aXRjaCAoYXJnKSB7XHJcbiAgICAgICAgICAgIGNhc2UgTW92aWUuUkVHVUxBUjpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByaWNlID0gbmV3IFJlZ3VsYXJQcmljZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTW92aWUuQ0hJTERSRU5TOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpY2UgPSBuZXcgQ2hpbGRyZW5QcmljZXMoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE1vdmllLk5FV19SRUxFQVNFOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpY2UgPSBuZXcgTmV3UmVsZWFzZVByaWNlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCBQcmljZSBDb2RlXCIpXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGl0bGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBnZXRDaGFyZ2UoZ2V0RGF5c1JlbnRlZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaWNlLmdldENoYXJnZShnZXREYXlzUmVudGVkKVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldEZyZXF1ZW50UmVudGVyUG9pbnRzKGdldERheXNSZW50ZWQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcmljZS5nZXRGcmVxdWVudFJlbnRlclBvaW50cyhnZXREYXlzUmVudGVkKVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=