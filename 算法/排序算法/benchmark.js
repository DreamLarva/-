"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const insertionSort_1 = __importDefault(require("./insertionSort"));
const selectionSort_1 = __importDefault(require("./selectionSort"));
const bubbleSort_1 = __importDefault(require("./bubbleSort"));
const mergeSort_1 = __importDefault(require("./mergeSort"));
const shellSort_1 = require("./shellSort");
const quickSort_1 = require("./quickSort");
// 测试用随机数组
function generateRandomArr(length) {
    const arr = [];
    for (let i = 0; i < length; i++) {
        arr.push(Math.floor(Math.random() * length));
    }
    return arr;
}
// 复制一个数组
function paste(arr) {
    return arr.slice();
}
// 检验结果是否正确
function isRight(arr) {
    return arr.every((v, i, a) => {
        if (i === arr.length - 1) {
            return true;
        }
        return v <= a[i + 1];
    });
}
// 测试消耗时间
function test(arr, fun, str) {
    let testArr = paste(arr);
    // var start = new Date().getTime();
    console.time(str);
    if (str === "nativeSort(quickSort)") {
        fun(testArr, (a, b) => a - b);
    }
    else {
        const _arr = fun(testArr);
        testArr = Array.isArray(_arr) ? _arr : testArr;
    }
    console.timeEnd(str);
    console.log(`result:${isRight(testArr)}`);
    return testArr;
}
let testArr = generateRandomArr(10000);
const myTest = test.bind({}, testArr);
// 测试原生
// 反柯里化
const unCurrying = function (fn) {
    return function () {
        const args = [].slice.call(arguments, 1);
        return fn.apply(arguments[0], args);
    };
};
let nativeSort = unCurrying(Array.prototype.sort);
// 基本排序算法
console.log("Basic sorting algorithm 10000 elements");
myTest(bubbleSort_1.default, "bubbleSort");
myTest(insertionSort_1.default, "insertionSort");
myTest(selectionSort_1.default, "selectionSort");
myTest(nativeSort, "nativeSort(quickSort)");
console.log("-----------------------");
let testArr1 = generateRandomArr(1000000);
const myTest1 = test.bind({}, testArr1);
console.log("Advanced orting algorithm 100000 elements");
myTest1(shellSort_1.shellSortWithStaticGaps, "希尔排序固定间隔(Ciura 序列)");
myTest1(shellSort_1.shellSortWithDynamicGaps, "希尔排序动态间隔");
myTest1(mergeSort_1.default, "归并排序");
myTest1(quickSort_1.qSort, "快速排序");
myTest1(quickSort_1.qSort1, "快速排序+三数取中");
myTest1(quickSort_1.qSort2, "快速排序+三数取中+插入排序");
myTest1(quickSort_1.qSort3, "快速排序+三数取中+插入排序+聚集相等元素");
myTest1(nativeSort, "nativeSort(quickSort)");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2htYXJrLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLnrpfms5Uv5o6S5bqP566X5rOVL2JlbmNobWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9FQUE0QztBQUM1QyxvRUFBNEM7QUFDNUMsOERBQXNDO0FBRXRDLDREQUFvQztBQUNwQywyQ0FBZ0Y7QUFDaEYsMkNBQTREO0FBRTVELFVBQVU7QUFDVixTQUFTLGlCQUFpQixDQUFDLE1BQWM7SUFDdkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTO0FBQ1QsU0FBUyxLQUFLLENBQUksR0FBUTtJQUN4QixPQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNyQixDQUFDO0FBRUQsV0FBVztBQUNYLFNBQVMsT0FBTyxDQUFJLEdBQWE7SUFDL0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFPRCxTQUFTO0FBQ1QsU0FBUyxJQUFJLENBQUMsR0FBYSxFQUFFLEdBQWlCLEVBQUUsR0FBVztJQUN6RCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsb0NBQW9DO0lBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBSSxHQUFHLEtBQUssdUJBQXVCLEVBQUU7UUFDbkMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUMvQjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztLQUNoRDtJQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELElBQUksT0FBTyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLE9BQU87QUFDUCxPQUFPO0FBQ1AsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFZO0lBQ3ZDLE9BQU87UUFDTCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxTQUFTO0FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBRXRELE1BQU0sQ0FBQyxvQkFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sQ0FBQyx1QkFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyx1QkFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUU1QyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFdkMsSUFBSSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ3pELE9BQU8sQ0FBQyxtQ0FBdUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELE9BQU8sQ0FBQyxvQ0FBd0IsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5QyxPQUFPLENBQUMsbUJBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzQixPQUFPLENBQUMsaUJBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2QixPQUFPLENBQUMsa0JBQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM3QixPQUFPLENBQUMsa0JBQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxrQkFBTSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFDekMsT0FBTyxDQUFDLFVBQVUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluc2VydGlvblNvcnQgZnJvbSBcIi4vaW5zZXJ0aW9uU29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvblNvcnQgZnJvbSBcIi4vc2VsZWN0aW9uU29ydFwiO1xuaW1wb3J0IGJ1YmJsZVNvcnQgZnJvbSBcIi4vYnViYmxlU29ydFwiO1xuXG5pbXBvcnQgbWVyZ2VTb3J0IGZyb20gXCIuL21lcmdlU29ydFwiO1xuaW1wb3J0IHsgc2hlbGxTb3J0V2l0aER5bmFtaWNHYXBzLCBzaGVsbFNvcnRXaXRoU3RhdGljR2FwcyB9IGZyb20gXCIuL3NoZWxsU29ydFwiO1xuaW1wb3J0IHsgcVNvcnQsIHFTb3J0MSwgcVNvcnQyLCBxU29ydDMgfSBmcm9tIFwiLi9xdWlja1NvcnRcIjtcblxuLy8g5rWL6K+V55So6ZqP5py65pWw57uEXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUFycihsZW5ndGg6IG51bWJlcikge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFyci5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxlbmd0aCkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIOWkjeWItuS4gOS4quaVsOe7hFxuZnVuY3Rpb24gcGFzdGU8VD4oYXJyOiBUW10pOiBUW10ge1xuICByZXR1cm4gYXJyLnNsaWNlKCk7XG59XG5cbi8vIOajgOmqjOe7k+aenOaYr+WQpuato+ehrlxuZnVuY3Rpb24gaXNSaWdodDxUPihhcnI6IG51bWJlcltdKSB7XG4gIHJldHVybiBhcnIuZXZlcnkoKHYsIGksIGEpID0+IHtcbiAgICBpZiAoaSA9PT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdiA8PSBhW2kgKyAxXTtcbiAgfSk7XG59XG5cbnR5cGUgU29ydEZ1bmN0aW9uID0gKFxuICBhcnI6IG51bWJlcltdLFxuICBjb21wYXJlRm4/OiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IG51bWJlclxuKSA9PiBhbnk7XG5cbi8vIOa1i+ivlea2iOiAl+aXtumXtFxuZnVuY3Rpb24gdGVzdChhcnI6IG51bWJlcltdLCBmdW46IFNvcnRGdW5jdGlvbiwgc3RyOiBzdHJpbmcpIHtcbiAgbGV0IHRlc3RBcnIgPSBwYXN0ZShhcnIpO1xuICAvLyB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgY29uc29sZS50aW1lKHN0cik7XG4gIGlmIChzdHIgPT09IFwibmF0aXZlU29ydChxdWlja1NvcnQpXCIpIHtcbiAgICBmdW4odGVzdEFyciwgKGEsIGIpID0+IGEgLSBiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBfYXJyID0gZnVuKHRlc3RBcnIpO1xuICAgIHRlc3RBcnIgPSBBcnJheS5pc0FycmF5KF9hcnIpID8gX2FyciA6IHRlc3RBcnI7XG4gIH1cblxuICBjb25zb2xlLnRpbWVFbmQoc3RyKTtcbiAgY29uc29sZS5sb2coYHJlc3VsdDoke2lzUmlnaHQodGVzdEFycil9YCk7XG4gIHJldHVybiB0ZXN0QXJyO1xufVxuXG5sZXQgdGVzdEFyciA9IGdlbmVyYXRlUmFuZG9tQXJyKDEwMDAwKTtcbmNvbnN0IG15VGVzdCA9IHRlc3QuYmluZCh7fSwgdGVzdEFycik7XG4vLyDmtYvor5Xljp/nlJ9cbi8vIOWPjeafr+mHjOWMllxuY29uc3QgdW5DdXJyeWluZyA9IGZ1bmN0aW9uIChmbjogRnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmbi5hcHBseShhcmd1bWVudHNbMF0sIGFyZ3MpO1xuICB9O1xufTtcblxubGV0IG5hdGl2ZVNvcnQgPSB1bkN1cnJ5aW5nKEFycmF5LnByb3RvdHlwZS5zb3J0KTtcbi8vIOWfuuacrOaOkuW6j+eul+azlVxuY29uc29sZS5sb2coXCJCYXNpYyBzb3J0aW5nIGFsZ29yaXRobSAxMDAwMCBlbGVtZW50c1wiKTtcblxubXlUZXN0KGJ1YmJsZVNvcnQsIFwiYnViYmxlU29ydFwiKTtcbm15VGVzdChpbnNlcnRpb25Tb3J0LCBcImluc2VydGlvblNvcnRcIik7XG5teVRlc3Qoc2VsZWN0aW9uU29ydCwgXCJzZWxlY3Rpb25Tb3J0XCIpO1xubXlUZXN0KG5hdGl2ZVNvcnQsIFwibmF0aXZlU29ydChxdWlja1NvcnQpXCIpO1xuXG5jb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG5sZXQgdGVzdEFycjEgPSBnZW5lcmF0ZVJhbmRvbUFycigxMDAwMDAwKTtcbmNvbnN0IG15VGVzdDEgPSB0ZXN0LmJpbmQoe30sIHRlc3RBcnIxKTtcblxuY29uc29sZS5sb2coXCJBZHZhbmNlZCBvcnRpbmcgYWxnb3JpdGhtIDEwMDAwMCBlbGVtZW50c1wiKTtcbm15VGVzdDEoc2hlbGxTb3J0V2l0aFN0YXRpY0dhcHMsIFwi5biM5bCU5o6S5bqP5Zu65a6a6Ze06ZqUKENpdXJhIOW6j+WIlylcIik7XG5teVRlc3QxKHNoZWxsU29ydFdpdGhEeW5hbWljR2FwcywgXCLluIzlsJTmjpLluo/liqjmgIHpl7TpmpRcIik7XG5teVRlc3QxKG1lcmdlU29ydCwgXCLlvZLlubbmjpLluo9cIik7XG5teVRlc3QxKHFTb3J0LCBcIuW/q+mAn+aOkuW6j1wiKTtcbm15VGVzdDEocVNvcnQxLCBcIuW/q+mAn+aOkuW6jyvkuInmlbDlj5bkuK1cIik7XG5teVRlc3QxKHFTb3J0MiwgXCLlv6vpgJ/mjpLluo8r5LiJ5pWw5Y+W5LitK+aPkuWFpeaOkuW6j1wiKTtcbm15VGVzdDEocVNvcnQzLCBcIuW/q+mAn+aOkuW6jyvkuInmlbDlj5bkuK0r5o+S5YWl5o6S5bqPK+iBmumbhuebuOetieWFg+e0oFwiKTtcbm15VGVzdDEobmF0aXZlU29ydCwgXCJuYXRpdmVTb3J0KHF1aWNrU29ydClcIik7XG4iXX0=