"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const insertionSort_1 = __importDefault(require("./insertionSort"));
const selectionSort_1 = __importDefault(require("./selectionSort"));
const bubbleSort_1 = __importDefault(require("./bubbleSort"));
const mergeSort_1 = __importDefault(require("./mergeSort"));
const shellSort_1 = require("./shellSort");
const quickSort_1 = require("./quickSort");
// 测试用随机数组
function generateRandomArr(length) {
    const arr = [];
    for (let i = 0; i < length; i++) {
        arr.push(Math.floor(Math.random() * length));
    }
    return arr;
}
// 复制一个数组
function paste(arr) {
    return arr.slice();
}
// 检验结果是否正确
function isRight(arr) {
    return arr.every((v, i, a) => {
        if (i === arr.length - 1) {
            return true;
        }
        return v <= a[i + 1];
    });
}
// 测试消耗时间
function test(arr, fun, str) {
    let testArr = paste(arr);
    // var start = new Date().getTime();
    console.time(str);
    if (str === "nativeSort(quickSort)") {
        fun(testArr, (a, b) => a - b);
    }
    else {
        const _arr = fun(testArr);
        testArr = Array.isArray(_arr) ? _arr : testArr;
    }
    console.timeEnd(str);
    console.log(`result:${isRight(testArr)}`);
    return testArr;
}
let testArr = generateRandomArr(10000);
const myTest = test.bind({}, testArr);
// 测试原生
// 反柯里化
const unCurrying = function (fn) {
    return function () {
        const args = [].slice.call(arguments, 1);
        return fn.apply(arguments[0], args);
    };
};
let nativeSort = unCurrying(Array.prototype.sort);
// 基本排序算法
console.log("Basic sorting algorithm 10000 elements");
myTest(bubbleSort_1.default, "bubbleSort");
myTest(insertionSort_1.default, "insertionSort");
myTest(selectionSort_1.default, "selectionSort");
myTest(nativeSort, "nativeSort(quickSort)");
console.log("-----------------------");
let testArr1 = generateRandomArr(1000000);
const myTest1 = test.bind({}, testArr1);
console.log("Advanced orting algorithm 100000 elements");
myTest1(shellSort_1.shellSortWithStaticGaps, "希尔排序固定间隔(Ciura 序列)");
myTest1(shellSort_1.shellSortWithDynamicGaps, "希尔排序动态间隔");
myTest1(mergeSort_1.default, "归并排序");
myTest1(quickSort_1.qSort, "快速排序");
myTest1(quickSort_1.qSort1, "快速排序+三数取中");
myTest1(quickSort_1.qSort2, "快速排序+三数取中+插入排序");
myTest1(quickSort_1.qSort3, "快速排序+三数取中+插入排序+聚集相等元素");
myTest1(nativeSort, "nativeSort(quickSort)");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2htYXJrLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLnrpfms5Uv5o6S5bqP566X5rOVL2JlbmNobWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9FQUE0QztBQUM1QyxvRUFBNEM7QUFDNUMsOERBQXNDO0FBRXRDLDREQUFvQztBQUNwQywyQ0FBOEU7QUFDOUUsMkNBQTBEO0FBRTFELFVBQVU7QUFDVixTQUFTLGlCQUFpQixDQUFDLE1BQWM7SUFDckMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM3QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDaEQ7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTO0FBQ1QsU0FBUyxLQUFLLENBQUksR0FBUTtJQUN0QixPQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBRUQsV0FBVztBQUNYLFNBQVMsT0FBTyxDQUFJLEdBQWE7SUFDN0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFJRCxTQUFTO0FBQ1QsU0FBUyxJQUFJLENBQUMsR0FBYSxFQUFFLEdBQWlCLEVBQUUsR0FBVztJQUN2RCxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsb0NBQW9DO0lBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBSSxHQUFHLEtBQUssdUJBQXVCLEVBQUU7UUFDakMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNqQztTQUFNO1FBQ0gsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztLQUNsRDtJQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUMsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELElBQUksT0FBTyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLE9BQU87QUFDUCxPQUFPO0FBQ1AsTUFBTSxVQUFVLEdBQUcsVUFBVSxFQUFZO0lBQ3JDLE9BQU87UUFDSCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxTQUFTO0FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBRXRELE1BQU0sQ0FBQyxvQkFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sQ0FBQyx1QkFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyx1QkFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztBQUU1QyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFdkMsSUFBSSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFHeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ3pELE9BQU8sQ0FBQyxtQ0FBdUIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELE9BQU8sQ0FBQyxvQ0FBd0IsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5QyxPQUFPLENBQUMsbUJBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzQixPQUFPLENBQUMsaUJBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2QixPQUFPLENBQUMsa0JBQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM3QixPQUFPLENBQUMsa0JBQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxrQkFBTSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFDekMsT0FBTyxDQUFDLFVBQVUsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluc2VydGlvblNvcnQgZnJvbSBcIi4vaW5zZXJ0aW9uU29ydFwiO1xyXG5pbXBvcnQgc2VsZWN0aW9uU29ydCBmcm9tIFwiLi9zZWxlY3Rpb25Tb3J0XCI7XHJcbmltcG9ydCBidWJibGVTb3J0IGZyb20gXCIuL2J1YmJsZVNvcnRcIjtcclxuXHJcbmltcG9ydCBtZXJnZVNvcnQgZnJvbSBcIi4vbWVyZ2VTb3J0XCI7XHJcbmltcG9ydCB7c2hlbGxTb3J0V2l0aER5bmFtaWNHYXBzLCBzaGVsbFNvcnRXaXRoU3RhdGljR2Fwc30gZnJvbSBcIi4vc2hlbGxTb3J0XCI7XHJcbmltcG9ydCB7cVNvcnQsIHFTb3J0MSwgcVNvcnQyLCBxU29ydDN9IGZyb20gXCIuL3F1aWNrU29ydFwiO1xyXG5cclxuLy8g5rWL6K+V55So6ZqP5py65pWw57uEXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tQXJyKGxlbmd0aDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcnIucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZW5ndGgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbn1cclxuXHJcbi8vIOWkjeWItuS4gOS4quaVsOe7hFxyXG5mdW5jdGlvbiBwYXN0ZTxUPihhcnI6IFRbXSk6IFRbXSB7XHJcbiAgICByZXR1cm4gYXJyLnNsaWNlKCk7XHJcbn1cclxuXHJcbi8vIOajgOmqjOe7k+aenOaYr+WQpuato+ehrlxyXG5mdW5jdGlvbiBpc1JpZ2h0PFQ+KGFycjogbnVtYmVyW10pIHtcclxuICAgIHJldHVybiBhcnIuZXZlcnkoKHYsIGksIGEpID0+IHtcclxuICAgICAgICBpZiAoaSA9PT0gYXJyLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2IDw9IGFbaSArIDFdO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnR5cGUgU29ydEZ1bmN0aW9uID0gKGFycjogbnVtYmVyW10sIGNvbXBhcmVGbj86IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gbnVtYmVyKSA9PiBhbnlcclxuXHJcbi8vIOa1i+ivlea2iOiAl+aXtumXtFxyXG5mdW5jdGlvbiB0ZXN0KGFycjogbnVtYmVyW10sIGZ1bjogU29ydEZ1bmN0aW9uLCBzdHI6IHN0cmluZykge1xyXG4gICAgbGV0IHRlc3RBcnIgPSBwYXN0ZShhcnIpO1xyXG4gICAgLy8gdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBjb25zb2xlLnRpbWUoc3RyKTtcclxuICAgIGlmIChzdHIgPT09IFwibmF0aXZlU29ydChxdWlja1NvcnQpXCIpIHtcclxuICAgICAgICBmdW4odGVzdEFyciwgKGEsIGIpID0+IGEgLSBiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgX2FyciA9IGZ1bih0ZXN0QXJyKTtcclxuICAgICAgICB0ZXN0QXJyID0gQXJyYXkuaXNBcnJheShfYXJyKSA/IF9hcnIgOiB0ZXN0QXJyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUudGltZUVuZChzdHIpO1xyXG4gICAgY29uc29sZS5sb2coYHJlc3VsdDoke2lzUmlnaHQodGVzdEFycil9YCk7XHJcbiAgICByZXR1cm4gdGVzdEFycjtcclxufVxyXG5cclxubGV0IHRlc3RBcnIgPSBnZW5lcmF0ZVJhbmRvbUFycigxMDAwMCk7XHJcbmNvbnN0IG15VGVzdCA9IHRlc3QuYmluZCh7fSwgdGVzdEFycik7XHJcbi8vIOa1i+ivleWOn+eUn1xyXG4vLyDlj43mn6/ph4zljJZcclxuY29uc3QgdW5DdXJyeWluZyA9IGZ1bmN0aW9uIChmbjogRnVuY3Rpb24pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgICAgICByZXR1cm4gZm4uYXBwbHkoYXJndW1lbnRzWzBdLCBhcmdzKTtcclxuICAgIH07XHJcbn07XHJcblxyXG5sZXQgbmF0aXZlU29ydCA9IHVuQ3VycnlpbmcoQXJyYXkucHJvdG90eXBlLnNvcnQpO1xyXG4vLyDln7rmnKzmjpLluo/nrpfms5VcclxuY29uc29sZS5sb2coXCJCYXNpYyBzb3J0aW5nIGFsZ29yaXRobSAxMDAwMCBlbGVtZW50c1wiKTtcclxuXHJcbm15VGVzdChidWJibGVTb3J0LCBcImJ1YmJsZVNvcnRcIik7XHJcbm15VGVzdChpbnNlcnRpb25Tb3J0LCBcImluc2VydGlvblNvcnRcIik7XHJcbm15VGVzdChzZWxlY3Rpb25Tb3J0LCBcInNlbGVjdGlvblNvcnRcIik7XHJcbm15VGVzdChuYXRpdmVTb3J0LCBcIm5hdGl2ZVNvcnQocXVpY2tTb3J0KVwiKTtcclxuXHJcbmNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcblxyXG5sZXQgdGVzdEFycjEgPSBnZW5lcmF0ZVJhbmRvbUFycigxMDAwMDAwKTtcclxuY29uc3QgbXlUZXN0MSA9IHRlc3QuYmluZCh7fSwgdGVzdEFycjEpO1xyXG5cclxuXHJcbmNvbnNvbGUubG9nKFwiQWR2YW5jZWQgb3J0aW5nIGFsZ29yaXRobSAxMDAwMDAgZWxlbWVudHNcIik7XHJcbm15VGVzdDEoc2hlbGxTb3J0V2l0aFN0YXRpY0dhcHMsIFwi5biM5bCU5o6S5bqP5Zu65a6a6Ze06ZqUKENpdXJhIOW6j+WIlylcIik7XHJcbm15VGVzdDEoc2hlbGxTb3J0V2l0aER5bmFtaWNHYXBzLCBcIuW4jOWwlOaOkuW6j+WKqOaAgemXtOmalFwiKTtcclxubXlUZXN0MShtZXJnZVNvcnQsIFwi5b2S5bm25o6S5bqPXCIpO1xyXG5teVRlc3QxKHFTb3J0LCBcIuW/q+mAn+aOkuW6j1wiKTtcclxubXlUZXN0MShxU29ydDEsIFwi5b+r6YCf5o6S5bqPK+S4ieaVsOWPluS4rVwiKTtcclxubXlUZXN0MShxU29ydDIsIFwi5b+r6YCf5o6S5bqPK+S4ieaVsOWPluS4rSvmj5LlhaXmjpLluo9cIik7XHJcbm15VGVzdDEocVNvcnQzLCBcIuW/q+mAn+aOkuW6jyvkuInmlbDlj5bkuK0r5o+S5YWl5o6S5bqPK+iBmumbhuebuOetieWFg+e0oFwiKTtcclxubXlUZXN0MShuYXRpdmVTb3J0LCBcIm5hdGl2ZVNvcnQocXVpY2tTb3J0KVwiKTtcclxuXHJcbiJdfQ==