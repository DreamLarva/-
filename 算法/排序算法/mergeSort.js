"use strict";
/**
 * 归并排序
 * 把一系列排好序的子序列合并成一个大的完整有序序列。
 * 从理论上讲，这个算法很容易实现。我们需要两个排好序的子数组，
 * 然后通过比较数据大小，先从最小的数据开始插入，最后合并得到第三个数组。
 *
 * 问题:在实际情况中，归并排序还有一些问题，当我们用这个算法对一个很大的数据集进行排序时，
 * 我们需要相当大的空间来合并存储两个子数组.
 * */
Object.defineProperty(exports, "__esModule", { value: true });
function mergeSort(arr) {
    if (arr.length < 2) {
        return;
    }
    let step = 1;
    let left, right;
    while (step < arr.length) {
        left = 0;
        right = step;
        while (right + step <= arr.length) {
            mergeArrays(arr, left, left + step, right, right + step);
            left = right + step;
            right = left + step;
        }
        if (right < arr.length) {
            mergeArrays(arr, left, left + step, right, arr.length);
        }
        step *= 2;
    }
}
exports.default = mergeSort;
function mergeArrays(arr, startLeft, stopLeft, startRight, stopRight) {
    const rightArr = new Array(stopRight - startRight + 1);
    const leftArr = new Array(stopLeft - startLeft + 1);
    let _startRight = startRight;
    for (let i = 0; i < rightArr.length - 1; ++i) {
        rightArr[i] = arr[_startRight];
        ++_startRight;
    }
    let _startLeft = startLeft;
    for (let i = 0; i < leftArr.length - 1; i++) {
        leftArr[i] = arr[_startLeft];
        ++_startLeft;
    }
    // 设置哨兵值 为了 在 left 和 right 长度不相等的时候 依然排序不出问题 因为短的没有值了 长的值 都应按次序插入
    rightArr[rightArr.length - 1] = Infinity; // 哨兵值
    leftArr[leftArr.length - 1] = Infinity; // 哨兵值
    // m 和 n 相当于左右数组的指针
    let m = 0, n = 0;
    // 两个各自已经*排序好*的数组 组合进行排序 只比较共 左数组的length+ 右数组的length次
    // 并且左右数组(必定相邻)的区间 在结果arr数组中排序
    for (let k = startLeft; k < stopRight; k++) {
        if (leftArr[m] <= rightArr[n]) {
            arr[k] = leftArr[m];
            m++;
        }
        else {
            arr[k] = rightArr[n];
            n++;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VTb3J0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLnrpfms5Uv5o6S5bqP566X5rOVL21lcmdlU29ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7O0tBUUs7O0FBRUwsU0FBd0IsU0FBUyxDQUFDLEdBQWE7SUFDN0MsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNsQixPQUFPO0tBQ1I7SUFDRCxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLElBQUksRUFBRSxLQUFLLENBQUM7SUFDaEIsT0FBTyxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRTtRQUN4QixJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNiLE9BQU8sS0FBSyxHQUFHLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksR0FBRyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN6RCxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNwQixLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNyQjtRQUNELElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDdEIsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxJQUFJLENBQUMsQ0FBQztLQUNYO0FBQ0gsQ0FBQztBQW5CRCw0QkFtQkM7QUFFRCxTQUFTLFdBQVcsQ0FDbEIsR0FBYSxFQUNiLFNBQWlCLEVBQ2pCLFFBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLFNBQWlCO0lBRWpCLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzVDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0IsRUFBRSxXQUFXLENBQUM7S0FDZjtJQUNELElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0MsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QixFQUFFLFVBQVUsQ0FBQztLQUNkO0lBRUQsaUVBQWlFO0lBQ2pFLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLE1BQU07SUFDaEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsTUFBTTtJQUU5QyxtQkFBbUI7SUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNQLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFUixxREFBcUQ7SUFDckQsOEJBQThCO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxFQUFFLENBQUM7U0FDTDthQUFNO1lBQ0wsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixDQUFDLEVBQUUsQ0FBQztTQUNMO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDlvZLlubbmjpLluo9cbiAqIOaKiuS4gOezu+WIl+aOkuWlveW6j+eahOWtkOW6j+WIl+WQiOW5tuaIkOS4gOS4quWkp+eahOWujOaVtOacieW6j+W6j+WIl+OAglxuICog5LuO55CG6K665LiK6K6y77yM6L+Z5Liq566X5rOV5b6I5a655piT5a6e546w44CC5oiR5Lus6ZyA6KaB5Lik5Liq5o6S5aW95bqP55qE5a2Q5pWw57uE77yMXG4gKiDnhLblkI7pgJrov4fmr5TovoPmlbDmja7lpKflsI/vvIzlhYjku47mnIDlsI/nmoTmlbDmja7lvIDlp4vmj5LlhaXvvIzmnIDlkI7lkIjlubblvpfliLDnrKzkuInkuKrmlbDnu4TjgIJcbiAqXG4gKiDpl67popg65Zyo5a6e6ZmF5oOF5Ya15Lit77yM5b2S5bm25o6S5bqP6L+Y5pyJ5LiA5Lqb6Zeu6aKY77yM5b2T5oiR5Lus55So6L+Z5Liq566X5rOV5a+55LiA5Liq5b6I5aSn55qE5pWw5o2u6ZuG6L+b6KGM5o6S5bqP5pe277yMXG4gKiDmiJHku6zpnIDopoHnm7jlvZPlpKfnmoTnqbrpl7TmnaXlkIjlubblrZjlgqjkuKTkuKrlrZDmlbDnu4QuXG4gKiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVNvcnQoYXJyOiBudW1iZXJbXSkge1xuICBpZiAoYXJyLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHN0ZXAgPSAxO1xuICBsZXQgbGVmdCwgcmlnaHQ7XG4gIHdoaWxlIChzdGVwIDwgYXJyLmxlbmd0aCkge1xuICAgIGxlZnQgPSAwO1xuICAgIHJpZ2h0ID0gc3RlcDtcbiAgICB3aGlsZSAocmlnaHQgKyBzdGVwIDw9IGFyci5sZW5ndGgpIHtcbiAgICAgIG1lcmdlQXJyYXlzKGFyciwgbGVmdCwgbGVmdCArIHN0ZXAsIHJpZ2h0LCByaWdodCArIHN0ZXApO1xuICAgICAgbGVmdCA9IHJpZ2h0ICsgc3RlcDtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIHN0ZXA7XG4gICAgfVxuICAgIGlmIChyaWdodCA8IGFyci5sZW5ndGgpIHtcbiAgICAgIG1lcmdlQXJyYXlzKGFyciwgbGVmdCwgbGVmdCArIHN0ZXAsIHJpZ2h0LCBhcnIubGVuZ3RoKTtcbiAgICB9XG4gICAgc3RlcCAqPSAyO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlQXJyYXlzKFxuICBhcnI6IG51bWJlcltdLFxuICBzdGFydExlZnQ6IG51bWJlcixcbiAgc3RvcExlZnQ6IG51bWJlcixcbiAgc3RhcnRSaWdodDogbnVtYmVyLFxuICBzdG9wUmlnaHQ6IG51bWJlclxuKSB7XG4gIGNvbnN0IHJpZ2h0QXJyID0gbmV3IEFycmF5KHN0b3BSaWdodCAtIHN0YXJ0UmlnaHQgKyAxKTtcbiAgY29uc3QgbGVmdEFyciA9IG5ldyBBcnJheShzdG9wTGVmdCAtIHN0YXJ0TGVmdCArIDEpO1xuICBsZXQgX3N0YXJ0UmlnaHQgPSBzdGFydFJpZ2h0O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJpZ2h0QXJyLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIHJpZ2h0QXJyW2ldID0gYXJyW19zdGFydFJpZ2h0XTtcbiAgICArK19zdGFydFJpZ2h0O1xuICB9XG4gIGxldCBfc3RhcnRMZWZ0ID0gc3RhcnRMZWZ0O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlZnRBcnIubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgbGVmdEFycltpXSA9IGFycltfc3RhcnRMZWZ0XTtcbiAgICArK19zdGFydExlZnQ7XG4gIH1cblxuICAvLyDorr7nva7lk6jlhbXlgLwg5Li65LqGIOWcqCBsZWZ0IOWSjCByaWdodCDplb/luqbkuI3nm7jnrYnnmoTml7blgJkg5L6d54S25o6S5bqP5LiN5Ye66Zeu6aKYIOWboOS4uuefreeahOayoeacieWAvOS6hiDplb/nmoTlgLwg6YO95bqU5oyJ5qyh5bqP5o+S5YWlXG4gIHJpZ2h0QXJyW3JpZ2h0QXJyLmxlbmd0aCAtIDFdID0gSW5maW5pdHk7IC8vIOWTqOWFteWAvFxuICBsZWZ0QXJyW2xlZnRBcnIubGVuZ3RoIC0gMV0gPSBJbmZpbml0eTsgLy8g5ZOo5YW15YC8XG5cbiAgLy8gbSDlkowgbiDnm7jlvZPkuo7lt6blj7PmlbDnu4TnmoTmjIfpkohcbiAgbGV0IG0gPSAwLFxuICAgIG4gPSAwO1xuXG4gIC8vIOS4pOS4quWQhOiHquW3sue7jyrmjpLluo/lpb0q55qE5pWw57uEIOe7hOWQiOi/m+ihjOaOkuW6jyDlj6rmr5TovoPlhbEg5bem5pWw57uE55qEbGVuZ3RoKyDlj7PmlbDnu4TnmoRsZW5ndGjmrKFcbiAgLy8g5bm25LiU5bem5Y+z5pWw57uEKOW/heWumuebuOmCuynnmoTljLrpl7Qg5Zyo57uT5p6cYXJy5pWw57uE5Lit5o6S5bqPXG4gIGZvciAobGV0IGsgPSBzdGFydExlZnQ7IGsgPCBzdG9wUmlnaHQ7IGsrKykge1xuICAgIGlmIChsZWZ0QXJyW21dIDw9IHJpZ2h0QXJyW25dKSB7XG4gICAgICBhcnJba10gPSBsZWZ0QXJyW21dO1xuICAgICAgbSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcnJba10gPSByaWdodEFycltuXTtcbiAgICAgIG4rKztcbiAgICB9XG4gIH1cbn1cbiJdfQ==