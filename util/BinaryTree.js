"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNode = exports.createBinaryTree = void 0;
class TreeNode {
    constructor(val) {
        this.left = null;
        this.right = null;
        this.val = val;
    }
    // 层次遍历
    levelTraversal() {
        const result = [];
        const stack = [this];
        while (stack.length !== 0) {
            const node = stack.shift();
            result.push(node.val);
            node.left && stack.push(node.left);
            node.right && stack.push(node.right);
        }
        return result;
    }
    // 先序遍历
    preOrderTraversal() {
        const result = [];
        traversal(this);
        return result;
        function traversal(node) {
            if (!(node === null)) {
                traversal(node.left);
                result.push(node.val);
                traversal(node.right);
            }
        }
    }
}
exports.TreeNode = TreeNode;
function createBinaryTree(arr) {
    const root = new TreeNode(arr.shift()); // 根节点不为null
    let current_layer_node_arr = [root];
    const next_layer_node_arr = [];
    // 将每个放到 二叉树上 如果还剩余节点那么这些节点 的子节点全部设为null
    while (arr.length || next_layer_node_arr.length) {
        current_layer_node_arr.forEach((node) => {
            if (node != null) {
                let shiftData = arr.shift();
                const left_data = shiftData == null ? null : shiftData; // 避免数据出现 0 的情况
                if (left_data != null) {
                    const left_node = new TreeNode(left_data);
                    node.left = left_node;
                    next_layer_node_arr.push(left_node);
                }
                else {
                    node.left = null;
                }
                shiftData = arr.shift();
                const right_data = shiftData == null ? null : shiftData;
                if (right_data != null) {
                    const right_node = new TreeNode(right_data);
                    node.right = right_node;
                    next_layer_node_arr.push(right_node);
                }
                else {
                    node.right = null;
                }
            }
        });
        current_layer_node_arr = [...next_layer_node_arr];
        next_layer_node_arr.length = 0;
    }
    return root;
}
exports.createBinaryTree = createBinaryTree;
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(createBinaryTree([1, 2, 3, 4, 5, 6, 7]).levelTraversal(), [1, 2, 3, 4, 5, 6, 7]);
assert_1.default.deepStrictEqual(createBinaryTree([1, 2, 3, null, null, null, 6, 7]).levelTraversal(), [1, 2, 3, null, null, null, 6, 7].filter(Boolean));
assert_1.default.deepStrictEqual(createBinaryTree([
    0,
    0,
    0,
    0,
    null,
    null,
    0,
    null,
    null,
    null,
    0,
]).levelTraversal(), [0, 0, 0, 0, null, null, 0, null, null, null, 0].filter((v) => v != null));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmluYXJ5VHJlZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9CaW5hcnlUcmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLE1BQU0sUUFBUTtJQUtaLFlBQVksR0FBTTtRQUhsQixTQUFJLEdBQXVCLElBQUksQ0FBQztRQUNoQyxVQUFLLEdBQXVCLElBQUksQ0FBQztRQUcvQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBRUQsT0FBTztJQUNQLGNBQWM7UUFDWixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsTUFBTSxLQUFLLEdBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU87SUFDUCxpQkFBaUI7UUFDZixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sTUFBTSxDQUFDO1FBRWQsU0FBUyxTQUFTLENBQUMsSUFBcUI7WUFDdEMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUNwQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQixNQUFNLENBQUMsSUFBSSxDQUFD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Q0FDbEQsQ0FBQztBQUVGLGdCQUFNLENBQUMsZUFBZSxDQUNwQixnQkFBZ0IsQ0FBQztJQUNmLENBQUM7SUFDRCxDQUFDO0lBQ0QsQ0FBQztJQUNELENBQUM7SUFDRCxJQUFJO0lBQ0osSUFBSTtJQUNKLENBQUM7SUFDRCxJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUNuQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FDMUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5LqM5Y+J5qCRXG4gKiAqL1xuaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSB9IGZyb20gXCJmc1wiO1xuXG5jbGFzcyBUcmVlTm9kZTxUID0gYW55PiB7XG4gIHZhbDogVDtcbiAgbGVmdDogbnVsbCB8IFRyZWVOb2RlPFQ+ID0gbnVsbDtcbiAgcmlnaHQ6IG51bGwgfCBUcmVlTm9kZTxUPiA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IodmFsOiBUKSB7XG4gICAgdGhpcy52YWwgPSB2YWw7XG4gIH1cblxuICAvLyDlsYLmrKHpgY3ljoZcbiAgbGV2ZWxUcmF2ZXJzYWwoKSB7XG4gICAgY29uc3QgcmVzdWx0OiBUW10gPSBbXTtcbiAgICBjb25zdCBzdGFjazogVHJlZU5vZGU8VD5bXSA9IFt0aGlzXTtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoICE9PSAwKSB7XG4gICAgICBjb25zdCBub2RlID0gc3RhY2suc2hpZnQoKSE7XG4gICAgICByZXN1bHQucHVzaChub2RlLnZhbCk7XG4gICAgICBub2RlLmxlZnQgJiYgc3RhY2sucHVzaChub2RlLmxlZnQpO1xuICAgICAgbm9kZS5yaWdodCAmJiBzdGFjay5wdXNoKG5vZGUucmlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8g5YWI5bqP6YGN5Y6GXG4gIHByZU9yZGVyVHJhdmVyc2FsKCkge1xuICAgIGNvbnN0IHJlc3VsdDogVFtdID0gW107XG4gICAgdHJhdmVyc2FsKHRoaXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBmdW5jdGlvbiB0cmF2ZXJzYWwobm9kZTogVHJlZU5vZGUgfCBudWxsKSB7XG4gICAgICBpZiAoIShub2RlID09PSBudWxsKSkge1xuICAgICAgICB0cmF2ZXJzYWwobm9kZS5sZWZ0KTtcbiAgICAgICAgcmVzdWx0LnB1c2gobm9kZS52YWwpO1xuICAgICAgICB0cmF2ZXJzYWwobm9kZS5yaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJpbmFyeVRyZWU8VD4oYXJyOiAoVCB8IG51bGwpW10pIHtcbiAgY29uc3Qgcm9vdDogVHJlZU5vZGU8VD4gPSBuZXcgVHJlZU5vZGUoYXJyLnNoaWZ0KCkhKTsgLy8g5qC56IqC54K55LiN5Li6bnVsbFxuICBsZXQgY3VycmVudF9sYXllcl9ub2RlX2FyciA9IFtyb290XTtcbiAgY29uc3QgbmV4dF9sYXllcl9ub2RlX2FycjogVHJlZU5vZGU8VD5bXSA9IFtdO1xuICAvLyDlsIbmr4/kuKrmlL7liLAg5LqM5Y+J5qCR5LiKIOWmguaenOi/mOWJqeS9meiKgueCuemCo+S5iOi/meS6m+iKgueCuSDnmoTlrZDoioLngrnlhajpg6jorr7kuLpudWxsXG4gIHdoaWxlIChhcnIubGVuZ3RoIHx8IG5leHRfbGF5ZXJfbm9kZV9hcnIubGVuZ3RoKSB7XG4gICAgY3VycmVudF9sYXllcl9ub2RlX2Fyci5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGxldCBzaGlmdERhdGEgPSBhcnIuc2hpZnQoKTtcbiAgICAgICAgY29uc3QgbGVmdF9kYXRhID0gc2hpZnREYXRhID09IG51bGwgPyBudWxsIDogc2hpZnREYXRhOyAvLyDpgb/lhY3mlbDmja7lh7rnjrAgMCDnmoTmg4XlhrVcbiAgICAgICAgaWYgKGxlZnRfZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgY29uc3QgbGVmdF9ub2RlID0gbmV3IFRyZWVOb2RlKGxlZnRfZGF0YSk7XG4gICAgICAgICAgbm9kZS5sZWZ0ID0gbGVmdF9ub2RlO1xuICAgICAgICAgIG5leHRfbGF5ZXJfbm9kZV9hcnIucHVzaChsZWZ0X25vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUubGVmdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2hpZnREYXRhID0gYXJyLnNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0X2RhdGEgPSBzaGlmdERhdGEgPT0gbnVsbCA/IG51bGwgOiBzaGlmdERhdGE7XG4gICAgICAgIGlmIChyaWdodF9kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCByaWdodF9ub2RlID0gbmV3IFRyZWVOb2RlKHJpZ2h0X2RhdGEpO1xuICAgICAgICAgIG5vZGUucmlnaHQgPSByaWdodF9ub2RlO1xuICAgICAgICAgIG5leHRfbGF5ZXJfbm9kZV9hcnIucHVzaChyaWdodF9ub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnJpZ2h0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGN1cnJlbnRfbGF5ZXJfbm9kZV9hcnIgPSBbLi4ubmV4dF9sYXllcl9ub2RlX2Fycl07XG4gICAgbmV4dF9sYXllcl9ub2RlX2Fyci5sZW5ndGggPSAwO1xuICB9XG4gIHJldHVybiByb290O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCaW5hcnlUcmVlLCBUcmVlTm9kZSB9O1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgY3JlYXRlQmluYXJ5VHJlZShbMSwgMiwgMywgNCwgNSwgNiwgN10pLmxldmVsVHJhdmVyc2FsKCksXG4gIFsxLCAyLCAzLCA0LCA1LCA2LCA3XVxuKTtcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgY3JlYXRlQmluYXJ5VHJlZShbMSwgMiwgMywgbnVsbCwgbnVsbCwgbnVsbCwgNiwgN10pLmxldmVsVHJhdmVyc2FsKCksXG4gIFsxLCAyLCAzLCBudWxsLCBudWxsLCBudWxsLCA2LCA3XS5maWx0ZXIoQm9vbGVhbilcbik7XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXG4gIGNyZWF0ZUJpbmFyeVRyZWUoW1xuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIDAsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgMCxcbiAgXSkubGV2ZWxUcmF2ZXJzYWwoKSxcbiAgWzAsIDAsIDAsIDAsIG51bGwsIG51bGwsIDAsIG51bGwsIG51bGwsIG51bGwsIDBdLmZpbHRlcigodikgPT4gdiAhPSBudWxsKVxuKTtcbiJdfQ==