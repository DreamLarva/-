"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNode = exports.createLinkedList = void 0;
/**
 * 链表
 * */
class ListNode {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.ListNode = ListNode;
/**
 * @param arr 链表内容
 * @param cyclePosition 链表尾部连接的节点(索引从0开始)(成环)
 * */
function createLinkedList(arr, cyclePosition = -1) {
    const head = new ListNode(arr[0]);
    let currentNode = head;
    let cycleNode = cyclePosition === 0 ? head : null;
    for (let i = 1; i < arr.length; i++) {
        currentNode.next = new ListNode(arr[i]);
        currentNode = currentNode.next;
        if (i === cyclePosition)
            cycleNode = currentNode;
    }
    if (!(cyclePosition === -1 || cycleNode == null)) {
        currentNode.next = cycleNode;
    }
    return head;
}
exports.createLinkedList = createLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next, null);
}
{
    const sample = [1];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 1);
}
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 1);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
{
    const sample = [1, 2, 3];
    const linkedList = createLinkedList(sample, 1);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 3);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9MaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztLQUVLO0FBQ0wsTUFBTSxRQUFRO0lBSVYsWUFBWSxHQUFNO1FBQ2QsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksR0FBdUIsSUFBSSxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxJQUFJLElBQUksRUFBRTtZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNwQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDMUIsQ0FBQztDQUNKO0FBdUJHLDRCQUFRO0FBckJaOzs7S0FHSztBQUNMLFNBQVMsZ0JBQWdCLENBQUksR0FBUSxFQUFFLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDckQsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLElBQUksU0FBUyxHQUFHLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssYUFBYTtZQUFFLFNBQVMsR0FBRyxXQUFXLENBQUM7S0FDcEQ7SUFDRCxJQUFJLENBQUMsQ0FBQyxhQUFhLEtBQUssQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQzlDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0tBQ2hDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUdHLDRDQUFnQjtBQUlwQixvREFBNEI7QUFFNUI7SUFDSSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QixNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ25EO0FBQ0Q7SUFDSSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25CLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9DO0FBQ0Q7SUFDSSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QixNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMzRDtBQUNEO0lBQ0ksTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDpk77ooahcbiAqICovXG5jbGFzcyBMaXN0Tm9kZTxUID0gYW55PiB7XG4gICAgdmFsOiBUO1xuICAgIG5leHQ6IG51bGwgfCBMaXN0Tm9kZTxUPjtcblxuICAgIGNvbnN0cnVjdG9yKHZhbDogVCkge1xuICAgICAgICB0aGlzLnZhbCA9IHZhbDtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBub2RlOiBMaXN0Tm9kZTxUPiB8IG51bGwgPSB0aGlzO1xuICAgICAgICB3aGlsZSAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChub2RlLnZhbCk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdG9BcnJheSgpe1xuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gICAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSBhcnIg6ZO+6KGo5YaF5a65XG4gKiBAcGFyYW0gY3ljbGVQb3NpdGlvbiDpk77ooajlsL7pg6jov57mjqXnmoToioLngrko57Si5byV5LuOMOW8gOWniyko5oiQ546vKVxuICogKi9cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtlZExpc3Q8VD4oYXJyOiBUW10sIGN5Y2xlUG9zaXRpb24gPSAtMSkge1xuICAgIGNvbnN0IGhlYWQgPSBuZXcgTGlzdE5vZGUoYXJyWzBdKTtcbiAgICBsZXQgY3VycmVudE5vZGUgPSBoZWFkO1xuICAgIGxldCBjeWNsZU5vZGUgPSBjeWNsZVBvc2l0aW9uID09PSAwID8gaGVhZCA6IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudE5vZGUubmV4dCA9IG5ldyBMaXN0Tm9kZShhcnJbaV0pO1xuICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgICAgIGlmIChpID09PSBjeWNsZVBvc2l0aW9uKSBjeWNsZU5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICB9XG4gICAgaWYgKCEoY3ljbGVQb3NpdGlvbiA9PT0gLTEgfHwgY3ljbGVOb2RlID09IG51bGwpKSB7XG4gICAgICAgIGN1cnJlbnROb2RlLm5leHQgPSBjeWNsZU5vZGU7XG4gICAgfVxuICAgIHJldHVybiBoZWFkO1xufVxuXG5leHBvcnQge1xuICAgIGNyZWF0ZUxpbmtlZExpc3QsXG4gICAgTGlzdE5vZGUsXG59O1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxue1xuICAgIGNvbnN0IHNhbXBsZSA9IFsxLCAyXTtcbiAgICBjb25zdCBsaW5rZWRMaXN0ID0gY3JlYXRlTGlua2VkTGlzdChzYW1wbGUpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0LnZhbCwgMSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAyKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0LCBudWxsKTtcbn1cbntcbiAgICBjb25zdCBzYW1wbGUgPSBbMV07XG4gICAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlLCAwKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC52YWwsIDEpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLnZhbCwgMSk7XG59XG57XG4gICAgY29uc3Qgc2FtcGxlID0gWzEsIDJdO1xuICAgIGNvbnN0IGxpbmtlZExpc3QgPSBjcmVhdGVMaW5rZWRMaXN0KHNhbXBsZSwgMCk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS52YWwsIDIpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLnZhbCwgMSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEubmV4dCEubmV4dCEudmFsLCAyKTtcbn1cbntcbiAgICBjb25zdCBzYW1wbGUgPSBbMSwgMiwgM107XG4gICAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlLCAxKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC52YWwsIDEpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLnZhbCwgMik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEubmV4dCEudmFsLCAzKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS5uZXh0IS52YWwsIDIpO1xufVxuIl19