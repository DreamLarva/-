"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 链表
 * */
class ListNode {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.ListNode = ListNode;
/**
 * @param arr 链表内容
 * @param cyclePosition 链表尾部连接的节点(索引从0开始)(成环)
 * */
function createLinkedList(arr, cyclePosition = -1) {
    const head = new ListNode(arr[0]);
    let currentNode = head;
    let cycleNode = cyclePosition === 0 ? head : null;
    for (let i = 1; i < arr.length; i++) {
        currentNode.next = new ListNode(arr[i]);
        currentNode = currentNode.next;
        if (i === cyclePosition)
            cycleNode = currentNode;
    }
    if (!(cyclePosition === -1 || cycleNode == null)) {
        currentNode.next = cycleNode;
    }
    return head;
}
exports.createLinkedList = createLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next, null);
}
{
    const sample = [1];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 1);
}
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 1);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
{
    const sample = [1, 2, 3];
    const linkedList = createLinkedList(sample, 1);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 3);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9MaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0tBRUs7QUFDTCxNQUFNLFFBQVE7SUFJVixZQUFZLEdBQU07UUFDZCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxHQUF1QixJQUFJLENBQUM7UUFDcEMsT0FBTyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUMxQixDQUFDO0NBQ0o7QUF1QkcsNEJBQVE7QUFyQlo7OztLQUdLO0FBQ0wsU0FBUyxnQkFBZ0IsQ0FBSSxHQUFRLEVBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUNyRCxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSxTQUFTLEdBQUcsYUFBYSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxhQUFhO1lBQUUsU0FBUyxHQUFHLFdBQVcsQ0FBQztLQUNwRDtJQUNELElBQUksQ0FBQyxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLEVBQUU7UUFDOUMsV0FBVyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7S0FDaEM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBR0csNENBQWdCO0FBSXBCLG9EQUE0QjtBQUU1QjtJQUNJLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDbkQ7QUFDRDtJQUNJLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDL0M7QUFDRDtJQUNJLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzNEO0FBQ0Q7SUFDSSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDM0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOmTvuihqFxuICogKi9cbmNsYXNzIExpc3ROb2RlPFQgPSBhbnk+IHtcbiAgICB2YWw6IFQ7XG4gICAgbmV4dDogbnVsbCB8IExpc3ROb2RlPFQ+O1xuXG4gICAgY29uc3RydWN0b3IodmFsOiBUKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsO1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IG5vZGU6IExpc3ROb2RlPFQ+IHwgbnVsbCA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUudmFsKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0b0FycmF5KCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIGFyciDpk77ooajlhoXlrrlcbiAqIEBwYXJhbSBjeWNsZVBvc2l0aW9uIOmTvuihqOWwvumDqOi/nuaOpeeahOiKgueCuSjntKLlvJXku44w5byA5aeLKSjmiJDnjq8pXG4gKiAqL1xuZnVuY3Rpb24gY3JlYXRlTGlua2VkTGlzdDxUPihhcnI6IFRbXSwgY3ljbGVQb3NpdGlvbiA9IC0xKSB7XG4gICAgY29uc3QgaGVhZCA9IG5ldyBMaXN0Tm9kZShhcnJbMF0pO1xuICAgIGxldCBjdXJyZW50Tm9kZSA9IGhlYWQ7XG4gICAgbGV0IGN5Y2xlTm9kZSA9IGN5Y2xlUG9zaXRpb24gPT09IDAgPyBoZWFkIDogbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gbmV3IExpc3ROb2RlKGFycltpXSk7XG4gICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICAgICAgaWYgKGkgPT09IGN5Y2xlUG9zaXRpb24pIGN5Y2xlTm9kZSA9IGN1cnJlbnROb2RlO1xuICAgIH1cbiAgICBpZiAoIShjeWNsZVBvc2l0aW9uID09PSAtMSB8fCBjeWNsZU5vZGUgPT0gbnVsbCkpIHtcbiAgICAgICAgY3VycmVudE5vZGUubmV4dCA9IGN5Y2xlTm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGhlYWQ7XG59XG5cbmV4cG9ydCB7XG4gICAgY3JlYXRlTGlua2VkTGlzdCxcbiAgICBMaXN0Tm9kZSxcbn07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG57XG4gICAgY29uc3Qgc2FtcGxlID0gWzEsIDJdO1xuICAgIGNvbnN0IGxpbmtlZExpc3QgPSBjcmVhdGVMaW5rZWRMaXN0KHNhbXBsZSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS52YWwsIDIpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQsIG51bGwpO1xufVxue1xuICAgIGNvbnN0IHNhbXBsZSA9IFsxXTtcbiAgICBjb25zdCBsaW5rZWRMaXN0ID0gY3JlYXRlTGlua2VkTGlzdChzYW1wbGUsIDApO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0LnZhbCwgMSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAxKTtcbn1cbntcbiAgICBjb25zdCBzYW1wbGUgPSBbMSwgMl07XG4gICAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlLCAwKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC52YWwsIDEpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLnZhbCwgMik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEubmV4dCEudmFsLCAxKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS5uZXh0IS52YWwsIDIpO1xufVxue1xuICAgIGNvbnN0IHNhbXBsZSA9IFsxLCAyLCAzXTtcbiAgICBjb25zdCBsaW5rZWRMaXN0ID0gY3JlYXRlTGlua2VkTGlzdChzYW1wbGUsIDEpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0LnZhbCwgMSk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAyKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS52YWwsIDMpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLm5leHQhLnZhbCwgMik7XG59XG4iXX0=