"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNode = exports.createLinkedList = void 0;
/**
 * 链表
 * */
class ListNode {
    constructor(val) {
        this.val = val;
        this.next = null;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.ListNode = ListNode;
/**
 * @param arr 链表内容
 * @param cyclePosition 链表尾部连接的节点(索引从0开始)(成环)
 * */
function createLinkedList(arr, cyclePosition = -1) {
    const head = new ListNode(arr[0]);
    let currentNode = head;
    let cycleNode = cyclePosition === 0 ? head : null;
    for (let i = 1; i < arr.length; i++) {
        currentNode.next = new ListNode(arr[i]);
        currentNode = currentNode.next;
        if (i === cyclePosition)
            cycleNode = currentNode;
    }
    if (!(cyclePosition === -1 || cycleNode == null)) {
        currentNode.next = cycleNode;
    }
    return head;
}
exports.createLinkedList = createLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next, null);
}
{
    const sample = [1];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 1);
}
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 1);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
{
    const sample = [1, 2, 3];
    const linkedList = createLinkedList(sample, 1);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 3);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9MaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztLQUVLO0FBQ0wsTUFBTSxRQUFRO0lBSVosWUFBWSxHQUFNO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLEdBQXVCLElBQUksQ0FBQztRQUNwQyxPQUFPLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0QsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQXFCMEIsNEJBQVE7QUFuQm5DOzs7S0FHSztBQUNMLFNBQVMsZ0JBQWdCLENBQUksR0FBUSxFQUFFLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDdkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLElBQUksU0FBUyxHQUFHLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssYUFBYTtZQUFFLFNBQVMsR0FBRyxXQUFXLENBQUM7S0FDbEQ7SUFDRCxJQUFJLENBQUMsQ0FBQyxhQUFhLEtBQUssQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ2hELFdBQVcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRVEsNENBQWdCO0FBRXpCLG9EQUE0QjtBQUU1QjtJQUNFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDakQ7QUFDRDtJQUNFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDN0M7QUFDRDtJQUNFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3pEO0FBQ0Q7SUFDRSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDekQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOmTvuihqFxuICogKi9cbmNsYXNzIExpc3ROb2RlPFQgPSBhbnk+IHtcbiAgdmFsOiBUO1xuICBuZXh0OiBudWxsIHwgTGlzdE5vZGU8VD47XG5cbiAgY29uc3RydWN0b3IodmFsOiBUKSB7XG4gICAgdGhpcy52YWwgPSB2YWw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBub2RlOiBMaXN0Tm9kZTxUPiB8IG51bGwgPSB0aGlzO1xuICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5vZGUudmFsKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gYXJyIOmTvuihqOWGheWuuVxuICogQHBhcmFtIGN5Y2xlUG9zaXRpb24g6ZO+6KGo5bC+6YOo6L+e5o6l55qE6IqC54K5KOe0ouW8leS7jjDlvIDlp4spKOaIkOeOrylcbiAqICovXG5mdW5jdGlvbiBjcmVhdGVMaW5rZWRMaXN0PFQ+KGFycjogVFtdLCBjeWNsZVBvc2l0aW9uID0gLTEpIHtcbiAgY29uc3QgaGVhZCA9IG5ldyBMaXN0Tm9kZShhcnJbMF0pO1xuICBsZXQgY3VycmVudE5vZGUgPSBoZWFkO1xuICBsZXQgY3ljbGVOb2RlID0gY3ljbGVQb3NpdGlvbiA9PT0gMCA/IGhlYWQgOiBudWxsO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnROb2RlLm5leHQgPSBuZXcgTGlzdE5vZGUoYXJyW2ldKTtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgaWYgKGkgPT09IGN5Y2xlUG9zaXRpb24pIGN5Y2xlTm9kZSA9IGN1cnJlbnROb2RlO1xuICB9XG4gIGlmICghKGN5Y2xlUG9zaXRpb24gPT09IC0xIHx8IGN5Y2xlTm9kZSA9PSBudWxsKSkge1xuICAgIGN1cnJlbnROb2RlLm5leHQgPSBjeWNsZU5vZGU7XG4gIH1cbiAgcmV0dXJuIGhlYWQ7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxpbmtlZExpc3QsIExpc3ROb2RlIH07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG57XG4gIGNvbnN0IHNhbXBsZSA9IFsxLCAyXTtcbiAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAyKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEubmV4dCwgbnVsbCk7XG59XG57XG4gIGNvbnN0IHNhbXBsZSA9IFsxXTtcbiAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlLCAwKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAxKTtcbn1cbntcbiAgY29uc3Qgc2FtcGxlID0gWzEsIDJdO1xuICBjb25zdCBsaW5rZWRMaXN0ID0gY3JlYXRlTGlua2VkTGlzdChzYW1wbGUsIDApO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC52YWwsIDEpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS52YWwsIDIpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS52YWwsIDEpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS5uZXh0IS52YWwsIDIpO1xufVxue1xuICBjb25zdCBzYW1wbGUgPSBbMSwgMiwgM107XG4gIGNvbnN0IGxpbmtlZExpc3QgPSBjcmVhdGVMaW5rZWRMaXN0KHNhbXBsZSwgMSk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0LnZhbCwgMSk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLnZhbCwgMik7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLnZhbCwgMyk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLm5leHQhLnZhbCwgMik7XG59XG4iXX0=