"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListNode = exports.createLinkedList = void 0;
/**
 * 链表
 * */
class ListNode {
    val;
    next;
    constructor(val) {
        this.val = val;
        this.next = null;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.ListNode = ListNode;
/**
 * @param arr 链表内容
 * @param cyclePosition 链表尾部连接的节点(索引从0开始)(成环)
 * */
function createLinkedList(arr, cyclePosition = -1) {
    const head = new ListNode(arr[0]);
    let currentNode = head;
    let cycleNode = cyclePosition === 0 ? head : null;
    for (let i = 1; i < arr.length; i++) {
        currentNode.next = new ListNode(arr[i]);
        currentNode = currentNode.next;
        if (i === cyclePosition)
            cycleNode = currentNode;
    }
    if (!(cyclePosition === -1 || cycleNode == null)) {
        currentNode.next = cycleNode;
    }
    return head;
}
exports.createLinkedList = createLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next, null);
}
{
    const sample = [1];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 1);
}
{
    const sample = [1, 2];
    const linkedList = createLinkedList(sample, 0);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 1);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
{
    const sample = [1, 2, 3];
    const linkedList = createLinkedList(sample, 1);
    assert_1.default.strictEqual(linkedList.val, 1);
    assert_1.default.strictEqual(linkedList.next.val, 2);
    assert_1.default.strictEqual(linkedList.next.next.val, 3);
    assert_1.default.strictEqual(linkedList.next.next.next.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9MaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztLQUVLO0FBQ0wsTUFBTSxRQUFRO0lBQ1osR0FBRyxDQUFJO0lBQ1AsSUFBSSxDQUFxQjtJQUV6QixZQUFZLEdBQU07UUFDaEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFPLEVBQUUsQ0FBQztRQUN0QixJQUFJLElBQUksR0FBdUIsSUFBSSxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxJQUFJLElBQUksRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNsQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBcUIwQiw0QkFBUTtBQW5CbkM7OztLQUdLO0FBQ0wsU0FBUyxnQkFBZ0IsQ0FBSSxHQUFRLEVBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN2RCxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSxTQUFTLEdBQUcsYUFBYSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFD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TGlzdE5vZGU8VCA9IGFueT4ge1xuICB2YWw6IFQ7XG4gIG5leHQ6IG51bGwgfCBMaXN0Tm9kZTxUPjtcblxuICBjb25zdHJ1Y3Rvcih2YWw6IFQpIHtcbiAgICB0aGlzLnZhbCA9IHZhbDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgcmVzdWx0OlRbXSA9IFtdO1xuICAgIGxldCBub2RlOiBMaXN0Tm9kZTxUPiB8IG51bGwgPSB0aGlzO1xuICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5vZGUudmFsKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB0b0FycmF5KCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gYXJyIOmTvuihqOWGheWuuVxuICogQHBhcmFtIGN5Y2xlUG9zaXRpb24g6ZO+6KGo5bC+6YOo6L+e5o6l55qE6IqC54K5KOe0ouW8leS7jjDlvIDlp4spKOaIkOeOrylcbiAqICovXG5mdW5jdGlvbiBjcmVhdGVMaW5rZWRMaXN0PFQ+KGFycjogVFtdLCBjeWNsZVBvc2l0aW9uID0gLTEpIHtcbiAgY29uc3QgaGVhZCA9IG5ldyBMaXN0Tm9kZShhcnJbMF0pO1xuICBsZXQgY3VycmVudE5vZGUgPSBoZWFkO1xuICBsZXQgY3ljbGVOb2RlID0gY3ljbGVQb3NpdGlvbiA9PT0gMCA/IGhlYWQgOiBudWxsO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnROb2RlLm5leHQgPSBuZXcgTGlzdE5vZGUoYXJyW2ldKTtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgaWYgKGkgPT09IGN5Y2xlUG9zaXRpb24pIGN5Y2xlTm9kZSA9IGN1cnJlbnROb2RlO1xuICB9XG4gIGlmICghKGN5Y2xlUG9zaXRpb24gPT09IC0xIHx8IGN5Y2xlTm9kZSA9PSBudWxsKSkge1xuICAgIGN1cnJlbnROb2RlLm5leHQgPSBjeWNsZU5vZGU7XG4gIH1cbiAgcmV0dXJuIGhlYWQ7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxpbmtlZExpc3QsIExpc3ROb2RlIH07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG57XG4gIGNvbnN0IHNhbXBsZSA9IFsxLCAyXTtcbiAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAyKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEubmV4dCwgbnVsbCk7XG59XG57XG4gIGNvbnN0IHNhbXBsZSA9IFsxXTtcbiAgY29uc3QgbGlua2VkTGlzdCA9IGNyZWF0ZUxpbmtlZExpc3Qoc2FtcGxlLCAwKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QudmFsLCAxKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGxpbmtlZExpc3QubmV4dCEudmFsLCAxKTtcbn1cbntcbiAgY29uc3Qgc2FtcGxlID0gWzEsIDJdO1xuICBjb25zdCBsaW5rZWRMaXN0ID0gY3JlYXRlTGlua2VkTGlzdChzYW1wbGUsIDApO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC52YWwsIDEpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS52YWwsIDIpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS52YWwsIDEpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwobGlua2VkTGlzdC5uZXh0IS5uZXh0IS5uZXh0IS52YWwsIDIpO1xufVxue1xuICBjb25zdCBzYW1wbGUgPSBbMSwgMiwgM107XG4gIGNvbnN0IGxpbmtlZExpc3QgPSBjcmVhdGVMaW5rZWRMaXN0KHNhbXBsZSwgMSk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0LnZhbCwgMSk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLnZhbCwgMik7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLnZhbCwgMyk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsaW5rZWRMaXN0Lm5leHQhLm5leHQhLm5leHQhLnZhbCwgMik7XG59XG4iXX0=