"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleLinkedListNode = exports.createDoubleLinkedList = void 0;
/**
 * 双向链表
 * */
class DoubleLinkedListNode {
    constructor(val) {
        this.prev = null;
        this.next = null;
        this.child = null;
        this.val = val;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.DoubleLinkedListNode = DoubleLinkedListNode;
/**
 * @param arr 链表内容
 * */
function createDoubleLinkedList(arr) {
    const head = new DoubleLinkedListNode(arr[0]);
    let currentNode = head;
    let lastNode = null;
    for (let i = 0; i < arr.length; i++) {
        currentNode.next = arr[i + 1] == null ? null : new DoubleLinkedListNode(arr[i + 1]);
        currentNode.prev = lastNode;
        if (currentNode.next == null)
            break;
        lastNode = currentNode;
        currentNode = currentNode.next;
    }
    return head;
}
exports.createDoubleLinkedList = createDoubleLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2, 3];
    const doubleLinkedList = createDoubleLinkedList(sample);
    assert_1.default.strictEqual(doubleLinkedList.val, 1);
    assert_1.default.strictEqual(doubleLinkedList.prev, null);
    assert_1.default.strictEqual(doubleLinkedList.next.val, 2);
    assert_1.default.strictEqual(doubleLinkedList.next.prev.val, 1);
    assert_1.default.strictEqual(doubleLinkedList.next.next.val, 3);
    assert_1.default.strictEqual(doubleLinkedList.next.next.next, null);
    assert_1.default.strictEqual(doubleLinkedList.next.next.prev.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG91YmxlTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9Eb3VibGVMaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztLQUVLO0FBQ0wsTUFBTSxvQkFBb0I7SUFNdEIsWUFBWSxHQUFNO1FBSmxCLFNBQUksR0FBbUMsSUFBSSxDQUFDO1FBQzVDLFNBQUksR0FBbUMsSUFBSSxDQUFDO1FBQzVDLFVBQUssR0FBbUMsSUFBSSxDQUFDO1FBR3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxHQUFtQyxJQUFJLENBQUM7UUFDaEQsT0FBTyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUFxQitCLG9EQUFvQjtBQW5CcEQ7O0tBRUs7QUFDTCxTQUFTLHNCQUFzQixDQUFJLEdBQVE7SUFDdkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEYsV0FBVyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxXQUFXLENBQUMsSUFBSSxJQUFJLElBQUk7WUFBRSxNQUFNO1FBRXBDLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDdkIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7S0FDbEM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRU8sd0RBQXNCO0FBRTlCLG9EQUE0QjtBQUU1QjtJQUNJLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEQsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDakUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWPjOWQkemTvuihqFxuICogKi9cbmNsYXNzIERvdWJsZUxpbmtlZExpc3ROb2RlPFQgPSBhbnk+IHtcbiAgICB2YWw6IFQ7XG4gICAgcHJldjogbnVsbCB8IERvdWJsZUxpbmtlZExpc3ROb2RlPFQ+ID0gbnVsbDtcbiAgICBuZXh0OiBudWxsIHwgRG91YmxlTGlua2VkTGlzdE5vZGU8VD4gPSBudWxsO1xuICAgIGNoaWxkOiBudWxsIHwgRG91YmxlTGlua2VkTGlzdE5vZGU8VD4gPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IodmFsOiBUKSB7XG4gICAgICAgIHRoaXMudmFsID0gdmFsO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IG5vZGU6IERvdWJsZUxpbmtlZExpc3ROb2RlPFQ+IHwgbnVsbCA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUudmFsKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSBhcnIg6ZO+6KGo5YaF5a65XG4gKiAqL1xuZnVuY3Rpb24gY3JlYXRlRG91YmxlTGlua2VkTGlzdDxUPihhcnI6IFRbXSkge1xuICAgIGNvbnN0IGhlYWQgPSBuZXcgRG91YmxlTGlua2VkTGlzdE5vZGUoYXJyWzBdKTtcbiAgICBsZXQgY3VycmVudE5vZGUgPSBoZWFkO1xuICAgIGxldCBsYXN0Tm9kZSA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudE5vZGUubmV4dCA9IGFycltpICsgMV0gPT0gbnVsbCA/IG51bGwgOiBuZXcgRG91YmxlTGlua2VkTGlzdE5vZGUoYXJyW2kgKyAxXSk7XG4gICAgICAgIGN1cnJlbnROb2RlLnByZXYgPSBsYXN0Tm9kZTtcbiAgICAgICAgaWYgKGN1cnJlbnROb2RlLm5leHQgPT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgbGFzdE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkO1xufVxuXG5leHBvcnQge2NyZWF0ZURvdWJsZUxpbmtlZExpc3QsIERvdWJsZUxpbmtlZExpc3ROb2RlfTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbntcbiAgICBjb25zdCBzYW1wbGUgPSBbMSwgMiwgM107XG4gICAgY29uc3QgZG91YmxlTGlua2VkTGlzdCA9IGNyZWF0ZURvdWJsZUxpbmtlZExpc3Qoc2FtcGxlKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZG91YmxlTGlua2VkTGlzdC52YWwsIDEpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChkb3VibGVMaW5rZWRMaXN0LnByZXYsIG51bGwpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChkb3VibGVMaW5rZWRMaXN0Lm5leHQhLnZhbCwgMik7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGRvdWJsZUxpbmtlZExpc3QubmV4dCEucHJldiEudmFsLCAxKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoZG91YmxlTGlua2VkTGlzdC5uZXh0IS5uZXh0IS52YWwsIDMpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChkb3VibGVMaW5rZWRMaXN0Lm5leHQhLm5leHQhLm5leHQsIG51bGwpO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChkb3VibGVMaW5rZWRMaXN0Lm5leHQhLm5leHQhLnByZXYhLnZhbCwgMik7XG59XG4iXX0=