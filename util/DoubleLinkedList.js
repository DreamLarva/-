"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoubleLinkedListNode = exports.createDoubleLinkedList = void 0;
/**
 * 双向链表
 * */
class DoubleLinkedListNode {
    constructor(val) {
        this.prev = null;
        this.next = null;
        this.child = null;
        this.val = val;
    }
    toString() {
        const result = [];
        let node = this;
        while (node != null) {
            result.push(node.val);
            node = node.next;
        }
        return result;
    }
    toArray() {
        return this.toString();
    }
}
exports.DoubleLinkedListNode = DoubleLinkedListNode;
/**
 * @param arr 链表内容
 * */
function createDoubleLinkedList(arr) {
    const head = new DoubleLinkedListNode(arr[0]);
    let currentNode = head;
    let lastNode = null;
    for (let i = 0; i < arr.length; i++) {
        currentNode.next =
            arr[i + 1] == null ? null : new DoubleLinkedListNode(arr[i + 1]);
        currentNode.prev = lastNode;
        if (currentNode.next == null)
            break;
        lastNode = currentNode;
        currentNode = currentNode.next;
    }
    return head;
}
exports.createDoubleLinkedList = createDoubleLinkedList;
const assert_1 = __importDefault(require("assert"));
{
    const sample = [1, 2, 3];
    const doubleLinkedList = createDoubleLinkedList(sample);
    assert_1.default.strictEqual(doubleLinkedList.val, 1);
    assert_1.default.strictEqual(doubleLinkedList.prev, null);
    assert_1.default.strictEqual(doubleLinkedList.next.val, 2);
    assert_1.default.strictEqual(doubleLinkedList.next.prev.val, 1);
    assert_1.default.strictEqual(doubleLinkedList.next.next.val, 3);
    assert_1.default.strictEqual(doubleLinkedList.next.next.next, null);
    assert_1.default.strictEqual(doubleLinkedList.next.next.prev.val, 2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG91YmxlTGlua2VkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidXRpbC9Eb3VibGVMaW5rZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztLQUVLO0FBQ0wsTUFBTSxvQkFBb0I7SUFNeEIsWUFBWSxHQUFNO1FBSmxCLFNBQUksR0FBbUMsSUFBSSxDQUFDO1FBQzVDLFNBQUksR0FBbUMsSUFBSSxDQUFDO1FBQzVDLFVBQUssR0FBbUMsSUFBSSxDQUFDO1FBRzNDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxHQUFtQyxJQUFJLENBQUM7UUFDaEQsT0FBTyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFzQmdDLG9EQUFvQjtBQXBCckQ7O0tBRUs7QUFDTCxTQUFTLHNCQUFzQixDQUFJLEdBQVE7SUFDekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLFdBQVcsQ0FBQyxJQUFJO1lBQ2QsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsV0FBVyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDNUIsSUFBSSxXQUFXLENBQUMsSUFBSSxJQUFJLElBQUk7WUFBRSxNQUFNO1FBRXBDLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDdkIsV0FBVyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7S0FDaEM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFUSx3REFBc0I7QUFFL0Isb0RBQTRCO0FBRTVCO0lBQ0UsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVDLGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELGdCQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUssQ0FBQyxJQUFLLENBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5Y+M5ZCR6ZO+6KGoXG4gKiAqL1xuY2xhc3MgRG91YmxlTGlua2VkTGlzdE5vZGU8VCA9IGFueT4ge1xuICB2YWw6IFQ7XG4gIHByZXY6IG51bGwgfCBEb3VibGVMaW5rZWRMaXN0Tm9kZTxUPiA9IG51bGw7XG4gIG5leHQ6IG51bGwgfCBEb3VibGVMaW5rZWRMaXN0Tm9kZTxUPiA9IG51bGw7XG4gIGNoaWxkOiBudWxsIHwgRG91YmxlTGlua2VkTGlzdE5vZGU8VD4gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHZhbDogVCkge1xuICAgIHRoaXMudmFsID0gdmFsO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IG5vZGU6IERvdWJsZUxpbmtlZExpc3ROb2RlPFQ+IHwgbnVsbCA9IHRoaXM7XG4gICAgd2hpbGUgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnB1c2gobm9kZS52YWwpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdG9BcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIGFyciDpk77ooajlhoXlrrlcbiAqICovXG5mdW5jdGlvbiBjcmVhdGVEb3VibGVMaW5rZWRMaXN0PFQ+KGFycjogVFtdKSB7XG4gIGNvbnN0IGhlYWQgPSBuZXcgRG91YmxlTGlua2VkTGlzdE5vZGUoYXJyWzBdKTtcbiAgbGV0IGN1cnJlbnROb2RlID0gaGVhZDtcbiAgbGV0IGxhc3ROb2RlID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjdXJyZW50Tm9kZS5uZXh0ID1cbiAgICAgIGFycltpICsgMV0gPT0gbnVsbCA/IG51bGwgOiBuZXcgRG91YmxlTGlua2VkTGlzdE5vZGUoYXJyW2kgKyAxXSk7XG4gICAgY3VycmVudE5vZGUucHJldiA9IGxhc3ROb2RlO1xuICAgIGlmIChjdXJyZW50Tm9kZS5uZXh0ID09IG51bGwpIGJyZWFrO1xuXG4gICAgbGFzdE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gIH1cblxuICByZXR1cm4gaGVhZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRG91YmxlTGlua2VkTGlzdCwgRG91YmxlTGlua2VkTGlzdE5vZGUgfTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbntcbiAgY29uc3Qgc2FtcGxlID0gWzEsIDIsIDNdO1xuICBjb25zdCBkb3VibGVMaW5rZWRMaXN0ID0gY3JlYXRlRG91YmxlTGlua2VkTGlzdChzYW1wbGUpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwoZG91YmxlTGlua2VkTGlzdC52YWwsIDEpO1xuICBhc3NlcnQuc3RyaWN0RXF1YWwoZG91YmxlTGlua2VkTGlzdC5wcmV2LCBudWxsKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGRvdWJsZUxpbmtlZExpc3QubmV4dCEudmFsLCAyKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGRvdWJsZUxpbmtlZExpc3QubmV4dCEucHJldiEudmFsLCAxKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGRvdWJsZUxpbmtlZExpc3QubmV4dCEubmV4dCEudmFsLCAzKTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKGRvdWJsZUxpbmtlZExpc3QubmV4dCEubmV4dCEubmV4dCwgbnVsbCk7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChkb3VibGVMaW5rZWRMaXN0Lm5leHQhLm5leHQhLnByZXYhLnZhbCwgMik7XG59XG4iXX0=