"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const inversify_config_1 = require("./inversify/inversify.config");
const types_1 = require("./inversify/types");
const tsyringe_config_1 = require("./tsyringe/tsyringe.config");
const entities_1 = require("./tsyringe/entities");
class KatanaNative {
    hit() {
        return "cut!";
    }
}
class ShurikenNative {
    throw() {
        return "hit!";
    }
}
class NinjaNative {
    constructor(_katana, _shuriken) {
        this._katana = _katana;
        this._shuriken = _shuriken;
    }
    fight() {
        return this._katana.hit();
    }
    sneak() {
        return this._shuriken.throw();
    }
}
const Benchmark = require('benchmark');
const suite = new Benchmark.Suite;
suite
    .add('inversify', function () {
    inversify_config_1.myContainer.get(types_1.TYPES.Warrior);
})
    .add('tsyringe', function () {
    tsyringe_config_1.myContainer.resolve(entities_1.Ninja);
})
    .add('native', function () {
    new NinjaNative(new KatanaNative(), new ShurikenNative());
})
    // add listeners
    .on('cycle', function (event) {
    console.log(String(event.target));
})
    .on('complete', function () {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
})
    // run async
    .run({ 'async': false });
/**
 * inversify    x 163,053 ops/sec ±3.46% (90 runs sampled)
 * tsyringe     x 3,034,294 ops/sec ±1.71% (90 runs sampled)
 * native       x 692,454,958 ops/sec ±1.10% (91 runs sampled)
 * Fastest is native
 *
 * tsyringe 容器更轻量化
 * 还有一个 库叫做 awilix 虽然功能全 但是没有 修饰器
 * */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2ttYXJrLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJJT0MvYmVuY2ttYXJrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEJBQTBCO0FBRzFCLG1FQUErRTtBQUMvRSw2Q0FBd0M7QUFDeEMsZ0VBQTRFO0FBQzVFLGtEQUEwQztBQUcxQyxNQUFNLFlBQVk7SUFDUCxHQUFHO1FBQ04sT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKO0FBRUQsTUFBTSxjQUFjO0lBQ1QsS0FBSztRQUNSLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQUVELE1BQU0sV0FBVztJQUNiLFlBQ1ksT0FBZSxFQUNmLFNBQTBCO1FBRDFCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixjQUFTLEdBQVQsU0FBUyxDQUFpQjtJQUd0QyxDQUFDO0lBRU0sS0FBSztRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSztRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUFHRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ2xDLEtBQUs7S0FDQSxHQUFHLENBQUMsV0FBVyxFQUFFO0lBQ2QsOEJBQWtCLENBQUMsR0FBRyxDQUFVLGFBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuRCxDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQ2IsNkJBQWlCLENBQUMsT0FBTyxDQUFVLGdCQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsUUFBUSxFQUFFO0lBQ1gsSUFBSSxXQUFXLENBQUMsSUFBSSxZQUFZLEVBQUUsRUFBRSxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0lBQ0YsZ0JBQWdCO0tBQ2YsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLEtBQVU7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0tBQ0QsRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDcEUsQ0FBQyxDQUFDO0lBQ0YsWUFBWTtLQUNYLEdBQUcsQ0FBQyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0FBRTNCOzs7Ozs7OztLQVFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xyXG5cclxuaW1wb3J0IHtUaHJvd2FibGVXZWFwb24sIFdhcnJpb3IsIFdlYXBvbn0gZnJvbSBcIi4vaW52ZXJzaWZ5L2ludGVyZmFjZXNcIjtcclxuaW1wb3J0IHtteUNvbnRhaW5lciBhcyBpbnZlcnNpZnlDb250YWluZXJ9IGZyb20gXCIuL2ludmVyc2lmeS9pbnZlcnNpZnkuY29uZmlnXCI7XHJcbmltcG9ydCB7VFlQRVN9IGZyb20gXCIuL2ludmVyc2lmeS90eXBlc1wiO1xyXG5pbXBvcnQge215Q29udGFpbmVyIGFzIHRzeXJpbmdlQ29udGFpbmVyfSBmcm9tIFwiLi90c3lyaW5nZS90c3lyaW5nZS5jb25maWdcIjtcclxuaW1wb3J0IHtOaW5qYX0gZnJvbSBcIi4vdHN5cmluZ2UvZW50aXRpZXNcIjtcclxuXHJcblxyXG5jbGFzcyBLYXRhbmFOYXRpdmUgaW1wbGVtZW50cyBXZWFwb24ge1xyXG4gICAgcHVibGljIGhpdCgpIHtcclxuICAgICAgICByZXR1cm4gXCJjdXQhXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFNodXJpa2VuTmF0aXZlIGltcGxlbWVudHMgVGhyb3dhYmxlV2VhcG9uIHtcclxuICAgIHB1YmxpYyB0aHJvdygpIHtcclxuICAgICAgICByZXR1cm4gXCJoaXQhXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE5pbmphTmF0aXZlIGltcGxlbWVudHMgV2FycmlvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIF9rYXRhbmE6IFdlYXBvbixcclxuICAgICAgICBwcml2YXRlIF9zaHVyaWtlbjogVGhyb3dhYmxlV2VhcG9uLFxyXG4gICAgKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fa2F0YW5hLmhpdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzbmVhaygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2h1cmlrZW4udGhyb3coKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNvbnN0IEJlbmNobWFyayA9IHJlcXVpcmUoJ2JlbmNobWFyaycpO1xyXG5jb25zdCBzdWl0ZSA9IG5ldyBCZW5jaG1hcmsuU3VpdGU7XHJcbnN1aXRlXHJcbiAgICAuYWRkKCdpbnZlcnNpZnknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaW52ZXJzaWZ5Q29udGFpbmVyLmdldDxXYXJyaW9yPihUWVBFUy5XYXJyaW9yKTtcclxuICAgIH0pXHJcbiAgICAuYWRkKCd0c3lyaW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0c3lyaW5nZUNvbnRhaW5lci5yZXNvbHZlPFdhcnJpb3I+KE5pbmphKTtcclxuICAgIH0pXHJcbiAgICAuYWRkKCduYXRpdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbmV3IE5pbmphTmF0aXZlKG5ldyBLYXRhbmFOYXRpdmUoKSwgbmV3IFNodXJpa2VuTmF0aXZlKCkpO1xyXG4gICAgfSlcclxuICAgIC8vIGFkZCBsaXN0ZW5lcnNcclxuICAgIC5vbignY3ljbGUnLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFN0cmluZyhldmVudC50YXJnZXQpKTtcclxuICAgIH0pXHJcbiAgICAub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24gKHRoaXM6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGYXN0ZXN0IGlzICcgKyB0aGlzLmZpbHRlcignZmFzdGVzdCcpLm1hcCgnbmFtZScpKTtcclxuICAgIH0pXHJcbiAgICAvLyBydW4gYXN5bmNcclxuICAgIC5ydW4oeydhc3luYyc6IGZhbHNlfSk7XHJcblxyXG4vKipcclxuICogaW52ZXJzaWZ5ICAgIHggMTYzLDA1MyBvcHMvc2VjIMKxMy40NiUgKDkwIHJ1bnMgc2FtcGxlZClcclxuICogdHN5cmluZ2UgICAgIHggMywwMzQsMjk0IG9wcy9zZWMgwrExLjcxJSAoOTAgcnVucyBzYW1wbGVkKVxyXG4gKiBuYXRpdmUgICAgICAgeCA2OTIsNDU0LDk1OCBvcHMvc2VjIMKxMS4xMCUgKDkxIHJ1bnMgc2FtcGxlZClcclxuICogRmFzdGVzdCBpcyBuYXRpdmVcclxuICpcclxuICogdHN5cmluZ2Ug5a655Zmo5pu06L276YeP5YyWXHJcbiAqIOi/mOacieS4gOS4qiDlupPlj6vlgZogYXdpbGl4IOiZveeEtuWKn+iDveWFqCDkvYbmmK/msqHmnIkg5L+u6aWw5ZmoXHJcbiAqICovXHJcblxyXG4iXX0=