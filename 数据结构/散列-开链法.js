"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 散列表的呈现是一个二维数组
 * 发生碰撞的内容依次推入对应的数组中
 *
 * 如果数组的大小是待存储数据个数的 1.5 倍，那么使用开链法；
 * 如果数组的大小是待存储数据的两倍及两倍以上时，那么使用线性探测法
 * */
class HashTable {
    constructor() {
        this.table = new Array(137);
    }
    // 储存一个数据
    put(data) {
        const pos = this.betterHash(data);
        if (this.table[pos]) {
            this.table[pos].push(data);
        }
        else {
            this.table[pos] = [data];
        }
    }
    // 储存多个数据
    putArr(arr) {
        arr.forEach((v) => {
            // 箭头函数绑定了作用域
            this.put(v);
        });
    }
    // 打印所有数据
    showDistro() {
        for (let i = 0; i < this.table.length; ++i) {
            if (this.table[i] != undefined) {
                this.table[i].forEach((value) => {
                    console.log(i + " : " + value);
                });
            }
        }
    }
    // 霍纳算法 更好的解决碰撞
    betterHash(string) {
        const H = 31;
        let total = 0;
        for (let i = 0; i < string.length; ++i) {
            total += H * total + string.charCodeAt(i);
        }
        total = total % this.table.length;
        if (total < 0) {
            total += this.table.length - 1;
        }
        return Math.floor(total);
    }
    get(key) {
        const pos = this.betterHash(key);
        if (!this.table[pos]) {
            return false;
        }
        else if (this.table[pos].length === 1) {
            return this.table[pos];
        }
        else {
            return this.table[pos].filter((v) => v === key) || false;
        }
    }
}
const T = new HashTable();
T.putArr([
    "David",
    "Jennifer",
    "Donnie",
    "Donnie",
    "Raymond",
    "Cynthia",
    "Mike",
    "Clayton",
    "Danny",
    "Jonathan",
]);
T.showDistro();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi5pWj5YiXLeW8gOmTvuazlS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsi5pWw5o2u57uT5p6EL+aVo+WIly3lvIDpk77ms5UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0tBTUs7QUFDTCxNQUFNLFNBQVM7SUFBZjtRQUNFLFVBQUssR0FBZSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQXVEckMsQ0FBQztJQXJEQyxTQUFTO0lBQ1QsR0FBRyxDQUFDLElBQVk7UUFDZCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELFNBQVM7SUFDVCxNQUFNLENBQUMsR0FBYTtRQUNsQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDaEIsYUFBYTtZQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTO0lBQ1QsVUFBVTtRQUNSLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtZQUMxQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxFQUFFO2dCQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUM7SUFFRCxlQUFlO0lBQ2YsVUFBVSxDQUFDLE1BQWM7UUFDdkIsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUNELEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUNoQztRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUM7U0FDMUQ7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO0FBQzFCLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0NBQ1gsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDmlaPliJfooajnmoTlkYjnjrDmmK/kuIDkuKrkuoznu7TmlbDnu4RcbiAqIOWPkeeUn+eisOaSnueahOWGheWuueS+neasoeaOqOWFpeWvueW6lOeahOaVsOe7hOS4rVxuICpcbiAqIOWmguaenOaVsOe7hOeahOWkp+Wwj+aYr+W+heWtmOWCqOaVsOaNruS4quaVsOeahCAxLjUg5YCN77yM6YKj5LmI5L2/55So5byA6ZO+5rOV77ybXG4gKiDlpoLmnpzmlbDnu4TnmoTlpKflsI/mmK/lvoXlrZjlgqjmlbDmja7nmoTkuKTlgI3lj4rkuKTlgI3ku6XkuIrml7bvvIzpgqPkuYjkvb/nlKjnur/mgKfmjqLmtYvms5VcbiAqICovXG5jbGFzcyBIYXNoVGFibGUge1xuICB0YWJsZTogc3RyaW5nW11bXSA9IG5ldyBBcnJheSgxMzcpO1xuXG4gIC8vIOWCqOWtmOS4gOS4quaVsOaNrlxuICBwdXQoZGF0YTogc3RyaW5nKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5iZXR0ZXJIYXNoKGRhdGEpO1xuICAgIGlmICh0aGlzLnRhYmxlW3Bvc10pIHtcbiAgICAgIHRoaXMudGFibGVbcG9zXS5wdXNoKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRhYmxlW3Bvc10gPSBbZGF0YV07XG4gICAgfVxuICB9XG5cbiAgLy8g5YKo5a2Y5aSa5Liq5pWw5o2uXG4gIHB1dEFycihhcnI6IHN0cmluZ1tdKSB7XG4gICAgYXJyLmZvckVhY2goKHYpID0+IHtcbiAgICAgIC8vIOeureWktOWHveaVsOe7keWumuS6huS9nOeUqOWfn1xuICAgICAgdGhpcy5wdXQodik7XG4gICAgfSk7XG4gIH1cblxuICAvLyDmiZPljbDmiYDmnInmlbDmja5cbiAgc2hvd0Rpc3RybygpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFibGUubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLnRhYmxlW2ldICE9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnRhYmxlW2ldLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coaSArIFwiIDogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIOmcjee6s+eul+azlSDmm7Tlpb3nmoTop6PlhrPnorDmkp5cbiAgYmV0dGVySGFzaChzdHJpbmc6IHN0cmluZykge1xuICAgIGNvbnN0IEggPSAzMTtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICB0b3RhbCArPSBIICogdG90YWwgKyBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgdG90YWwgPSB0b3RhbCAlIHRoaXMudGFibGUubGVuZ3RoO1xuICAgIGlmICh0b3RhbCA8IDApIHtcbiAgICAgIHRvdGFsICs9IHRoaXMudGFibGUubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodG90YWwpO1xuICB9XG5cbiAgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5iZXR0ZXJIYXNoKGtleSk7XG4gICAgaWYgKCF0aGlzLnRhYmxlW3Bvc10pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudGFibGVbcG9zXS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLnRhYmxlW3Bvc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnRhYmxlW3Bvc10uZmlsdGVyKCh2KSA9PiB2ID09PSBrZXkpIHx8IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBUID0gbmV3IEhhc2hUYWJsZSgpO1xuVC5wdXRBcnIoW1xuICBcIkRhdmlkXCIsXG4gIFwiSmVubmlmZXJcIixcbiAgXCJEb25uaWVcIixcbiAgXCJEb25uaWVcIixcbiAgXCJSYXltb25kXCIsXG4gIFwiQ3ludGhpYVwiLFxuICBcIk1pa2VcIixcbiAgXCJDbGF5dG9uXCIsXG4gIFwiRGFubnlcIixcbiAgXCJKb25hdGhhblwiLFxuXSk7XG5ULnNob3dEaXN0cm8oKTtcblxuZXhwb3J0IHt9O1xuIl19