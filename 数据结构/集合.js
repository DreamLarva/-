"use strict";
/**
 * 集合（set）是一种包含不同元素的数据结构。集合中的元素称为成员。
 * 集合的两个最重要特性是：首先，集合中的成员是无序的；
 * 其次，集合中不允许相同成员存在。
 * 集合在计算机科学中扮演了非常重要的角色，然而在很多编程语言中，并不把集合当成一种数据类型。
 * 当你想要创建一个数据结构，用来保存一些独一无二的元素时，比如一段文本中用到的单词，集合就变得非常有用。*/
/**
 * 建立集合的基础类型是数组*/
Object.defineProperty(exports, "__esModule", { value: true });
class MySet {
    constructor() {
        this.dataStore = [];
    }
    size() {
        return this.dataStore.length;
    }
    ;
    add(data) {
        if (this.dataStore.indexOf(data) === -1) {
            this.dataStore.push(data);
            return true;
        }
        else {
            return false;
        }
    }
    ;
    addArr(arr) {
        arr.forEach(v => this.add(v));
    }
    ;
    show() {
        return this.dataStore;
    }
    ;
    contains(data) {
        return this.dataStore.indexOf(data) !== -1;
    }
    ;
    // 求两者的并集
    union(set) {
        const tempSet = new MySet();
        this.dataStore.forEach(v => tempSet.add(v));
        for (let i = 0; i < set.dataStore.length; ++i) {
            if (!tempSet.contains(set.dataStore[i])) {
                tempSet.dataStore.push(set.dataStore[i]);
            }
        }
        return tempSet;
    }
    ;
    // 求两者的交集
    intersect(set) {
        const tempSet = new Set();
        this.dataStore.forEach(v => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    ;
    // 判断当前集合是不是传入集合的子集
    subset(set) {
        if (this.size() > set.size()) {
            return false;
        }
        else {
            return this.dataStore.every(v => set.contains(v));
        }
    }
    ;
    // 求两个集合的差集(当前集合有,但是传入的集合没有)
    difference(set) {
        const tempSet = new MySet();
        this.dataStore.forEach(v => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    ;
}
const S1 = new MySet();
S1.addArr([1, 2, 3, 4, 5, 6, 6]);
const S2 = new MySet();
S2.addArr([1, 4, 5, 6, 7, 8, 9, 10]);
const S3 = new MySet();
S3.addArr([4, 5, 6]);
console.log("union", S1.union(S2));
console.log("intersect", S1.intersect(S2));
console.log("is subset", S3.subset(S2));
console.log("difference", S1.difference(S2));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi6ZuG5ZCILmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv6ZuG5ZCILnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7d0RBS3dEO0FBQ3hEO2lCQUNpQjs7QUFHakIsTUFBTSxLQUFLO0lBQVg7UUFDSSxjQUFTLEdBQVEsRUFBRSxDQUFDO0lBa0V4QixDQUFDO0lBaEVHLElBQUk7UUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFBQSxDQUFDO0lBRUYsR0FBRyxDQUFDLElBQU87UUFDUCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUFBLENBQUM7SUFFRixNQUFNLENBQUMsR0FBUTtRQUNYLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUFBLENBQUM7SUFFRixJQUFJO1FBQ0EsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFBQSxDQUFDO0lBRUYsUUFBUSxDQUFDLElBQU87UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQSxDQUFDO0lBRUYsU0FBUztJQUNULEtBQUssQ0FBQyxHQUFhO1FBQ2YsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENB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QU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDpm4blkIjvvIhzZXTvvInmmK/kuIDnp43ljIXlkKvkuI3lkIzlhYPntKDnmoTmlbDmja7nu5PmnoTjgILpm4blkIjkuK3nmoTlhYPntKDnp7DkuLrmiJDlkZjjgIJcclxuICog6ZuG5ZCI55qE5Lik5Liq5pyA6YeN6KaB54m55oCn5piv77ya6aaW5YWI77yM6ZuG5ZCI5Lit55qE5oiQ5ZGY5piv5peg5bqP55qE77ybXHJcbiAqIOWFtuasoe+8jOmbhuWQiOS4reS4jeWFgeiuuOebuOWQjOaIkOWRmOWtmOWcqOOAglxyXG4gKiDpm4blkIjlnKjorqHnrpfmnLrnp5HlrabkuK3mia7mvJTkuobpnZ7luLjph43opoHnmoTop5LoibLvvIznhLbogIzlnKjlvojlpJrnvJbnqIvor63oqIDkuK3vvIzlubbkuI3miorpm4blkIjlvZPmiJDkuIDnp43mlbDmja7nsbvlnovjgIJcclxuICog5b2T5L2g5oOz6KaB5Yib5bu65LiA5Liq5pWw5o2u57uT5p6E77yM55So5p2l5L+d5a2Y5LiA5Lqb54us5LiA5peg5LqM55qE5YWD57Sg5pe277yM5q+U5aaC5LiA5q615paH5pys5Lit55So5Yiw55qE5Y2V6K+N77yM6ZuG5ZCI5bCx5Y+Y5b6X6Z2e5bi45pyJ55So44CCKi9cclxuLyoqXHJcbiAqIOW7uueri+mbhuWQiOeahOWfuuehgOexu+Wei+aYr+aVsOe7hCovXHJcblxyXG5cclxuY2xhc3MgTXlTZXQ8VD4ge1xyXG4gICAgZGF0YVN0b3JlOiBUW10gPSBbXTtcclxuXHJcbiAgICBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZS5sZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZChkYXRhOiBUKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmluZGV4T2YoZGF0YSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVN0b3JlLnB1c2goZGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEFycihhcnI6IFRbXSkge1xyXG4gICAgICAgIGFyci5mb3JFYWNoKHYgPT4gdGhpcy5hZGQodikpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZTtcclxuICAgIH07XHJcblxyXG4gICAgY29udGFpbnMoZGF0YTogVCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZS5pbmRleE9mKGRhdGEpICE9PSAtMTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g5rGC5Lik6ICF55qE5bm26ZuGXHJcbiAgICB1bmlvbihzZXQ6IE15U2V0PFQ+KSB7XHJcbiAgICAgICAgY29uc3QgdGVtcFNldCA9IG5ldyBNeVNldCgpO1xyXG4gICAgICAgIHRoaXMuZGF0YVN0b3JlLmZvckVhY2godiA9PiB0ZW1wU2V0LmFkZCh2KSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQuZGF0YVN0b3JlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGVtcFNldC5jb250YWlucyhzZXQuZGF0YVN0b3JlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgdGVtcFNldC5kYXRhU3RvcmUucHVzaChzZXQuZGF0YVN0b3JlW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGVtcFNldDtcclxuICAgIH07XHJcblxyXG4gICAgLy8g5rGC5Lik6ICF55qE5Lqk6ZuGXHJcbiAgICBpbnRlcnNlY3Qoc2V0OiBNeVNldDxUPikge1xyXG4gICAgICAgIGNvbnN0IHRlbXBTZXQgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCh2ID0+IHtcclxuICAgICAgICAgICAgIXNldC5jb250YWlucyh2KSAmJiB0ZW1wU2V0LmFkZCh2KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBTZXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIOWIpOaWreW9k+WJjembhuWQiOaYr+S4jeaYr+S8oOWFpembhuWQiOeahOWtkOmbhlxyXG4gICAgc3Vic2V0KHNldDogTXlTZXQ8VD4pIHtcclxuICAgICAgICBpZiAodGhpcy5zaXplKCkgPiBzZXQuc2l6ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmUuZXZlcnkodiA9PiBzZXQuY29udGFpbnModikpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8g5rGC5Lik5Liq6ZuG5ZCI55qE5beu6ZuGKOW9k+WJjembhuWQiOaciSzkvYbmmK/kvKDlhaXnmoTpm4blkIjmsqHmnIkpXHJcbiAgICBkaWZmZXJlbmNlKHNldDogTXlTZXQ8VD4pIHtcclxuICAgICAgICBjb25zdCB0ZW1wU2V0ID0gbmV3IE15U2V0KCk7XHJcbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCh2ID0+IHtcclxuICAgICAgICAgICAgIXNldC5jb250YWlucyh2KSAmJiB0ZW1wU2V0LmFkZCh2KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGVtcFNldDtcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG5jb25zdCBTMSA9IG5ldyBNeVNldCgpO1xyXG5TMS5hZGRBcnIoWzEsIDIsIDMsIDQsIDUsIDYsIDZdKTtcclxuY29uc3QgUzIgPSBuZXcgTXlTZXQoKTtcclxuUzIuYWRkQXJyKFsxLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0pO1xyXG5jb25zdCBTMyA9IG5ldyBNeVNldCgpO1xyXG5TMy5hZGRBcnIoWzQsIDUsIDZdKTtcclxuXHJcblxyXG5jb25zb2xlLmxvZyhcInVuaW9uXCIsIFMxLnVuaW9uKFMyKSk7XHJcbmNvbnNvbGUubG9nKFwiaW50ZXJzZWN0XCIsIFMxLmludGVyc2VjdChTMikpO1xyXG5jb25zb2xlLmxvZyhcImlzIHN1YnNldFwiLCBTMy5zdWJzZXQoUzIpKTtcclxuY29uc29sZS5sb2coXCJkaWZmZXJlbmNlXCIsIFMxLmRpZmZlcmVuY2UoUzIpKTtcclxuXHJcbmV4cG9ydCB7fTtcclxuIl19