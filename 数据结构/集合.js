"use strict";
/**
 * 集合（set）是一种包含不同元素的数据结构。集合中的元素称为成员。
 * 集合的两个最重要特性是：首先，集合中的成员是无序的；
 * 其次，集合中不允许相同成员存在。
 * 集合在计算机科学中扮演了非常重要的角色，然而在很多编程语言中，并不把集合当成一种数据类型。
 * 当你想要创建一个数据结构，用来保存一些独一无二的元素时，比如一段文本中用到的单词，集合就变得非常有用。*/
/**
 * 建立集合的基础类型是数组*/
Object.defineProperty(exports, "__esModule", { value: true });
class MySet {
    constructor() {
        this.dataStore = [];
    }
    size() {
        return this.dataStore.length;
    }
    add(data) {
        if (this.dataStore.indexOf(data) === -1) {
            this.dataStore.push(data);
            return true;
        }
        else {
            return false;
        }
    }
    addArr(arr) {
        arr.forEach((v) => this.add(v));
    }
    show() {
        return this.dataStore;
    }
    contains(data) {
        return this.dataStore.indexOf(data) !== -1;
    }
    // 求两者的并集
    union(set) {
        const tempSet = new MySet();
        this.dataStore.forEach((v) => tempSet.add(v));
        for (let i = 0; i < set.dataStore.length; ++i) {
            if (!tempSet.contains(set.dataStore[i])) {
                tempSet.dataStore.push(set.dataStore[i]);
            }
        }
        return tempSet;
    }
    // 求两者的交集
    intersect(set) {
        const tempSet = new Set();
        this.dataStore.forEach((v) => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    // 判断当前集合是不是传入集合的子集
    subset(set) {
        if (this.size() > set.size()) {
            return false;
        }
        else {
            return this.dataStore.every((v) => set.contains(v));
        }
    }
    // 求两个集合的差集(当前集合有,但是传入的集合没有)
    difference(set) {
        const tempSet = new MySet();
        this.dataStore.forEach((v) => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
}
const S1 = new MySet();
S1.addArr([1, 2, 3, 4, 5, 6, 6]);
const S2 = new MySet();
S2.addArr([1, 4, 5, 6, 7, 8, 9, 10]);
const S3 = new MySet();
S3.addArr([4, 5, 6]);
console.log("union", S1.union(S2));
console.log("intersect", S1.intersect(S2));
console.log("is subset", S3.subset(S2));
console.log("difference", S1.difference(S2));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi6ZuG5ZCILmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv6ZuG5ZCILnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7d0RBS3dEO0FBQ3hEO2lCQUNpQjs7QUFFakIsTUFBTSxLQUFLO0lBQVg7UUFDRSxjQUFTLEdBQVEsRUFBRSxDQUFDO0lBa0V0QixDQUFDO0lBaEVDLElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBTztRQUNULElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsR0FBUTtRQUNiLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQU87UUFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxTQUFTO0lBQ1QsS0FBSyxDQUFDLEdBQWE7UUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENB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QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog6ZuG5ZCI77yIc2V077yJ5piv5LiA56eN5YyF5ZCr5LiN5ZCM5YWD57Sg55qE5pWw5o2u57uT5p6E44CC6ZuG5ZCI5Lit55qE5YWD57Sg56ew5Li65oiQ5ZGY44CCXG4gKiDpm4blkIjnmoTkuKTkuKrmnIDph43opoHnibnmgKfmmK/vvJrpppblhYjvvIzpm4blkIjkuK3nmoTmiJDlkZjmmK/ml6Dluo/nmoTvvJtcbiAqIOWFtuasoe+8jOmbhuWQiOS4reS4jeWFgeiuuOebuOWQjOaIkOWRmOWtmOWcqOOAglxuICog6ZuG5ZCI5Zyo6K6h566X5py656eR5a2m5Lit5omu5ryU5LqG6Z2e5bi46YeN6KaB55qE6KeS6Imy77yM54S26ICM5Zyo5b6I5aSa57yW56iL6K+t6KiA5Lit77yM5bm25LiN5oqK6ZuG5ZCI5b2T5oiQ5LiA56eN5pWw5o2u57G75Z6L44CCXG4gKiDlvZPkvaDmg7PopoHliJvlu7rkuIDkuKrmlbDmja7nu5PmnoTvvIznlKjmnaXkv53lrZjkuIDkupvni6zkuIDml6DkuoznmoTlhYPntKDml7bvvIzmr5TlpoLkuIDmrrXmlofmnKzkuK3nlKjliLDnmoTljZXor43vvIzpm4blkIjlsLHlj5jlvpfpnZ7luLjmnInnlKjjgIIqL1xuLyoqXG4gKiDlu7rnq4vpm4blkIjnmoTln7rnoYDnsbvlnovmmK/mlbDnu4QqL1xuXG5jbGFzcyBNeVNldDxUPiB7XG4gIGRhdGFTdG9yZTogVFtdID0gW107XG5cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmUubGVuZ3RoO1xuICB9XG5cbiAgYWRkKGRhdGE6IFQpIHtcbiAgICBpZiAodGhpcy5kYXRhU3RvcmUuaW5kZXhPZihkYXRhKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuZGF0YVN0b3JlLnB1c2goZGF0YSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFkZEFycihhcnI6IFRbXSkge1xuICAgIGFyci5mb3JFYWNoKCh2KSA9PiB0aGlzLmFkZCh2KSk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZTtcbiAgfVxuXG4gIGNvbnRhaW5zKGRhdGE6IFQpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmUuaW5kZXhPZihkYXRhKSAhPT0gLTE7XG4gIH1cblxuICAvLyDmsYLkuKTogIXnmoTlubbpm4ZcbiAgdW5pb24oc2V0OiBNeVNldDxUPikge1xuICAgIGNvbnN0IHRlbXBTZXQgPSBuZXcgTXlTZXQoKTtcbiAgICB0aGlzLmRhdGFTdG9yZS5mb3JFYWNoKCh2KSA9PiB0ZW1wU2V0LmFkZCh2KSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQuZGF0YVN0b3JlLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoIXRlbXBTZXQuY29udGFpbnMoc2V0LmRhdGFTdG9yZVtpXSkpIHtcbiAgICAgICAgdGVtcFNldC5kYXRhU3RvcmUucHVzaChzZXQuZGF0YVN0b3JlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlbXBTZXQ7XG4gIH1cblxuICAvLyDmsYLkuKTogIXnmoTkuqTpm4ZcbiAgaW50ZXJzZWN0KHNldDogTXlTZXQ8VD4pIHtcbiAgICBjb25zdCB0ZW1wU2V0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMuZGF0YVN0b3JlLmZvckVhY2goKHYpID0+IHtcbiAgICAgICFzZXQuY29udGFpbnModikgJiYgdGVtcFNldC5hZGQodik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGVtcFNldDtcbiAgfVxuXG4gIC8vIOWIpOaWreW9k+WJjembhuWQiOaYr+S4jeaYr+S8oOWFpembhuWQiOeahOWtkOmbhlxuICBzdWJzZXQoc2V0OiBNeVNldDxUPikge1xuICAgIGlmICh0aGlzLnNpemUoKSA+IHNldC5zaXplKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVN0b3JlLmV2ZXJ5KCh2KSA9PiBzZXQuY29udGFpbnModikpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOaxguS4pOS4qumbhuWQiOeahOW3rumbhijlvZPliY3pm4blkIjmnIks5L2G5piv5Lyg5YWl55qE6ZuG5ZCI5rKh5pyJKVxuICBkaWZmZXJlbmNlKHNldDogTXlTZXQ8VD4pIHtcbiAgICBjb25zdCB0ZW1wU2V0ID0gbmV3IE15U2V0KCk7XG4gICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgIXNldC5jb250YWlucyh2KSAmJiB0ZW1wU2V0LmFkZCh2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGVtcFNldDtcbiAgfVxufVxuXG5jb25zdCBTMSA9IG5ldyBNeVNldCgpO1xuUzEuYWRkQXJyKFsxLCAyLCAzLCA0LCA1LCA2LCA2XSk7XG5jb25zdCBTMiA9IG5ldyBNeVNldCgpO1xuUzIuYWRkQXJyKFsxLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0pO1xuY29uc3QgUzMgPSBuZXcgTXlTZXQoKTtcblMzLmFkZEFycihbNCwgNSwgNl0pO1xuXG5jb25zb2xlLmxvZyhcInVuaW9uXCIsIFMxLnVuaW9uKFMyKSk7XG5jb25zb2xlLmxvZyhcImludGVyc2VjdFwiLCBTMS5pbnRlcnNlY3QoUzIpKTtcbmNvbnNvbGUubG9nKFwiaXMgc3Vic2V0XCIsIFMzLnN1YnNldChTMikpO1xuY29uc29sZS5sb2coXCJkaWZmZXJlbmNlXCIsIFMxLmRpZmZlcmVuY2UoUzIpKTtcblxuZXhwb3J0IHt9O1xuIl19