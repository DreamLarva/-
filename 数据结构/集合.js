"use strict";
/**
 * 集合（set）是一种包含不同元素的数据结构。集合中的元素称为成员。
 * 集合的两个最重要特性是：首先，集合中的成员是无序的；
 * 其次，集合中不允许相同成员存在。
 * 集合在计算机科学中扮演了非常重要的角色，然而在很多编程语言中，并不把集合当成一种数据类型。
 * 当你想要创建一个数据结构，用来保存一些独一无二的元素时，比如一段文本中用到的单词，集合就变得非常有用。*/
/**
 * 建立集合的基础类型是数组*/
Object.defineProperty(exports, "__esModule", { value: true });
class MySet {
    dataStore = [];
    size() {
        return this.dataStore.length;
    }
    add(data) {
        if (this.dataStore.indexOf(data) === -1) {
            this.dataStore.push(data);
            return true;
        }
        else {
            return false;
        }
    }
    addArr(arr) {
        arr.forEach((v) => this.add(v));
    }
    show() {
        return this.dataStore;
    }
    contains(data) {
        return this.dataStore.indexOf(data) !== -1;
    }
    // 求两者的并集
    union(set) {
        const tempSet = new MySet();
        this.dataStore.forEach((v) => tempSet.add(v));
        for (let i = 0; i < set.dataStore.length; ++i) {
            if (!tempSet.contains(set.dataStore[i])) {
                tempSet.dataStore.push(set.dataStore[i]);
            }
        }
        return tempSet;
    }
    // 求两者的交集
    intersect(set) {
        const tempSet = new Set();
        this.dataStore.forEach((v) => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    // 判断当前集合是不是传入集合的子集
    subset(set) {
        if (this.size() > set.size()) {
            return false;
        }
        else {
            return this.dataStore.every((v) => set.contains(v));
        }
    }
    // 求两个集合的差集(当前集合有,但是传入的集合没有)
    difference(set) {
        const tempSet = new MySet();
        this.dataStore.forEach((v) => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
}
const S1 = new MySet();
S1.addArr([1, 2, 3, 4, 5, 6, 6]);
const S2 = new MySet();
S2.addArr([1, 4, 5, 6, 7, 8, 9, 10]);
const S3 = new MySet();
S3.addArr([4, 5, 6]);
console.log("union", S1.union(S2));
console.log("intersect", S1.intersect(S2));
console.log("is subset", S3.subset(S2));
console.log("difference", S1.difference(S2));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi6ZuG5ZCILmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv6ZuG5ZCILnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7d0RBS3dEO0FBQ3hEO2lCQUNpQjs7QUFFakIsTUFBTSxLQUFLO0lBQ1QsU0FBUyxHQUFRLEVBQUUsQ0FBQztJQUVwQixJQUFJO1FBQ0YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUMvQixDQUFDO0lBRUQsR0FBRyxDQUFDLElBQU87UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVE7UUFDYixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsU0FBUztJQUNULEtBQUssQ0FBQyxHQUFhO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5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dCI6WyIvKipcbiAqIOmbhuWQiO+8iHNldO+8ieaYr+S4gOenjeWMheWQq+S4jeWQjOWFg+e0oOeahOaVsOaNrue7k+aehOOAgumbhuWQiOS4reeahOWFg+e0oOensOS4uuaIkOWRmOOAglxuICog6ZuG5ZCI55qE5Lik5Liq5pyA6YeN6KaB54m55oCn5piv77ya6aaW5YWI77yM6ZuG5ZCI5Lit55qE5oiQ5ZGY5piv5peg5bqP55qE77ybXG4gKiDlhbbmrKHvvIzpm4blkIjkuK3kuI3lhYHorrjnm7jlkIzmiJDlkZjlrZjlnKjjgIJcbiAqIOmbhuWQiOWcqOiuoeeul+acuuenkeWtpuS4reaJrua8lOS6humdnuW4uOmHjeimgeeahOinkuiJsu+8jOeEtuiAjOWcqOW+iOWkmue8lueoi+ivreiogOS4re+8jOW5tuS4jeaKiumbhuWQiOW9k+aIkOS4gOenjeaVsOaNruexu+Wei+OAglxuICog5b2T5L2g5oOz6KaB5Yib5bu65LiA5Liq5pWw5o2u57uT5p6E77yM55So5p2l5L+d5a2Y5LiA5Lqb54us5LiA5peg5LqM55qE5YWD57Sg5pe277yM5q+U5aaC5LiA5q615paH5pys5Lit55So5Yiw55qE5Y2V6K+N77yM6ZuG5ZCI5bCx5Y+Y5b6X6Z2e5bi45pyJ55So44CCKi9cbi8qKlxuICog5bu656uL6ZuG5ZCI55qE5Z+656GA57G75Z6L5piv5pWw57uEKi9cblxuY2xhc3MgTXlTZXQ8VD4ge1xuICBkYXRhU3RvcmU6IFRbXSA9IFtdO1xuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVN0b3JlLmxlbmd0aDtcbiAgfVxuXG4gIGFkZChkYXRhOiBUKSB7XG4gICAgaWYgKHRoaXMuZGF0YVN0b3JlLmluZGV4T2YoZGF0YSkgPT09IC0xKSB7XG4gICAgICB0aGlzLmRhdGFTdG9yZS5wdXNoKGRhdGEpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhZGRBcnIoYXJyOiBUW10pIHtcbiAgICBhcnIuZm9yRWFjaCgodikgPT4gdGhpcy5hZGQodikpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmU7XG4gIH1cblxuICBjb250YWlucyhkYXRhOiBUKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVN0b3JlLmluZGV4T2YoZGF0YSkgIT09IC0xO1xuICB9XG5cbiAgLy8g5rGC5Lik6ICF55qE5bm26ZuGXG4gIHVuaW9uKHNldDogTXlTZXQ8VD4pIHtcbiAgICBjb25zdCB0ZW1wU2V0ID0gbmV3IE15U2V0KCk7XG4gICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCgodikgPT4gdGVtcFNldC5hZGQodikpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0LmRhdGFTdG9yZS5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKCF0ZW1wU2V0LmNvbnRhaW5zKHNldC5kYXRhU3RvcmVbaV0pKSB7XG4gICAgICAgIHRlbXBTZXQuZGF0YVN0b3JlLnB1c2goc2V0LmRhdGFTdG9yZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZW1wU2V0O1xuICB9XG5cbiAgLy8g5rGC5Lik6ICF55qE5Lqk6ZuGXG4gIGludGVyc2VjdChzZXQ6IE15U2V0PFQ+KSB7XG4gICAgY29uc3QgdGVtcFNldCA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRhdGFTdG9yZS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAhc2V0LmNvbnRhaW5zKHYpICYmIHRlbXBTZXQuYWRkKHYpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRlbXBTZXQ7XG4gIH1cblxuICAvLyDliKTmlq3lvZPliY3pm4blkIjmmK/kuI3mmK/kvKDlhaXpm4blkIjnmoTlrZDpm4ZcbiAgc3Vic2V0KHNldDogTXlTZXQ8VD4pIHtcbiAgICBpZiAodGhpcy5zaXplKCkgPiBzZXQuc2l6ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZS5ldmVyeSgodikgPT4gc2V0LmNvbnRhaW5zKHYpKTtcbiAgICB9XG4gIH1cblxuICAvLyDmsYLkuKTkuKrpm4blkIjnmoTlt67pm4Yo5b2T5YmN6ZuG5ZCI5pyJLOS9huaYr+S8oOWFpeeahOmbhuWQiOayoeaciSlcbiAgZGlmZmVyZW5jZShzZXQ6IE15U2V0PFQ+KSB7XG4gICAgY29uc3QgdGVtcFNldCA9IG5ldyBNeVNldCgpO1xuICAgIHRoaXMuZGF0YVN0b3JlLmZvckVhY2goKHYpID0+IHtcbiAgICAgICFzZXQuY29udGFpbnModikgJiYgdGVtcFNldC5hZGQodik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRlbXBTZXQ7XG4gIH1cbn1cblxuY29uc3QgUzEgPSBuZXcgTXlTZXQoKTtcblMxLmFkZEFycihbMSwgMiwgMywgNCwgNSwgNiwgNl0pO1xuY29uc3QgUzIgPSBuZXcgTXlTZXQoKTtcblMyLmFkZEFycihbMSwgNCwgNSwgNiwgNywgOCwgOSwgMTBdKTtcbmNvbnN0IFMzID0gbmV3IE15U2V0KCk7XG5TMy5hZGRBcnIoWzQsIDUsIDZdKTtcblxuY29uc29sZS5sb2coXCJ1bmlvblwiLCBTMS51bmlvbihTMikpO1xuY29uc29sZS5sb2coXCJpbnRlcnNlY3RcIiwgUzEuaW50ZXJzZWN0KFMyKSk7XG5jb25zb2xlLmxvZyhcImlzIHN1YnNldFwiLCBTMy5zdWJzZXQoUzIpKTtcbmNvbnNvbGUubG9nKFwiZGlmZmVyZW5jZVwiLCBTMS5kaWZmZXJlbmNlKFMyKSk7XG5cbmV4cG9ydCB7fTtcbiJdfQ==