"use strict";
/**
 * 集合（set）是一种包含不同元素的数据结构。集合中的元素称为成员。
 * 集合的两个最重要特性是：首先，集合中的成员是无序的；
 * 其次，集合中不允许相同成员存在。
 * 集合在计算机科学中扮演了非常重要的角色，然而在很多编程语言中，并不把集合当成一种数据类型。
 * 当你想要创建一个数据结构，用来保存一些独一无二的元素时，比如一段文本中用到的单词，集合就变得非常有用。*/
/**
 * 建立集合的基础类型是数组*/
Object.defineProperty(exports, "__esModule", { value: true });
class MySet {
    constructor() {
        this.dataStore = [];
    }
    size() {
        return this.dataStore.length;
    }
    ;
    add(data) {
        if (this.dataStore.indexOf(data) === -1) {
            this.dataStore.push(data);
            return true;
        }
        else {
            return false;
        }
    }
    ;
    addArr(arr) {
        arr.forEach(v => this.add(v));
    }
    ;
    show() {
        return this.dataStore;
    }
    ;
    contains(data) {
        return this.dataStore.indexOf(data) !== -1;
    }
    ;
    // 求两者的并集
    union(set) {
        const tempSet = new MySet();
        this.dataStore.forEach(v => tempSet.add(v));
        for (let i = 0; i < set.dataStore.length; ++i) {
            if (!tempSet.contains(set.dataStore[i])) {
                tempSet.dataStore.push(set.dataStore[i]);
            }
        }
        return tempSet;
    }
    ;
    // 求两者的交集
    intersect(set) {
        const tempSet = new Set();
        this.dataStore.forEach(v => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    ;
    // 判断当前集合是不是传入集合的子集
    subset(set) {
        if (this.size() > set.size()) {
            return false;
        }
        else {
            return this.dataStore.every(v => set.contains(v));
        }
    }
    ;
    // 求两个集合的差集(当前集合有,但是传入的集合没有)
    difference(set) {
        const tempSet = new MySet();
        this.dataStore.forEach(v => {
            !set.contains(v) && tempSet.add(v);
        });
        return tempSet;
    }
    ;
}
const S1 = new MySet();
S1.addArr([1, 2, 3, 4, 5, 6, 6]);
const S2 = new MySet();
S2.addArr([1, 4, 5, 6, 7, 8, 9, 10]);
const S3 = new MySet();
S3.addArr([4, 5, 6]);
console.log("union", S1.union(S2));
console.log("intersect", S1.intersect(S2));
console.log("is subset", S3.subset(S2));
console.log("difference", S1.difference(S2));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi6ZuG5ZCILmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv6ZuG5ZCILnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7d0RBS3dEO0FBQ3hEO2lCQUNpQjs7QUFHakIsTUFBTSxLQUFLO0lBQVg7UUFDSSxjQUFTLEdBQVEsRUFBRSxDQUFDO0lBa0V4QixDQUFDO0lBaEVHLElBQUk7UUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFBQSxDQUFDO0lBRUYsR0FBRyxDQUFDLElBQU87UUFDUCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUFBLENBQUM7SUFFRixNQUFNLENBQUMsR0FBUTtRQUNYLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUFBLENBQUM7SUFFRixJQUFJO1FBQ0EsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFBQSxDQUFDO0lBRUYsUUFBUSxDQUFDLElBQU87UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQSxDQUFDO0lBRUYsU0FBUztJQUNULEtBQUssQ0FBQyxHQUFhO1FBQ2YsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENB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QU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog6ZuG5ZCI77yIc2V077yJ5piv5LiA56eN5YyF5ZCr5LiN5ZCM5YWD57Sg55qE5pWw5o2u57uT5p6E44CC6ZuG5ZCI5Lit55qE5YWD57Sg56ew5Li65oiQ5ZGY44CCXG4gKiDpm4blkIjnmoTkuKTkuKrmnIDph43opoHnibnmgKfmmK/vvJrpppblhYjvvIzpm4blkIjkuK3nmoTmiJDlkZjmmK/ml6Dluo/nmoTvvJtcbiAqIOWFtuasoe+8jOmbhuWQiOS4reS4jeWFgeiuuOebuOWQjOaIkOWRmOWtmOWcqOOAglxuICog6ZuG5ZCI5Zyo6K6h566X5py656eR5a2m5Lit5omu5ryU5LqG6Z2e5bi46YeN6KaB55qE6KeS6Imy77yM54S26ICM5Zyo5b6I5aSa57yW56iL6K+t6KiA5Lit77yM5bm25LiN5oqK6ZuG5ZCI5b2T5oiQ5LiA56eN5pWw5o2u57G75Z6L44CCXG4gKiDlvZPkvaDmg7PopoHliJvlu7rkuIDkuKrmlbDmja7nu5PmnoTvvIznlKjmnaXkv53lrZjkuIDkupvni6zkuIDml6DkuoznmoTlhYPntKDml7bvvIzmr5TlpoLkuIDmrrXmlofmnKzkuK3nlKjliLDnmoTljZXor43vvIzpm4blkIjlsLHlj5jlvpfpnZ7luLjmnInnlKjjgIIqL1xuLyoqXG4gKiDlu7rnq4vpm4blkIjnmoTln7rnoYDnsbvlnovmmK/mlbDnu4QqL1xuXG5cbmNsYXNzIE15U2V0PFQ+IHtcbiAgICBkYXRhU3RvcmU6IFRbXSA9IFtdO1xuXG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN0b3JlLmxlbmd0aDtcbiAgICB9O1xuXG4gICAgYWRkKGRhdGE6IFQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmluZGV4T2YoZGF0YSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYWRkQXJyKGFycjogVFtdKSB7XG4gICAgICAgIGFyci5mb3JFYWNoKHYgPT4gdGhpcy5hZGQodikpO1xuICAgIH07XG5cbiAgICBzaG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmU7XG4gICAgfTtcblxuICAgIGNvbnRhaW5zKGRhdGE6IFQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN0b3JlLmluZGV4T2YoZGF0YSkgIT09IC0xO1xuICAgIH07XG5cbiAgICAvLyDmsYLkuKTogIXnmoTlubbpm4ZcbiAgICB1bmlvbihzZXQ6IE15U2V0PFQ+KSB7XG4gICAgICAgIGNvbnN0IHRlbXBTZXQgPSBuZXcgTXlTZXQoKTtcbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCh2ID0+IHRlbXBTZXQuYWRkKHYpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQuZGF0YVN0b3JlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIXRlbXBTZXQuY29udGFpbnMoc2V0LmRhdGFTdG9yZVtpXSkpIHtcbiAgICAgICAgICAgICAgICB0ZW1wU2V0LmRhdGFTdG9yZS5wdXNoKHNldC5kYXRhU3RvcmVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZW1wU2V0O1xuICAgIH07XG5cbiAgICAvLyDmsYLkuKTogIXnmoTkuqTpm4ZcbiAgICBpbnRlcnNlY3Qoc2V0OiBNeVNldDxUPikge1xuICAgICAgICBjb25zdCB0ZW1wU2V0ID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmRhdGFTdG9yZS5mb3JFYWNoKHYgPT4ge1xuICAgICAgICAgICAgIXNldC5jb250YWlucyh2KSAmJiB0ZW1wU2V0LmFkZCh2KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBTZXQ7XG4gICAgfTtcblxuICAgIC8vIOWIpOaWreW9k+WJjembhuWQiOaYr+S4jeaYr+S8oOWFpembhuWQiOeahOWtkOmbhlxuICAgIHN1YnNldChzZXQ6IE15U2V0PFQ+KSB7XG4gICAgICAgIGlmICh0aGlzLnNpemUoKSA+IHNldC5zaXplKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTdG9yZS5ldmVyeSh2ID0+IHNldC5jb250YWlucyh2KSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8g5rGC5Lik5Liq6ZuG5ZCI55qE5beu6ZuGKOW9k+WJjembhuWQiOaciSzkvYbmmK/kvKDlhaXnmoTpm4blkIjmsqHmnIkpXG4gICAgZGlmZmVyZW5jZShzZXQ6IE15U2V0PFQ+KSB7XG4gICAgICAgIGNvbnN0IHRlbXBTZXQgPSBuZXcgTXlTZXQoKTtcbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICAgICFzZXQuY29udGFpbnModikgJiYgdGVtcFNldC5hZGQodik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGVtcFNldDtcbiAgICB9O1xufVxuXG5cbmNvbnN0IFMxID0gbmV3IE15U2V0KCk7XG5TMS5hZGRBcnIoWzEsIDIsIDMsIDQsIDUsIDYsIDZdKTtcbmNvbnN0IFMyID0gbmV3IE15U2V0KCk7XG5TMi5hZGRBcnIoWzEsIDQsIDUsIDYsIDcsIDgsIDksIDEwXSk7XG5jb25zdCBTMyA9IG5ldyBNeVNldCgpO1xuUzMuYWRkQXJyKFs0LCA1LCA2XSk7XG5cblxuY29uc29sZS5sb2coXCJ1bmlvblwiLCBTMS51bmlvbihTMikpO1xuY29uc29sZS5sb2coXCJpbnRlcnNlY3RcIiwgUzEuaW50ZXJzZWN0KFMyKSk7XG5jb25zb2xlLmxvZyhcImlzIHN1YnNldFwiLCBTMy5zdWJzZXQoUzIpKTtcbmNvbnNvbGUubG9nKFwiZGlmZmVyZW5jZVwiLCBTMS5kaWZmZXJlbmNlKFMyKSk7XG5cbmV4cG9ydCB7fTtcbiJdfQ==