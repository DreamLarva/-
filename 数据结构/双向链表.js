"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 每个节点在增加一个指针指向上一个对象
 * 方便了删除节点的操作 , 并且可以反向遍历整个链表*/
class Node {
    constructor(element = null) {
        this.next = null;
        this.previous = null;
        this.element = element;
    }
}
class LList {
    constructor() {
        this.head = new Node();
    }
    dispReverse() {
        var currNode = this.findLast();
        while (currNode.previous != null) {
            console.log(currNode.element);
            currNode = currNode.previous;
        }
    }
    findLast() {
        var currNode = this.head;
        while (!(currNode.next == null)) {
            currNode = currNode.next;
        }
        return currNode;
    }
    ;
    insert(newElement, item) {
        const newNode = new Node(newElement);
        const current = item === null ? this.head : this.find(item);
        if (current === null) {
            console.log("找不到插入的位置");
            return;
        }
        newNode.next = current.next;
        newNode.previous = current;
        current.next = newNode;
    }
    ;
    remove(item) {
        let currNode = this.find(item);
        // ts 又立功了
        if (currNode === null || currNode.element === null)
            return null;
        if (currNode.next !== null) {
            currNode.previous.next = currNode.next; // 这里已经排除了 是 head 节点了
            currNode.next.previous = currNode.previous;
            currNode.next = null;
            currNode.previous = null;
        }
    }
    ;
    display() {
        let currNode = this.head;
        while (currNode !== null && currNode.next != null) {
            console.log(currNode.next.element);
            currNode = currNode.next;
        }
    }
    ;
    find(item) {
        let currNode = this.head;
        while (currNode !== null && currNode.element != item) {
            currNode = currNode.next;
        }
        return currNode;
    }
    ;
}
var cities = new LList();
cities.insert("Conway", null);
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log("-------------");
cities.remove("Carlisle");
cities.display();
console.log("-------------");
cities.dispReverse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi5Y+M5ZCR6ZO+6KGoLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv5Y+M5ZCR6ZO+6KGoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7OzhCQUU4QjtBQUM5QixNQUFNLElBQUk7SUFLTixZQUFZLFVBQW9CLElBQUk7UUFIcEMsU0FBSSxHQUFtQixJQUFJLENBQUM7UUFDNUIsYUFBUSxHQUFtQixJQUFJLENBQUM7UUFHNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBRUQsTUFBTSxLQUFLO0lBQVg7UUFDSSxTQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUssQ0FBQztJQXlEekIsQ0FBQztJQXZERyxXQUFXO1FBQ1AsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLE9BQU8sUUFBUSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtZQUM3QixRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztTQUM1QjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFBQSxDQUFDO0lBRUYsTUFBTSxDQUFDLFVBQWEsRUFBRSxJQUFjO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUQsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEIsT0FBTztTQUNWO1FBQ0QsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFBQSxDQUFDO0lBRUYsTUFBTSxDQUFDLElBQU87UUFDVixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLFVBQVU7UUFDVixJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDaEUsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUN4QixRQUFRLENBQUMsUUFBUyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCO1lBQzlELFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDM0MsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDckIsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBQUEsQ0FBQztJQUVGLE9BQU87UUFDSCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3pCLE9BQU8sUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7U0FDNUI7SUFDTCxDQUFDO0lBQUEsQ0FBQztJQUVGLElBQUksQ0FBQyxJQUFPO1FBQ1IsSUFBSSxRQUFRLEdBQW1CLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekMsT0FBTyxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ2xELFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUFBLENBQUM7Q0FDTDtBQUdELElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM3QixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5q+P5Liq6IqC54K55Zyo5aKe5Yqg5LiA5Liq5oyH6ZKI5oyH5ZCR5LiK5LiA5Liq5a+56LGhXHJcbiAqIOaWueS+v+S6huWIoOmZpOiKgueCueeahOaTjeS9nCAsIOW5tuS4lOWPr+S7peWPjeWQkemBjeWOhuaVtOS4qumTvuihqCovXHJcbmNsYXNzIE5vZGU8VD4ge1xyXG4gICAgZWxlbWVudDogVCB8IG51bGw7XHJcbiAgICBuZXh0OiBOb2RlPFQ+IHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcmV2aW91czogTm9kZTxUPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IFQgfCBudWxsID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIExMaXN0PFQ+IHtcclxuICAgIGhlYWQgPSBuZXcgTm9kZTxUPigpO1xyXG5cclxuICAgIGRpc3BSZXZlcnNlKCkge1xyXG4gICAgICAgIHZhciBjdXJyTm9kZSA9IHRoaXMuZmluZExhc3QoKTtcclxuICAgICAgICB3aGlsZSAoY3Vyck5vZGUucHJldmlvdXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyTm9kZS5lbGVtZW50KTtcclxuICAgICAgICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5wcmV2aW91cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZmluZExhc3QoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJOb2RlID0gdGhpcy5oZWFkO1xyXG4gICAgICAgIHdoaWxlICghKGN1cnJOb2RlLm5leHQgPT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5uZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3Vyck5vZGU7XHJcbiAgICB9O1xyXG5cclxuICAgIGluc2VydChuZXdFbGVtZW50OiBULCBpdGVtOiBUIHwgbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZShuZXdFbGVtZW50KTtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gaXRlbSA9PT0gbnVsbCA/IHRoaXMuaGVhZCA6IHRoaXMuZmluZChpdGVtKTtcclxuICAgICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuaJvuS4jeWIsOaPkuWFpeeahOS9jee9rlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdOb2RlLm5leHQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgbmV3Tm9kZS5wcmV2aW91cyA9IGN1cnJlbnQ7XHJcbiAgICAgICAgY3VycmVudC5uZXh0ID0gbmV3Tm9kZTtcclxuICAgIH07XHJcblxyXG4gICAgcmVtb3ZlKGl0ZW06IFQpIHtcclxuICAgICAgICBsZXQgY3Vyck5vZGUgPSB0aGlzLmZpbmQoaXRlbSk7XHJcbiAgICAgICAgLy8gdHMg5Y+I56uL5Yqf5LqGXHJcbiAgICAgICAgaWYgKGN1cnJOb2RlID09PSBudWxsIHx8IGN1cnJOb2RlLmVsZW1lbnQgPT09IG51bGwpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmIChjdXJyTm9kZS5uZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGN1cnJOb2RlLnByZXZpb3VzIS5uZXh0ID0gY3Vyck5vZGUubmV4dDsgLy8g6L+Z6YeM5bey57uP5o6S6Zmk5LqGIOaYryBoZWFkIOiKgueCueS6hlxyXG4gICAgICAgICAgICBjdXJyTm9kZS5uZXh0LnByZXZpb3VzID0gY3Vyck5vZGUucHJldmlvdXM7XHJcbiAgICAgICAgICAgIGN1cnJOb2RlLm5leHQgPSBudWxsO1xyXG4gICAgICAgICAgICBjdXJyTm9kZS5wcmV2aW91cyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkaXNwbGF5KCkge1xyXG4gICAgICAgIGxldCBjdXJyTm9kZSA9IHRoaXMuaGVhZDtcclxuICAgICAgICB3aGlsZSAoY3Vyck5vZGUgIT09IG51bGwgJiYgY3Vyck5vZGUubmV4dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJOb2RlLm5leHQuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGN1cnJOb2RlID0gY3Vyck5vZGUubmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZpbmQoaXRlbTogVCkge1xyXG4gICAgICAgIGxldCBjdXJyTm9kZTogbnVsbCB8IE5vZGU8VD4gPSB0aGlzLmhlYWQ7XHJcbiAgICAgICAgd2hpbGUgKGN1cnJOb2RlICE9PSBudWxsICYmIGN1cnJOb2RlLmVsZW1lbnQgIT0gaXRlbSkge1xyXG4gICAgICAgICAgICBjdXJyTm9kZSA9IGN1cnJOb2RlLm5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyTm9kZTtcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG52YXIgY2l0aWVzID0gbmV3IExMaXN0KCk7XHJcbmNpdGllcy5pbnNlcnQoXCJDb253YXlcIiwgbnVsbCk7XHJcbmNpdGllcy5pbnNlcnQoXCJSdXNzZWxsdmlsbGVcIiwgXCJDb253YXlcIik7XHJcbmNpdGllcy5pbnNlcnQoXCJDYXJsaXNsZVwiLCBcIlJ1c3NlbGx2aWxsZVwiKTtcclxuY2l0aWVzLmluc2VydChcIkFsbWFcIiwgXCJDYXJsaXNsZVwiKTtcclxuY2l0aWVzLmRpc3BsYXkoKTtcclxuY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tXCIpO1xyXG5jaXRpZXMucmVtb3ZlKFwiQ2FybGlzbGVcIik7XHJcbmNpdGllcy5kaXNwbGF5KCk7XHJcbmNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLVwiKTtcclxuY2l0aWVzLmRpc3BSZXZlcnNlKCk7XHJcblxyXG5leHBvcnQge307XHJcbiJdfQ==