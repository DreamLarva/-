"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 每个节点在增加一个指针指向上一个对象
 * 方便了删除节点的操作 , 并且可以反向遍历整个链表*/
class Node {
    element;
    next = null;
    previous = null;
    constructor(element = null) {
        this.element = element;
    }
}
class LList {
    head = new Node();
    dispReverse() {
        var currNode = this.findLast();
        while (currNode.previous != null) {
            console.log(currNode.element);
            currNode = currNode.previous;
        }
    }
    findLast() {
        var currNode = this.head;
        while (!(currNode.next == null)) {
            currNode = currNode.next;
        }
        return currNode;
    }
    insert(newElement, item) {
        const newNode = new Node(newElement);
        const current = item === null ? this.head : this.find(item);
        if (current === null) {
            console.log("找不到插入的位置");
            return;
        }
        newNode.next = current.next;
        newNode.previous = current;
        current.next = newNode;
    }
    remove(item) {
        let currNode = this.find(item);
        // ts 又立功了
        if (currNode === null || currNode.element === null)
            return null;
        if (currNode.next !== null) {
            currNode.previous.next = currNode.next; // 这里已经排除了 是 head 节点了
            currNode.next.previous = currNode.previous;
            currNode.next = null;
            currNode.previous = null;
        }
    }
    display() {
        let currNode = this.head;
        while (currNode !== null && currNode.next != null) {
            console.log(currNode.next.element);
            currNode = currNode.next;
        }
    }
    find(item) {
        let currNode = this.head;
        while (currNode !== null && currNode.element != item) {
            currNode = currNode.next;
        }
        return currNode;
    }
}
var cities = new LList();
cities.insert("Conway", null);
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log("-------------");
cities.remove("Carlisle");
cities.display();
console.log("-------------");
cities.dispReverse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi5Y+M5ZCR6ZO+6KGoLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyLmlbDmja7nu5PmnoQv5Y+M5ZCR6ZO+6KGoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7OzhCQUU4QjtBQUM5QixNQUFNLElBQUk7SUFDUixPQUFPLENBQVc7SUFDbEIsSUFBSSxHQUFtQixJQUFJLENBQUM7SUFDNUIsUUFBUSxHQUFtQixJQUFJLENBQUM7SUFFaEMsWUFBWSxVQUFvQixJQUFJO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUVELE1BQU0sS0FBSztJQUNULElBQUksR0FBRyxJQUFJLElBQUksRUFBSyxDQUFDO0lBRXJCLFdBQVc7UUFDVCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsT0FBTyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN6QixPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQy9CLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFhLEVBQUUsSUFBYztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hCLE9BQU87U0FDUjtRQUNELE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUM1QixPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUMzQixPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQU87UUFDWixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLFVBQVU7UUFDVixJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDaEUsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUMxQixRQUFRLENBQUMsUUFBUyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCO1lBQzlELFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDM0MsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDckIsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsT0FBTyxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuQyxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRCxJQUFJLENBQUMsSUFBTztRQUNWLElBQUksUUFBUSxHQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUNwRCxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztTQUMxQjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQUVELElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM3QixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOavj+S4quiKgueCueWcqOWinuWKoOS4gOS4quaMh+mSiOaMh+WQkeS4iuS4gOS4quWvueixoVxuICog5pa55L6/5LqG5Yig6Zmk6IqC54K555qE5pON5L2cICwg5bm25LiU5Y+v5Lul5Y+N5ZCR6YGN5Y6G5pW05Liq6ZO+6KGoKi9cbmNsYXNzIE5vZGU8VD4ge1xuICBlbGVtZW50OiBUIHwgbnVsbDtcbiAgbmV4dDogTm9kZTxUPiB8IG51bGwgPSBudWxsO1xuICBwcmV2aW91czogTm9kZTxUPiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IFQgfCBudWxsID0gbnVsbCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cbn1cblxuY2xhc3MgTExpc3Q8VD4ge1xuICBoZWFkID0gbmV3IE5vZGU8VD4oKTtcblxuICBkaXNwUmV2ZXJzZSgpIHtcbiAgICB2YXIgY3Vyck5vZGUgPSB0aGlzLmZpbmRMYXN0KCk7XG4gICAgd2hpbGUgKGN1cnJOb2RlLnByZXZpb3VzICE9IG51bGwpIHtcbiAgICAgIGNvbnNvbGUubG9nKGN1cnJOb2RlLmVsZW1lbnQpO1xuICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5wcmV2aW91cztcbiAgICB9XG4gIH1cblxuICBmaW5kTGFzdCgpIHtcbiAgICB2YXIgY3Vyck5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgd2hpbGUgKCEoY3Vyck5vZGUubmV4dCA9PSBudWxsKSkge1xuICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gY3Vyck5vZGU7XG4gIH1cblxuICBpbnNlcnQobmV3RWxlbWVudDogVCwgaXRlbTogVCB8IG51bGwpIHtcbiAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUobmV3RWxlbWVudCk7XG4gICAgY29uc3QgY3VycmVudCA9IGl0ZW0gPT09IG51bGwgPyB0aGlzLmhlYWQgOiB0aGlzLmZpbmQoaXRlbSk7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwi5om+5LiN5Yiw5o+S5YWl55qE5L2N572uXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXdOb2RlLm5leHQgPSBjdXJyZW50Lm5leHQ7XG4gICAgbmV3Tm9kZS5wcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgY3VycmVudC5uZXh0ID0gbmV3Tm9kZTtcbiAgfVxuXG4gIHJlbW92ZShpdGVtOiBUKSB7XG4gICAgbGV0IGN1cnJOb2RlID0gdGhpcy5maW5kKGl0ZW0pO1xuICAgIC8vIHRzIOWPiOeri+WKn+S6hlxuICAgIGlmIChjdXJyTm9kZSA9PT0gbnVsbCB8fCBjdXJyTm9kZS5lbGVtZW50ID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoY3Vyck5vZGUubmV4dCAhPT0gbnVsbCkge1xuICAgICAgY3Vyck5vZGUucHJldmlvdXMhLm5leHQgPSBjdXJyTm9kZS5uZXh0OyAvLyDov5nph4zlt7Lnu4/mjpLpmaTkuoYg5pivIGhlYWQg6IqC54K55LqGXG4gICAgICBjdXJyTm9kZS5uZXh0LnByZXZpb3VzID0gY3Vyck5vZGUucHJldmlvdXM7XG4gICAgICBjdXJyTm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgIGN1cnJOb2RlLnByZXZpb3VzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBkaXNwbGF5KCkge1xuICAgIGxldCBjdXJyTm9kZSA9IHRoaXMuaGVhZDtcbiAgICB3aGlsZSAoY3Vyck5vZGUgIT09IG51bGwgJiYgY3Vyck5vZGUubmV4dCAhPSBudWxsKSB7XG4gICAgICBjb25zb2xlLmxvZyhjdXJyTm9kZS5uZXh0LmVsZW1lbnQpO1xuICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5uZXh0O1xuICAgIH1cbiAgfVxuXG4gIGZpbmQoaXRlbTogVCkge1xuICAgIGxldCBjdXJyTm9kZTogbnVsbCB8IE5vZGU8VD4gPSB0aGlzLmhlYWQ7XG4gICAgd2hpbGUgKGN1cnJOb2RlICE9PSBudWxsICYmIGN1cnJOb2RlLmVsZW1lbnQgIT0gaXRlbSkge1xuICAgICAgY3Vyck5vZGUgPSBjdXJyTm9kZS5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gY3Vyck5vZGU7XG4gIH1cbn1cblxudmFyIGNpdGllcyA9IG5ldyBMTGlzdCgpO1xuY2l0aWVzLmluc2VydChcIkNvbndheVwiLCBudWxsKTtcbmNpdGllcy5pbnNlcnQoXCJSdXNzZWxsdmlsbGVcIiwgXCJDb253YXlcIik7XG5jaXRpZXMuaW5zZXJ0KFwiQ2FybGlzbGVcIiwgXCJSdXNzZWxsdmlsbGVcIik7XG5jaXRpZXMuaW5zZXJ0KFwiQWxtYVwiLCBcIkNhcmxpc2xlXCIpO1xuY2l0aWVzLmRpc3BsYXkoKTtcbmNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLVwiKTtcbmNpdGllcy5yZW1vdmUoXCJDYXJsaXNsZVwiKTtcbmNpdGllcy5kaXNwbGF5KCk7XG5jb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS1cIik7XG5jaXRpZXMuZGlzcFJldmVyc2UoKTtcblxuZXhwb3J0IHt9O1xuIl19