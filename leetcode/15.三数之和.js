"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function (nums) {
    // 使用三个指针
    // 当前指正  当前指针后的一个位置 和 数组最后的位置
    nums.sort((a, b) => a - b);
    // 排除极端情况
    // 都小于0
    if (nums[nums.length - 1] < 0) {
        return [];
    }
    // 都 大于 0
    if (nums[0] > 0) {
        return [];
    }
    const result = [];
    for (let i = 1; i < nums.length - 2;) {
        let left = i + 1;
        let right = nums.length - 1;
        if (nums[i] > 0)
            break; // 同样 最左侧的值不能 大于0
        while (nums[right] >= 0 && left < right) { // 最右侧的值 不能 小于0
            const sum = nums[left] + nums[i] + nums[right];
            if (sum === 0) {
                result.push([nums[left], nums[i], nums[right]]);
            }
            if (sum < 0) {
                while (left < right && nums[++left] === nums[left - 1]) {
                }
            }
            else {
                while (left < right && nums[--right] === nums[right + 1]) {
                }
            }
        }
        while (nums[i] === nums[++i]) {
        }
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
const assertHelper_1 = require("../util/assertHelper");
assert_1.default.deepStrictEqual(assertHelper_1.sortDeep(threeSum([-1, 0, 1, 2, -1, -4])), assertHelper_1.sortDeep([[-1, -1, 2], [-1, 0, 1]]));
assert_1.default.deepStrictEqual(assertHelper_1.sortDeep(threeSum([-1, 0, 1, 2, -1, -4, -1, 0, 1, 2, -1, -4, 0])), assertHelper_1.sortDeep([[-4, 2, 2], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUu5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNS7kuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztJQWdCSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsSUFBYztJQUNuQyxTQUFTO0lBQ1QsNkJBQTZCO0lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFM0IsU0FBUztJQUNULE9BQU87SUFDUCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMzQixPQUFPLEVBQUUsQ0FBQztLQUNiO0lBQ0QsU0FBUztJQUNULElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNiLE9BQU8sRUFBRSxDQUFDO0tBQ2I7SUFDRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHO1FBQ2xDLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUFFLE1BQU0sQ0FBQyxpQkFBaUI7UUFDekMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRSxlQUFlO1lBQ3RELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtnQkFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUNULE9BQU8sSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO2lCQUN2RDthQUNKO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO2lCQUN6RDthQUNKO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtTQUM3QjtLQUVKO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBR0Ysb0RBQTRCO0FBQzVCLHVEQUE4QztBQUU5QyxnQkFBTSxDQUFDLGVBQWUsQ0FDbEIsdUJBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekMsdUJBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0QyxDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxlQUFlLENBQ2xCLHVCQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRSx1QkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxu57uZ5a6a5LiA5Liq5YyF5ZCrIG4g5Liq5pW05pWw55qE5pWw57uEwqBudW1z77yM5Yik5patwqBudW1zwqDkuK3mmK/lkKblrZjlnKjkuInkuKrlhYPntKAgYe+8jGLvvIxjIO+8jOS9v+W+l8KgYSArIGIgKyBjID0gMCDvvJ/mib7lh7rmiYDmnInmu6HotrPmnaHku7bkuJTkuI3ph43lpI3nmoTkuInlhYPnu4TjgIJcclxuXHJcbuazqOaEj++8muetlOahiOS4reS4jeWPr+S7peWMheWQq+mHjeWkjeeahOS4ieWFg+e7hOOAglxyXG5cclxu5L6L5aaCLCDnu5nlrprmlbDnu4QgbnVtcyA9IFstMSwgMCwgMSwgMiwgLTEsIC00Xe+8jFxyXG5cclxu5ruh6Laz6KaB5rGC55qE5LiJ5YWD57uE6ZuG5ZCI5Li677yaXHJcbltcclxuICBbLTEsIDAsIDFdLFxyXG4gIFstMSwgLTEsIDJdXHJcbl1cclxuXHJcbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXHJcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zLzNzdW1cclxu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXHJcbiogKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyW119IG51bXNcclxuICogQHJldHVybiB7bnVtYmVyW11bXX1cclxuICovXHJcbnZhciB0aHJlZVN1bSA9IGZ1bmN0aW9uIChudW1zOiBudW1iZXJbXSkge1xyXG4gICAgLy8g5L2/55So5LiJ5Liq5oyH6ZKIXHJcbiAgICAvLyDlvZPliY3mjIfmraMgIOW9k+WJjeaMh+mSiOWQjueahOS4gOS4quS9jee9riDlkowg5pWw57uE5pyA5ZCO55qE5L2N572uXHJcbiAgICBudW1zLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuXHJcbiAgICAvLyDmjpLpmaTmnoHnq6/mg4XlhrVcclxuICAgIC8vIOmDveWwj+S6jjBcclxuICAgIGlmIChudW1zW251bXMubGVuZ3RoIC0gMV0gPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgLy8g6YO9IOWkp+S6jiAwXHJcbiAgICBpZiAobnVtc1swXSA+IDApIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bXMubGVuZ3RoIC0gMjspIHtcclxuICAgICAgICBsZXQgbGVmdCA9IGkgKyAxO1xyXG4gICAgICAgIGxldCByaWdodCA9IG51bXMubGVuZ3RoIC0gMTtcclxuICAgICAgICBpZiAobnVtc1tpXSA+IDApIGJyZWFrOyAvLyDlkIzmoLcg5pyA5bem5L6n55qE5YC85LiN6IO9IOWkp+S6jjBcclxuICAgICAgICB3aGlsZSAobnVtc1tyaWdodF0gPj0gMCAmJiBsZWZ0IDwgcmlnaHQpIHsgLy8g5pyA5Y+z5L6n55qE5YC8IOS4jeiDvSDlsI/kuo4wXHJcbiAgICAgICAgICAgIGNvbnN0IHN1bSA9IG51bXNbbGVmdF0gKyBudW1zW2ldICsgbnVtc1tyaWdodF07XHJcbiAgICAgICAgICAgIGlmIChzdW0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtudW1zW2xlZnRdLCBudW1zW2ldLCBudW1zW3JpZ2h0XV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdW0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobGVmdCA8IHJpZ2h0ICYmIG51bXNbKytsZWZ0XSA9PT0gbnVtc1tsZWZ0IC0gMV0pIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQgJiYgbnVtc1stLXJpZ2h0XSA9PT0gbnVtc1tyaWdodCArIDFdKSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKG51bXNbaV0gPT09IG51bXNbKytpXSkge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7c29ydERlZXB9IGZyb20gXCIuLi91dGlsL2Fzc2VydEhlbHBlclwiO1xyXG5cclxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcclxuICAgIHNvcnREZWVwKHRocmVlU3VtKFstMSwgMCwgMSwgMiwgLTEsIC00XSkpLFxyXG4gICAgc29ydERlZXAoW1stMSwgLTEsIDJdLCBbLTEsIDAsIDFdXSksXHJcbik7XHJcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgICBzb3J0RGVlcCh0aHJlZVN1bShbLTEsIDAsIDEsIDIsIC0xLCAtNCwgLTEsIDAsIDEsIDIsIC0xLCAtNCwgMF0pKSxcclxuICAgIHNvcnREZWVwKFtbLTQsIDIsIDJdLCBbLTEsIC0xLCAyXSwgWy0xLCAwLCAxXSwgWzAsIDAsIDBdXSksXHJcbik7XHJcbiJdfQ==