"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function (nums) {
    // 排序后 使用三个指针
    // 当前指针  当前指针后的一个位置 和 数组最后的位置
    nums.sort((a, b) => a - b);
    // 排除极端情况
    // 都小于0
    if (nums[nums.length - 1] < 0) {
        return [];
    }
    // 都 大于 0
    if (nums[0] > 0) {
        return [];
    }
    const result = [];
    for (let i = 0; i < nums.length - 2;) {
        let left = i + 1;
        let right = nums.length - 1;
        if (nums[i] > 0)
            break; // 同样 最左侧的值不能 大于0
        while (nums[right] >= 0 && left < right) {
            // 最右侧的值 不能 小于0
            const sum = nums[left] + nums[i] + nums[right];
            if (sum === 0) {
                result.push([nums[left], nums[i], nums[right]]);
            }
            if (sum < 0) {
                while (left < right && nums[++left] === nums[left - 1]) { }
            }
            else {
                while (left < right && nums[--right] === nums[right + 1]) { }
            }
        }
        while (nums[i] === nums[++i]) { }
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
const assertHelper_1 = require("../util/assertHelper");
assert_1.default.deepStrictEqual(assertHelper_1.sortDeep(threeSum([-1, 0, 1, 2, -1, -4])), assertHelper_1.sortDeep([
    [-1, -1, 2],
    [-1, 0, 1],
]));
assert_1.default.deepStrictEqual(assertHelper_1.sortDeep(threeSum([-1, 0, 1, 2, -1, -4, -1, 0, 1, 2, -1, -4, 0])), assertHelper_1.sortDeep([
    [-4, 2, 2],
    [-1, -1, 2],
    [-1, 0, 1],
    [0, 0, 0],
]));
assert_1.default.deepStrictEqual(threeSum([0, 0, 0]), [[0, 0, 0]]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUu5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNS7kuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztJQWdCSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsSUFBYztJQUNyQyxhQUFhO0lBQ2IsNkJBQTZCO0lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFM0IsU0FBUztJQUNULE9BQU87SUFDUCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM3QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBQ0QsU0FBUztJQUNULElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNmLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFJO1FBQ3JDLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUFFLE1BQU0sQ0FBQyxpQkFBaUI7UUFDekMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLLEVBQUU7WUFDdkMsZUFBZTtZQUNmLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtnQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLE9BQU8sSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUU7YUFDM0Q7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRTthQUM3RDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRTtLQUNqQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUM1Qix1REFBZ0Q7QUFFaEQsZ0JBQU0sQ0FBQyxlQUFlLENBQ3BCLHVCQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3pDLHVCQUFRLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNYLENBQUMsQ0FDSCxDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxlQUFlLENBQ3BCLHVCQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRSx1QkFBUSxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1YsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDVixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ1YsQ0FBQyxDQUNILENBQUM7QUFDRixnQkFBTSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7meWumuS4gOS4quWMheWQqyBuIOS4quaVtOaVsOeahOaVsOe7hCBudW1z77yM5Yik5patIG51bXMg5Lit5piv5ZCm5a2Y5Zyo5LiJ5Liq5YWD57SgIGHvvIxi77yMYyDvvIzkvb/lvpcgYSArIGIgKyBjID0gMCDvvJ/mib7lh7rmiYDmnInmu6HotrPmnaHku7bkuJTkuI3ph43lpI3nmoTkuInlhYPnu4TjgIJcblxu5rOo5oSP77ya562U5qGI5Lit5LiN5Y+v5Lul5YyF5ZCr6YeN5aSN55qE5LiJ5YWD57uE44CCXG5cbuS+i+Wmgiwg57uZ5a6a5pWw57uEIG51bXMgPSBbLTEsIDAsIDEsIDIsIC0xLCAtNF3vvIxcblxu5ruh6Laz6KaB5rGC55qE5LiJ5YWD57uE6ZuG5ZCI5Li677yaXG5bXG4gIFstMSwgMCwgMV0sXG4gIFstMSwgLTEsIDJdXG5dXG5cbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXG7pk77mjqXvvJpodHRwczovL2xlZXRjb2RlLWNuLmNvbS9wcm9ibGVtcy8zc3VtXG7okZfkvZzmnYPlvZLpoobmiaPnvZHnu5zmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vlrpjmlrnmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgIJcbiogKi9cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xuICogQHJldHVybiB7bnVtYmVyW11bXX1cbiAqL1xudmFyIHRocmVlU3VtID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdKSB7XG4gIC8vIOaOkuW6j+WQjiDkvb/nlKjkuInkuKrmjIfpkohcbiAgLy8g5b2T5YmN5oyH6ZKIICDlvZPliY3mjIfpkojlkI7nmoTkuIDkuKrkvY3nva4g5ZKMIOaVsOe7hOacgOWQjueahOS9jee9rlxuICBudW1zLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcblxuICAvLyDmjpLpmaTmnoHnq6/mg4XlhrVcbiAgLy8g6YO95bCP5LqOMFxuICBpZiAobnVtc1tudW1zLmxlbmd0aCAtIDFdIDwgMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyDpg70g5aSn5LqOIDBcbiAgaWYgKG51bXNbMF0gPiAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtcy5sZW5ndGggLSAyOyApIHtcbiAgICBsZXQgbGVmdCA9IGkgKyAxO1xuICAgIGxldCByaWdodCA9IG51bXMubGVuZ3RoIC0gMTtcbiAgICBpZiAobnVtc1tpXSA+IDApIGJyZWFrOyAvLyDlkIzmoLcg5pyA5bem5L6n55qE5YC85LiN6IO9IOWkp+S6jjBcbiAgICB3aGlsZSAobnVtc1tyaWdodF0gPj0gMCAmJiBsZWZ0IDwgcmlnaHQpIHtcbiAgICAgIC8vIOacgOWPs+S+p+eahOWAvCDkuI3og70g5bCP5LqOMFxuICAgICAgY29uc3Qgc3VtID0gbnVtc1tsZWZ0XSArIG51bXNbaV0gKyBudW1zW3JpZ2h0XTtcbiAgICAgIGlmIChzdW0gPT09IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goW251bXNbbGVmdF0sIG51bXNbaV0sIG51bXNbcmlnaHRdXSk7XG4gICAgICB9XG4gICAgICBpZiAoc3VtIDwgMCkge1xuICAgICAgICB3aGlsZSAobGVmdCA8IHJpZ2h0ICYmIG51bXNbKytsZWZ0XSA9PT0gbnVtc1tsZWZ0IC0gMV0pIHt9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAobGVmdCA8IHJpZ2h0ICYmIG51bXNbLS1yaWdodF0gPT09IG51bXNbcmlnaHQgKyAxXSkge31cbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG51bXNbaV0gPT09IG51bXNbKytpXSkge31cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcbmltcG9ydCB7IHNvcnREZWVwIH0gZnJvbSBcIi4uL3V0aWwvYXNzZXJ0SGVscGVyXCI7XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXG4gIHNvcnREZWVwKHRocmVlU3VtKFstMSwgMCwgMSwgMiwgLTEsIC00XSkpLFxuICBzb3J0RGVlcChbXG4gICAgWy0xLCAtMSwgMl0sXG4gICAgWy0xLCAwLCAxXSxcbiAgXSlcbik7XG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICBzb3J0RGVlcCh0aHJlZVN1bShbLTEsIDAsIDEsIDIsIC0xLCAtNCwgLTEsIDAsIDEsIDIsIC0xLCAtNCwgMF0pKSxcbiAgc29ydERlZXAoW1xuICAgIFstNCwgMiwgMl0sXG4gICAgWy0xLCAtMSwgMl0sXG4gICAgWy0xLCAwLCAxXSxcbiAgICBbMCwgMCwgMF0sXG4gIF0pXG4pO1xuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh0aHJlZVN1bShbMCwgMCwgMF0pLCBbWzAsIDAsIDBdXSk7XG4iXX0=