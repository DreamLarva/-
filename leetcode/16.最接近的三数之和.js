"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。
返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum-closest
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function (nums, target) {
    // 方法类似于 15.三数之和 只是结果需要一次处理而已
    // 将 0 处理为 target变量
    // 使用三个指针
    // 当前指正  当前指针后的一个位置 和 数组最后的位置
    nums.sort((a, b) => a - b);
    let result = Infinity;
    for (let i = 0; i < nums.length - 2;) {
        let left = i + 1;
        let right = nums.length - 1;
        // 优化
        // 如果 result 已经小于 target 那么 之后的操作的可能的最大值 不能小于 result
        // 经过测试 似乎 这个逻辑 是不能走到的 因为 i++ 的 情况 整个 result 可能的趋势 都是增加的
        // if (result < target && nums[right] * 2 + nums[i] <= result) {
        //     i++;
        //     continue;
        // }
        // 如果 result 已经大于 target 那么 之后的操作的可能的最小值 不能大于 result
        if (result > target && nums[left] * 2 + nums[i] >= result) {
            i++;
            continue;
        }
        while (left < right) {
            const sum = nums[left] + nums[i] + nums[right];
            if (Math.abs(target - result) > Math.abs(sum - target)) {
                result = sum;
            }
            if (sum === target) {
                return target;
            }
            if (sum < target) {
                while (left < right && nums[++left] === nums[left - 1]) {
                }
            }
            else {
                while (left < right && nums[--right] === nums[right + 1]) {
                }
            }
        }
        while (nums[i] === nums[++i]) {
        }
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4], 1), 2);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -2), -7);
threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -200);
threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], 10);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYu5pyA5o6l6L+R55qE5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNi7mnIDmjqXov5HnmoTkuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7SUFXSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLGVBQWUsR0FBRyxVQUFVLElBQWMsRUFBRSxNQUFjO0lBQzFELDZCQUE2QjtJQUM3QixtQkFBbUI7SUFFbkIsU0FBUztJQUNULDZCQUE2QjtJQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUc7UUFDbEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU1QixLQUFLO1FBQ0wsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxnRUFBZ0U7UUFDaEUsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixJQUFJO1FBRUosb0RBQW9EO1FBQ3BELElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDdkQsQ0FBQyxFQUFFLENBQUM7WUFDSixTQUFTO1NBQ1o7UUFFRCxPQUFPLElBQUksR0FBRyxLQUFLLEVBQUU7WUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRTtnQkFDcEQsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUNoQjtZQUVELElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsT0FBTyxNQUFNLENBQUM7YUFDakI7WUFDRCxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUU7Z0JBQ2QsT0FBTyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7aUJBQ3ZEO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7aUJBQ3pEO2FBQ0o7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1NBQzdCO0tBRUo7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNsQyxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNoRCxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNoRCxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hFLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFFRixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxu57uZ5a6a5LiA5Liq5YyF5ouswqBuIOS4quaVtOaVsOeahOaVsOe7hMKgbnVtc8Kg5ZKMIOS4gOS4quebruagh+WAvMKgdGFyZ2V044CC5om+5Ye6wqBudW1zwqDkuK3nmoTkuInkuKrmlbTmlbDvvIzkvb/lvpflroPku6znmoTlkozkuI7CoHRhcmdldMKg5pyA5o6l6L+R44CCXHJcbui/lOWbnui/meS4ieS4quaVsOeahOWSjOOAguWBh+Wumuavj+e7hOi+k+WFpeWPquWtmOWcqOWUr+S4gOetlOahiOOAglxyXG5cclxu5L6L5aaC77yM57uZ5a6a5pWw57uEIG51bXMgPSBbLTHvvIwy77yMMe+8jC00XSwg5ZKMIHRhcmdldCA9IDEuXHJcblxyXG7kuI4gdGFyZ2V0IOacgOaOpei/keeahOS4ieS4quaVsOeahOWSjOS4uiAyLiAoLTEgKyAyICsgMSA9IDIpLlxyXG5cclxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcclxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvM3N1bS1jbG9zZXN0XHJcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxyXG4qICovXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcltdfSBudW1zXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIHRocmVlU3VtQ2xvc2VzdCA9IGZ1bmN0aW9uIChudW1zOiBudW1iZXJbXSwgdGFyZ2V0OiBudW1iZXIpIHtcclxuICAgIC8vIOaWueazleexu+S8vOS6jiAxNS7kuInmlbDkuYvlkowg5Y+q5piv57uT5p6c6ZyA6KaB5LiA5qyh5aSE55CG6ICM5beyXHJcbiAgICAvLyDlsIYgMCDlpITnkIbkuLogdGFyZ2V05Y+Y6YePXHJcblxyXG4gICAgLy8g5L2/55So5LiJ5Liq5oyH6ZKIXHJcbiAgICAvLyDlvZPliY3mjIfmraMgIOW9k+WJjeaMh+mSiOWQjueahOS4gOS4quS9jee9riDlkowg5pWw57uE5pyA5ZCO55qE5L2N572uXHJcbiAgICBudW1zLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gSW5maW5pdHk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aCAtIDI7KSB7XHJcbiAgICAgICAgbGV0IGxlZnQgPSBpICsgMTtcclxuICAgICAgICBsZXQgcmlnaHQgPSBudW1zLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgIC8vIOS8mOWMllxyXG4gICAgICAgIC8vIOWmguaenCByZXN1bHQg5bey57uP5bCP5LqOIHRhcmdldCDpgqPkuYgg5LmL5ZCO55qE5pON5L2c55qE5Y+v6IO955qE5pyA5aSn5YC8IOS4jeiDveWwj+S6jiByZXN1bHRcclxuICAgICAgICAvLyDnu4/ov4fmtYvor5Ug5Ly85LmOIOi/meS4qumAu+i+kSDmmK/kuI3og73otbDliLDnmoQg5Zug5Li6IGkrKyDnmoQg5oOF5Ya1IOaVtOS4qiByZXN1bHQg5Y+v6IO955qE6LaL5Yq/IOmDveaYr+WinuWKoOeahFxyXG4gICAgICAgIC8vIGlmIChyZXN1bHQgPCB0YXJnZXQgJiYgbnVtc1tyaWdodF0gKiAyICsgbnVtc1tpXSA8PSByZXN1bHQpIHtcclxuICAgICAgICAvLyAgICAgaSsrO1xyXG4gICAgICAgIC8vICAgICBjb250aW51ZTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIOWmguaenCByZXN1bHQg5bey57uP5aSn5LqOIHRhcmdldCDpgqPkuYgg5LmL5ZCO55qE5pON5L2c55qE5Y+v6IO955qE5pyA5bCP5YC8IOS4jeiDveWkp+S6jiByZXN1bHRcclxuICAgICAgICBpZiAocmVzdWx0ID4gdGFyZ2V0ICYmIG51bXNbbGVmdF0gKiAyICsgbnVtc1tpXSA+PSByZXN1bHQpIHtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3VtID0gbnVtc1tsZWZ0XSArIG51bXNbaV0gKyBudW1zW3JpZ2h0XTtcclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldCAtIHJlc3VsdCkgPiBNYXRoLmFicyhzdW0gLSB0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzdW0gPT09IHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3VtIDwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobGVmdCA8IHJpZ2h0ICYmIG51bXNbKytsZWZ0XSA9PT0gbnVtc1tsZWZ0IC0gMV0pIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQgJiYgbnVtc1stLXJpZ2h0XSA9PT0gbnVtc1tyaWdodCArIDFdKSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChudW1zW2ldID09PSBudW1zWysraV0pIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XHJcblxyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICB0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNF0sIDEpLFxyXG4gICAgMixcclxuKTtcclxuXHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIHRocmVlU3VtQ2xvc2VzdChbLTEsIDIsIDEsIC00LCAtMSwgMiwgMSwgLTRdLCA1KSxcclxuICAgIDUsXHJcbik7XHJcblxyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICB0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNCwgLTEsIDIsIDEsIC00XSwgNSksXHJcbiAgICA1LFxyXG4pO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgdGhyZWVTdW1DbG9zZXN0KFsxMiwgMzksIC05NiwgODgsIDc2LCA2MywgLTExLCA0MywgLTk1LCA0M10sIC0yKSxcclxuICAgIC03LFxyXG4pO1xyXG5cclxudGhyZWVTdW1DbG9zZXN0KFsxMiwgMzksIC05NiwgODgsIDc2LCA2MywgLTExLCA0MywgLTk1LCA0M10sIC0yMDApO1xyXG50aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgMTApO1xyXG4iXX0=