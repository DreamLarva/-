"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。
返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum-closest
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function (nums, target) {
    // 方法类似于 15.三数之和 只是结果需要一次处理而已
    // 将 0 处理为 target变量
    // 使用三个指针
    // 当前指正  当前指针后的一个位置 和 数组最后的位置
    nums.sort((a, b) => a - b);
    let result = Infinity;
    for (let i = 0; i < nums.length - 2;) {
        let left = i + 1;
        let right = nums.length - 1;
        // 优化
        // 如果 result 已经小于 target 那么 之后的操作的可能的最大值 不能小于 result
        // 经过测试 似乎 这个逻辑 是不能走到的 因为 i++ 的 情况 整个 result 可能的趋势 都是增加的
        // if (result < target && nums[right] * 2 + nums[i] <= result) {
        //     i++;
        //     continue;
        // }
        // 如果 result 已经大于 target 那么 之后的操作的可能的最小值 不能大于 result
        if (result > target && nums[left] * 2 + nums[i] >= result) {
            i++;
            continue;
        }
        while (left < right) {
            const sum = nums[left] + nums[i] + nums[right];
            if (Math.abs(target - result) > Math.abs(sum - target)) {
                result = sum;
            }
            if (sum === target) {
                return target;
            }
            if (sum < target) {
                while (left < right && nums[++left] === nums[left - 1]) { }
            }
            else {
                while (left < right && nums[--right] === nums[right + 1]) { }
            }
        }
        // while (nums[i] === nums[++i]) {}
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4], 1), 2);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -2), -7);
// threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -200);
// threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], 10);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYu5pyA5o6l6L+R55qE5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNi7mnIDmjqXov5HnmoTkuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7SUFXSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLGVBQWUsR0FBRyxVQUFVLElBQWMsRUFBRSxNQUFjO0lBQzVELDZCQUE2QjtJQUM3QixtQkFBbUI7SUFFbkIsU0FBUztJQUNULDZCQUE2QjtJQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUk7UUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU1QixLQUFLO1FBQ0wsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxnRUFBZ0U7UUFDaEUsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixJQUFJO1FBRUosb0RBQW9EO1FBQ3BELElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDekQsQ0FBQyxFQUFFLENBQUM7WUFDSixTQUFTO1NBQ1Y7UUFFRCxPQUFPLElBQUksR0FBRyxLQUFLLEVBQUU7WUFDbkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRTtnQkFDdEQsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUNkO1lBRUQsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO2dCQUNsQixPQUFPLE1BQU0sQ0FBQzthQUNmO1lBQ0QsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO2dCQUNoQixPQUFPLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFFO2FBQzNEO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUU7YUFDN0Q7U0FDRjtRQUVELG1DQUFtQztLQUNwQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFMUQsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFeEUsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFeEUsZ0JBQU0sQ0FBQyxXQUFXLENBQ2hCLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hFLENBQUMsQ0FBQyxDQUNILENBQUM7QUFFRixzRUFBc0U7QUFDdEUsb0VBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7meWumuS4gOS4quWMheaLrMKgbiDkuKrmlbTmlbDnmoTmlbDnu4TCoG51bXPCoOWSjCDkuIDkuKrnm67moIflgLzCoHRhcmdldOOAguaJvuWHusKgbnVtc8Kg5Lit55qE5LiJ5Liq5pW05pWw77yM5L2/5b6X5a6D5Lus55qE5ZKM5LiOwqB0YXJnZXTCoOacgOaOpei/keOAglxu6L+U5Zue6L+Z5LiJ5Liq5pWw55qE5ZKM44CC5YGH5a6a5q+P57uE6L6T5YWl5Y+q5a2Y5Zyo5ZSv5LiA562U5qGI44CCXG5cbuS+i+Wmgu+8jOe7meWumuaVsOe7hCBudW1zID0gWy0x77yMMu+8jDHvvIwtNF0sIOWSjCB0YXJnZXQgPSAxLlxuXG7kuI4gdGFyZ2V0IOacgOaOpei/keeahOS4ieS4quaVsOeahOWSjOS4uiAyLiAoLTEgKyAyICsgMSA9IDIpLlxuXG7mnaXmupDvvJrlipvmiaPvvIhMZWV0Q29kZe+8iVxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvM3N1bS1jbG9zZXN0XG7okZfkvZzmnYPlvZLpoobmiaPnvZHnu5zmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vlrpjmlrnmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgIJcbiogKi9cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xuICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG52YXIgdGhyZWVTdW1DbG9zZXN0ID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCB0YXJnZXQ6IG51bWJlcikge1xuICAvLyDmlrnms5XnsbvkvLzkuo4gMTUu5LiJ5pWw5LmL5ZKMIOWPquaYr+e7k+aenOmcgOimgeS4gOasoeWkhOeQhuiAjOW3slxuICAvLyDlsIYgMCDlpITnkIbkuLogdGFyZ2V05Y+Y6YePXG5cbiAgLy8g5L2/55So5LiJ5Liq5oyH6ZKIXG4gIC8vIOW9k+WJjeaMh+atoyAg5b2T5YmN5oyH6ZKI5ZCO55qE5LiA5Liq5L2N572uIOWSjCDmlbDnu4TmnIDlkI7nmoTkvY3nva5cbiAgbnVtcy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG5cbiAgbGV0IHJlc3VsdCA9IEluZmluaXR5O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtcy5sZW5ndGggLSAyOyApIHtcbiAgICBsZXQgbGVmdCA9IGkgKyAxO1xuICAgIGxldCByaWdodCA9IG51bXMubGVuZ3RoIC0gMTtcblxuICAgIC8vIOS8mOWMllxuICAgIC8vIOWmguaenCByZXN1bHQg5bey57uP5bCP5LqOIHRhcmdldCDpgqPkuYgg5LmL5ZCO55qE5pON5L2c55qE5Y+v6IO955qE5pyA5aSn5YC8IOS4jeiDveWwj+S6jiByZXN1bHRcbiAgICAvLyDnu4/ov4fmtYvor5Ug5Ly85LmOIOi/meS4qumAu+i+kSDmmK/kuI3og73otbDliLDnmoQg5Zug5Li6IGkrKyDnmoQg5oOF5Ya1IOaVtOS4qiByZXN1bHQg5Y+v6IO955qE6LaL5Yq/IOmDveaYr+WinuWKoOeahFxuICAgIC8vIGlmIChyZXN1bHQgPCB0YXJnZXQgJiYgbnVtc1tyaWdodF0gKiAyICsgbnVtc1tpXSA8PSByZXN1bHQpIHtcbiAgICAvLyAgICAgaSsrO1xuICAgIC8vICAgICBjb250aW51ZTtcbiAgICAvLyB9XG5cbiAgICAvLyDlpoLmnpwgcmVzdWx0IOW3sue7j+Wkp+S6jiB0YXJnZXQg6YKj5LmIIOS5i+WQjueahOaTjeS9nOeahOWPr+iDveeahOacgOWwj+WAvCDkuI3og73lpKfkuo4gcmVzdWx0XG4gICAgaWYgKHJlc3VsdCA+IHRhcmdldCAmJiBudW1zW2xlZnRdICogMiArIG51bXNbaV0gPj0gcmVzdWx0KSB7XG4gICAgICBpKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAobGVmdCA8IHJpZ2h0KSB7XG4gICAgICBjb25zdCBzdW0gPSBudW1zW2xlZnRdICsgbnVtc1tpXSArIG51bXNbcmlnaHRdO1xuICAgICAgaWYgKE1hdGguYWJzKHRhcmdldCAtIHJlc3VsdCkgPiBNYXRoLmFicyhzdW0gLSB0YXJnZXQpKSB7XG4gICAgICAgIHJlc3VsdCA9IHN1bTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN1bSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgICBpZiAoc3VtIDwgdGFyZ2V0KSB7XG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQgJiYgbnVtc1srK2xlZnRdID09PSBudW1zW2xlZnQgLSAxXSkge31cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQgJiYgbnVtc1stLXJpZ2h0XSA9PT0gbnVtc1tyaWdodCArIDFdKSB7fVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHdoaWxlIChudW1zW2ldID09PSBudW1zWysraV0pIHt9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCh0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNF0sIDEpLCAyKTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKHRocmVlU3VtQ2xvc2VzdChbLTEsIDIsIDEsIC00LCAtMSwgMiwgMSwgLTRdLCA1KSwgNSk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCh0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNCwgLTEsIDIsIDEsIC00XSwgNSksIDUpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwoXG4gIHRocmVlU3VtQ2xvc2VzdChbMTIsIDM5LCAtOTYsIDg4LCA3NiwgNjMsIC0xMSwgNDMsIC05NSwgNDNdLCAtMiksXG4gIC03XG4pO1xuXG4vLyB0aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgLTIwMCk7XG4vLyB0aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgMTApO1xuIl19