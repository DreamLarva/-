"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。
返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum-closest
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function (nums, target) {
    // 方法类似于 15.三数之和 只是结果需要一次处理而已
    // 将 0 处理为 target变量
    // 使用三个指针
    // 当前指正  当前指针后的一个位置 和 数组最后的位置
    nums.sort((a, b) => a - b);
    let result = Infinity;
    for (let i = 0; i < nums.length - 2;) {
        let left = i + 1;
        let right = nums.length - 1;
        // 优化
        // 如果 result 已经小于 target 那么 之后的操作的可能的最大值 不能小于 result
        // 经过测试 似乎 这个逻辑 是不能走到的 因为 i++ 的 情况 整个 result 可能的趋势 都是增加的
        // if (result < target && nums[right] * 2 + nums[i] <= result) {
        //     i++;
        //     continue;
        // }
        // 如果 result 已经大于 target 那么 之后的操作的可能的最小值 不能大于 result
        if (result > target && nums[left] * 2 + nums[i] >= result) {
            i++;
            continue;
        }
        while (left < right) {
            const sum = nums[left] + nums[i] + nums[right];
            if (Math.abs(target - result) > Math.abs(sum - target)) {
                result = sum;
            }
            if (sum === target)
                return target;
            if (sum < target)
                while (left < right && nums[++left] === nums[left - 1]) { }
            else
                while (left < right && nums[--right] === nums[right + 1]) { }
        }
        // 由于是已经排序的 数组, 最左侧的指针的值 如果相同就没有必要再计算一次
        while (nums[i] === nums[++i]) { }
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4], 1), 2);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5), 5);
assert_1.default.strictEqual(threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -2), -7);
// threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -200);
// threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], 10);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYu5pyA5o6l6L+R55qE5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNi7mnIDmjqXov5HnmoTkuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7SUFXSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLGVBQWUsR0FBRyxVQUFVLElBQWMsRUFBRSxNQUFjO0lBQzVELDZCQUE2QjtJQUM3QixtQkFBbUI7SUFFbkIsU0FBUztJQUNULDZCQUE2QjtJQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUk7UUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU1QixLQUFLO1FBQ0wsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxnRUFBZ0U7UUFDaEUsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixJQUFJO1FBRUosb0RBQW9EO1FBQ3BELElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDekQsQ0FBQyxFQUFFLENBQUM7WUFDSixTQUFTO1NBQ1Y7UUFFRCxPQUFPLElBQUksR0FBRyxLQUFLLEVBQUU7WUFDbkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRTtnQkFDdEQsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUNkO1lBRUQsSUFBSSxHQUFHLEtBQUssTUFBTTtnQkFBRSxPQUFPLE1BQU0sQ0FBQztZQUNsQyxJQUFJLEdBQUcsR0FBRyxNQUFNO2dCQUNkLE9BQU8sSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUU7O2dCQUN2RCxPQUFPLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFFO1NBQ2xFO1FBRUQsdUNBQXVDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUU7S0FDakM7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTFELGdCQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXhFLGdCQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXhFLGdCQUFNLENBQUMsV0FBVyxDQUNoQixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNoRSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBRUYsc0VBQXNFO0FBQ3RFLG9FQUFvRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG7nu5nlrprkuIDkuKrljIXmi6zCoG4g5Liq5pW05pWw55qE5pWw57uEwqBudW1zwqDlkowg5LiA5Liq55uu5qCH5YC8wqB0YXJnZXTjgILmib7lh7rCoG51bXPCoOS4reeahOS4ieS4quaVtOaVsO+8jOS9v+W+l+Wug+S7rOeahOWSjOS4jsKgdGFyZ2V0wqDmnIDmjqXov5HjgIJcbui/lOWbnui/meS4ieS4quaVsOeahOWSjOOAguWBh+Wumuavj+e7hOi+k+WFpeWPquWtmOWcqOWUr+S4gOetlOahiOOAglxuXG7kvovlpoLvvIznu5nlrprmlbDnu4QgbnVtcyA9IFstMe+8jDLvvIwx77yMLTRdLCDlkowgdGFyZ2V0ID0gMS5cblxu5LiOIHRhcmdldCDmnIDmjqXov5HnmoTkuInkuKrmlbDnmoTlkozkuLogMi4gKC0xICsgMiArIDEgPSAyKS5cblxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zLzNzdW0tY2xvc2VzdFxu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXG4qICovXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyW119IG51bXNcbiAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xudmFyIHRocmVlU3VtQ2xvc2VzdCA9IGZ1bmN0aW9uIChudW1zOiBudW1iZXJbXSwgdGFyZ2V0OiBudW1iZXIpIHtcbiAgLy8g5pa55rOV57G75Ly85LqOIDE1LuS4ieaVsOS5i+WSjCDlj6rmmK/nu5PmnpzpnIDopoHkuIDmrKHlpITnkIbogIzlt7JcbiAgLy8g5bCGIDAg5aSE55CG5Li6IHRhcmdldOWPmOmHj1xuXG4gIC8vIOS9v+eUqOS4ieS4quaMh+mSiFxuICAvLyDlvZPliY3mjIfmraMgIOW9k+WJjeaMh+mSiOWQjueahOS4gOS4quS9jee9riDlkowg5pWw57uE5pyA5ZCO55qE5L2N572uXG4gIG51bXMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuXG4gIGxldCByZXN1bHQgPSBJbmZpbml0eTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bXMubGVuZ3RoIC0gMjsgKSB7XG4gICAgbGV0IGxlZnQgPSBpICsgMTtcbiAgICBsZXQgcmlnaHQgPSBudW1zLmxlbmd0aCAtIDE7XG5cbiAgICAvLyDkvJjljJZcbiAgICAvLyDlpoLmnpwgcmVzdWx0IOW3sue7j+Wwj+S6jiB0YXJnZXQg6YKj5LmIIOS5i+WQjueahOaTjeS9nOeahOWPr+iDveeahOacgOWkp+WAvCDkuI3og73lsI/kuo4gcmVzdWx0XG4gICAgLy8g57uP6L+H5rWL6K+VIOS8vOS5jiDov5nkuKrpgLvovpEg5piv5LiN6IO96LWw5Yiw55qEIOWboOS4uiBpKysg55qEIOaDheWGtSDmlbTkuKogcmVzdWx0IOWPr+iDveeahOi2i+WKvyDpg73mmK/lop7liqDnmoRcbiAgICAvLyBpZiAocmVzdWx0IDwgdGFyZ2V0ICYmIG51bXNbcmlnaHRdICogMiArIG51bXNbaV0gPD0gcmVzdWx0KSB7XG4gICAgLy8gICAgIGkrKztcbiAgICAvLyAgICAgY29udGludWU7XG4gICAgLy8gfVxuXG4gICAgLy8g5aaC5p6cIHJlc3VsdCDlt7Lnu4/lpKfkuo4gdGFyZ2V0IOmCo+S5iCDkuYvlkI7nmoTmk43kvZznmoTlj6/og73nmoTmnIDlsI/lgLwg5LiN6IO95aSn5LqOIHJlc3VsdFxuICAgIGlmIChyZXN1bHQgPiB0YXJnZXQgJiYgbnVtc1tsZWZ0XSAqIDIgKyBudW1zW2ldID49IHJlc3VsdCkge1xuICAgICAgaSsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgICAgY29uc3Qgc3VtID0gbnVtc1tsZWZ0XSArIG51bXNbaV0gKyBudW1zW3JpZ2h0XTtcbiAgICAgIGlmIChNYXRoLmFicyh0YXJnZXQgLSByZXN1bHQpID4gTWF0aC5hYnMoc3VtIC0gdGFyZ2V0KSkge1xuICAgICAgICByZXN1bHQgPSBzdW07XG4gICAgICB9XG5cbiAgICAgIGlmIChzdW0gPT09IHRhcmdldCkgcmV0dXJuIHRhcmdldDtcbiAgICAgIGlmIChzdW0gPCB0YXJnZXQpXG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQgJiYgbnVtc1srK2xlZnRdID09PSBudW1zW2xlZnQgLSAxXSkge31cbiAgICAgIGVsc2Ugd2hpbGUgKGxlZnQgPCByaWdodCAmJiBudW1zWy0tcmlnaHRdID09PSBudW1zW3JpZ2h0ICsgMV0pIHt9XG4gICAgfVxuXG4gICAgLy8g55Sx5LqO5piv5bey57uP5o6S5bqP55qEIOaVsOe7hCwg5pyA5bem5L6n55qE5oyH6ZKI55qE5YC8IOWmguaenOebuOWQjOWwseayoeacieW/heimgeWGjeiuoeeul+S4gOasoVxuICAgIHdoaWxlIChudW1zW2ldID09PSBudW1zWysraV0pIHt9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCh0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNF0sIDEpLCAyKTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKHRocmVlU3VtQ2xvc2VzdChbLTEsIDIsIDEsIC00LCAtMSwgMiwgMSwgLTRdLCA1KSwgNSk7XG5cbmFzc2VydC5zdHJpY3RFcXVhbCh0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNCwgLTEsIDIsIDEsIC00XSwgNSksIDUpO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwoXG4gIHRocmVlU3VtQ2xvc2VzdChbMTIsIDM5LCAtOTYsIDg4LCA3NiwgNjMsIC0xMSwgNDMsIC05NSwgNDNdLCAtMiksXG4gIC03XG4pO1xuXG4vLyB0aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgLTIwMCk7XG4vLyB0aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgMTApO1xuIl19