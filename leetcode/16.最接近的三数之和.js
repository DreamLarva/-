"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。
返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/3sum-closest
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var threeSumClosest = function (nums, target) {
  // 方法类似于 15.三数之和 只是结果需要一次处理而已
  // 将 0 处理为 target变量
  // 使用三个指针
  // 当前指正  当前指针后的一个位置 和 数组最后的位置
  nums.sort((a, b) => a - b);
  let result = Infinity;
  for (let i = 0; i < nums.length - 2; ) {
    let left = i + 1;
    let right = nums.length - 1;
    // 优化
    // 如果 result 已经小于 target 那么 之后的操作的可能的最大值 不能小于 result
    // 经过测试 似乎 这个逻辑 是不能走到的 因为 i++ 的 情况 整个 result 可能的趋势 都是增加的
    // if (result < target && nums[right] * 2 + nums[i] <= result) {
    //     i++;
    //     continue;
    // }
    // 如果 result 已经大于 target 那么 之后的操作的可能的最小值 不能大于 result
    if (result > target && nums[left] * 2 + nums[i] >= result) {
      i++;
      continue;
    }
    while (left < right) {
      const sum = nums[left] + nums[i] + nums[right];
      if (Math.abs(target - result) > Math.abs(sum - target)) {
        result = sum;
      }
      if (sum === target) {
        return target;
      }
      if (sum < target) {
        while (left < right && nums[++left] === nums[left - 1]) {}
      } else {
        while (left < right && nums[--right] === nums[right + 1]) {}
      }
    }
    while (nums[i] === nums[++i]) {}
  }
  return result;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(threeSumClosest([-1, 2, 1, -4], 1), 2);
assert_1.default.strictEqual(
  threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5),
  5
);
assert_1.default.strictEqual(
  threeSumClosest([-1, 2, 1, -4, -1, 2, 1, -4], 5),
  5
);
assert_1.default.strictEqual(
  threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -2),
  -7
);
threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], -200);
threeSumClosest([12, 39, -96, 88, 76, 63, -11, 43, -95, 43], 10);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYu5pyA5o6l6L+R55qE5LiJ5pWw5LmL5ZKMLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNi7mnIDmjqXov5HnmoTkuInmlbDkuYvlkowudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7SUFXSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLGVBQWUsR0FBRyxVQUFVLElBQWMsRUFBRSxNQUFjO0lBQzFELDZCQUE2QjtJQUM3QixtQkFBbUI7SUFFbkIsU0FBUztJQUNULDZCQUE2QjtJQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTNCLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUc7UUFDbEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU1QixLQUFLO1FBQ0wsb0RBQW9EO1FBQ3BELHdEQUF3RDtRQUN4RCxnRUFBZ0U7UUFDaEUsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixJQUFJO1FBRUosb0RBQW9EO1FBQ3BELElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDdkQsQ0FBQyxFQUFFLENBQUM7WUFDSixTQUFTO1NBQ1o7UUFFRCxPQUFPLElBQUksR0FBRyxLQUFLLEVBQUU7WUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsRUFBRTtnQkFDcEQsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUNoQjtZQUVELElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsT0FBTyxNQUFNLENBQUM7YUFDakI7WUFDRCxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUU7Z0JBQ2QsT0FBTyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7aUJBQ3ZEO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7aUJBQ3pEO2FBQ0o7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1NBQzdCO0tBRUo7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNsQyxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNoRCxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUNoRCxDQUFDLENBQ0osQ0FBQztBQUVGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hFLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFFRixlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLGVBQWUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7meWumuS4gOS4quWMheaLrMKgbiDkuKrmlbTmlbDnmoTmlbDnu4TCoG51bXPCoOWSjCDkuIDkuKrnm67moIflgLzCoHRhcmdldOOAguaJvuWHusKgbnVtc8Kg5Lit55qE5LiJ5Liq5pW05pWw77yM5L2/5b6X5a6D5Lus55qE5ZKM5LiOwqB0YXJnZXTCoOacgOaOpei/keOAglxu6L+U5Zue6L+Z5LiJ5Liq5pWw55qE5ZKM44CC5YGH5a6a5q+P57uE6L6T5YWl5Y+q5a2Y5Zyo5ZSv5LiA562U5qGI44CCXG5cbuS+i+Wmgu+8jOe7meWumuaVsOe7hCBudW1zID0gWy0x77yMMu+8jDHvvIwtNF0sIOWSjCB0YXJnZXQgPSAxLlxuXG7kuI4gdGFyZ2V0IOacgOaOpei/keeahOS4ieS4quaVsOeahOWSjOS4uiAyLiAoLTEgKyAyICsgMSA9IDIpLlxuXG7mnaXmupDvvJrlipvmiaPvvIhMZWV0Q29kZe+8iVxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvM3N1bS1jbG9zZXN0XG7okZfkvZzmnYPlvZLpoobmiaPnvZHnu5zmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vlrpjmlrnmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgIJcbiogKi9cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xuICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG52YXIgdGhyZWVTdW1DbG9zZXN0ID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCB0YXJnZXQ6IG51bWJlcikge1xuICAgIC8vIOaWueazleexu+S8vOS6jiAxNS7kuInmlbDkuYvlkowg5Y+q5piv57uT5p6c6ZyA6KaB5LiA5qyh5aSE55CG6ICM5beyXG4gICAgLy8g5bCGIDAg5aSE55CG5Li6IHRhcmdldOWPmOmHj1xuXG4gICAgLy8g5L2/55So5LiJ5Liq5oyH6ZKIXG4gICAgLy8g5b2T5YmN5oyH5q2jICDlvZPliY3mjIfpkojlkI7nmoTkuIDkuKrkvY3nva4g5ZKMIOaVsOe7hOacgOWQjueahOS9jee9rlxuICAgIG51bXMuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuXG4gICAgbGV0IHJlc3VsdCA9IEluZmluaXR5O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aCAtIDI7KSB7XG4gICAgICAgIGxldCBsZWZ0ID0gaSArIDE7XG4gICAgICAgIGxldCByaWdodCA9IG51bXMubGVuZ3RoIC0gMTtcblxuICAgICAgICAvLyDkvJjljJZcbiAgICAgICAgLy8g5aaC5p6cIHJlc3VsdCDlt7Lnu4/lsI/kuo4gdGFyZ2V0IOmCo+S5iCDkuYvlkI7nmoTmk43kvZznmoTlj6/og73nmoTmnIDlpKflgLwg5LiN6IO95bCP5LqOIHJlc3VsdFxuICAgICAgICAvLyDnu4/ov4fmtYvor5Ug5Ly85LmOIOi/meS4qumAu+i+kSDmmK/kuI3og73otbDliLDnmoQg5Zug5Li6IGkrKyDnmoQg5oOF5Ya1IOaVtOS4qiByZXN1bHQg5Y+v6IO955qE6LaL5Yq/IOmDveaYr+WinuWKoOeahFxuICAgICAgICAvLyBpZiAocmVzdWx0IDwgdGFyZ2V0ICYmIG51bXNbcmlnaHRdICogMiArIG51bXNbaV0gPD0gcmVzdWx0KSB7XG4gICAgICAgIC8vICAgICBpKys7XG4gICAgICAgIC8vICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIOWmguaenCByZXN1bHQg5bey57uP5aSn5LqOIHRhcmdldCDpgqPkuYgg5LmL5ZCO55qE5pON5L2c55qE5Y+v6IO955qE5pyA5bCP5YC8IOS4jeiDveWkp+S6jiByZXN1bHRcbiAgICAgICAgaWYgKHJlc3VsdCA+IHRhcmdldCAmJiBudW1zW2xlZnRdICogMiArIG51bXNbaV0gPj0gcmVzdWx0KSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1bSA9IG51bXNbbGVmdF0gKyBudW1zW2ldICsgbnVtc1tyaWdodF07XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGFyZ2V0IC0gcmVzdWx0KSA+IE1hdGguYWJzKHN1bSAtIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdW07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdW0gPT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3VtIDwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlZnQgPCByaWdodCAmJiBudW1zWysrbGVmdF0gPT09IG51bXNbbGVmdCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAobGVmdCA8IHJpZ2h0ICYmIG51bXNbLS1yaWdodF0gPT09IG51bXNbcmlnaHQgKyAxXSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChudW1zW2ldID09PSBudW1zWysraV0pIHtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgIHRocmVlU3VtQ2xvc2VzdChbLTEsIDIsIDEsIC00XSwgMSksXG4gICAgMixcbik7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgICB0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNCwgLTEsIDIsIDEsIC00XSwgNSksXG4gICAgNSxcbik7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgICB0aHJlZVN1bUNsb3Nlc3QoWy0xLCAyLCAxLCAtNCwgLTEsIDIsIDEsIC00XSwgNSksXG4gICAgNSxcbik7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgICB0aHJlZVN1bUNsb3Nlc3QoWzEyLCAzOSwgLTk2LCA4OCwgNzYsIDYzLCAtMTEsIDQzLCAtOTUsIDQzXSwgLTIpLFxuICAgIC03LFxuKTtcblxudGhyZWVTdW1DbG9zZXN0KFsxMiwgMzksIC05NiwgODgsIDc2LCA2MywgLTExLCA0MywgLTk1LCA0M10sIC0yMDApO1xudGhyZWVTdW1DbG9zZXN0KFsxMiwgMzksIC05NiwgODgsIDc2LCA2MywgLTExLCA0MywgLTk1LCA0M10sIDEwKTtcbiJdfQ==
