/*
2029. 石子游戏 IX
Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 stones ，其中 stones[i] 是第 i 个石子的价值。

Alice 和 Bob 轮流进行自己的回合，Alice 先手。每一回合，玩家需要从 stones 中移除任一石子。

如果玩家移除石子后，导致 所有已移除石子 的价值 总和 可以被 3 整除，那么该玩家就 输掉游戏 。
如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。
假设两位玩家均采用 最佳 决策。如果 Alice 获胜，返回 true ；如果 Bob 获胜，返回 false 。



示例 1：

输入：stones = [2,1]
输出：true
解释：游戏进行如下：
- 回合 1：Alice 可以移除任意一个石子。
- 回合 2：Bob 移除剩下的石子。
已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。
示例 2：

输入：stones = [2]
输出：false
解释：Alice 会移除唯一一个石子，已移除石子的值总和为 2 。
由于所有石子都已移除，且值总和无法被 3 整除，Bob 获胜。
示例 3：

输入：stones = [5,1,2,4,3]
输出：false
解释：Bob 总会获胜。其中一种可能的游戏进行方式如下：
- 回合 1：Alice 可以移除值为 1 的第 2 个石子。已移除石子值总和为 1 。
- 回合 2：Bob 可以移除值为 3 的第 5 个石子。已移除石子值总和为 = 1 + 3 = 4 。
- 回合 3：Alices 可以移除值为 4 的第 4 个石子。已移除石子值总和为 = 1 + 3 + 4 = 8 。
- 回合 4：Bob 可以移除值为 2 的第 3 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 = 10.
- 回合 5：Alice 可以移除值为 5 的第 1 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 + 5 = 15.
Alice 输掉游戏，因为已移除石子值总和（15）可以被 3 整除，Bob 获胜。


提示：

1 <= stones.length <= 105
1 <= stones[i] <= 104
* */
function stoneGameIX(stones: number[]): boolean {
  const cache: [number, number, number] = [0, 0, 0];
  for (const stone of stones) {
    cache[stone % 3]++;
  }

  // 可以推倒1 只有一种数字则 先选必胜

  // 当 0 数量为 偶数 则没有 0 的干扰
  // 当有 只有 1 >= 2 和 2 >= 是 可以是
  // 1121212121⋯ 1[12]
  // 2212121212⋯ 2[21]
  // 第一个选的人 可以控制第二个人的落点 所以必胜
  // 当只有一种 类型 则必输
  if (cache[0] % 2 === 0) {
    return cache[1] >= 1 && cache[2] >= 1;
  }

  // 当 余0 数量 为 奇数 ，实际偶数部分都会相互抵消，所以实际有效的的是 1 次使用
  // 所以 第一个人选择 较多的数(+1) 将第二个人落点设为较多的数
  // 然后 2 个一组在一直抵消，
  // 直到 较少的最后一个数被 A 选走（之后就是根据最开始的推导1）
  // B 选只能选择 余0 和 较多的数， 下个会和A 会选择另一个(+1)
  // 最后 B 只能选择较多的数(+1)
  return cache[1] - cache[2] >= 3 || cache[2] - cache[1] >= 3;
}

import assert from "assert";
