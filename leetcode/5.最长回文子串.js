"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
* */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
    const str = [...s];
    let result = [];
    if (str.join("") === str.reverse().join("")) {
        return str.join("");
    }
    str.forEach((v, i, a) => {
        // 123321 格式
        if (v === a[i + 1]) {
            let temp = 1;
            while ((i - temp >= 0) && (i + 1 + temp <= a.length - 1) && (a[i + 1 + temp] === a[i - temp])) {
                temp++;
            }
            temp--;
            if (result.length <= 1 + 2 * temp) {
                result = a.slice(i - temp, i + 1 + temp + 1);
            }
        }
        // 123321 格式
        if (a[i + 1] === a[i - 1]) {
            let temp = 1;
            while ((i - temp >= 0) && (i + temp <= a.length - 1) && (a[i + temp] === a[i - temp])) {
                temp++;
            }
            temp--;
            if (result.length <= 1 + 2 * temp) {
                result = a.slice(i - temp, i + temp + 1);
            }
        }
    });
    return result.join("") || str[0];
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(longestPalindrome("cbbd"), "bb");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS7mnIDplb/lm57mloflrZDkuLIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzUu5pyA6ZW/5Zue5paH5a2Q5LiyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7OztHQUdHO0FBQ0gsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQVM7SUFDdkMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUN6QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdkI7SUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQzNGLElBQUksRUFBRSxDQUFDO2FBQ1Y7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDL0IsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNoRDtTQUVKO1FBQ0QsWUFBWTtRQUNaLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ25GLElBQUksRUFBRSxDQUFDO2FBQ1Y7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDL0IsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0o7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUYsb0RBQTJCO0FBQzNCLGdCQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxu57uZ5a6a5LiA5Liq5a2X56ym5LiyIHPvvIzmib7liLAgcyDkuK3mnIDplb/nmoTlm57mloflrZDkuLLjgILkvaDlj6/ku6XlgYforr4gcyDnmoTmnIDlpKfplb/luqbkuLogMTAwMOOAglxyXG5cclxu56S65L6LIDHvvJpcclxuXHJcbui+k+WFpTogXCJiYWJhZFwiXHJcbui+k+WHujogXCJiYWJcIlxyXG7ms6jmhI86IFwiYWJhXCIg5Lmf5piv5LiA5Liq5pyJ5pWI562U5qGI44CCXHJcbuekuuS+iyAy77yaXHJcblxyXG7ovpPlhaU6IFwiY2JiZFwiXHJcbui+k+WHujogXCJiYlwiXHJcbiogKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbnZhciBsb25nZXN0UGFsaW5kcm9tZSA9IGZ1bmN0aW9uIChzOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN0ciA9IFsuLi5zXTtcclxuICAgIGxldCByZXN1bHQ6IHN0cmluZ1tdID0gW107XHJcbiAgICBpZiAoc3RyLmpvaW4oXCJcIikgPT09IHN0ci5yZXZlcnNlKCkuam9pbihcIlwiKSkge1xyXG4gICAgICAgIHJldHVybiBzdHIuam9pbihcIlwiKTtcclxuICAgIH1cclxuICAgIHN0ci5mb3JFYWNoKCh2LCBpLCBhKSA9PiB7XHJcbiAgICAgICAgLy8gMTIzMzIxIOagvOW8j1xyXG4gICAgICAgIGlmICh2ID09PSBhW2kgKyAxXSkge1xyXG4gICAgICAgICAgICBsZXQgdGVtcCA9IDE7XHJcbiAgICAgICAgICAgIHdoaWxlICgoaSAtIHRlbXAgPj0gMCkgJiYgKGkgKyAxICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEpICYmIChhW2kgKyAxICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdKSkge1xyXG4gICAgICAgICAgICAgICAgdGVtcCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRlbXAtLTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPD0gMSArIDIgKiB0ZW1wKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhLnNsaWNlKGkgLSB0ZW1wLCBpICsgMSArIHRlbXAgKyAxKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMTIzMzIxIOagvOW8j1xyXG4gICAgICAgIGlmIChhW2kgKyAxXSA9PT0gYVtpIC0gMV0pIHtcclxuICAgICAgICAgICAgbGV0IHRlbXAgPSAxO1xyXG4gICAgICAgICAgICB3aGlsZSAoKGkgLSB0ZW1wID49IDApICYmIChpICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEpICYmIChhW2kgKyB0ZW1wXSA9PT0gYVtpIC0gdGVtcF0pKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGVtcC0tO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA8PSAxICsgMiAqIHRlbXApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGEuc2xpY2UoaSAtIHRlbXAsIGkgKyB0ZW1wICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKSB8fCBzdHJbMF07XHJcbn07XHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxyXG5hc3NlcnQuc3RyaWN0RXF1YWwobG9uZ2VzdFBhbGluZHJvbWUoXCJjYmJkXCIpLFwiYmJcIik7XHJcbmV4cG9ydCB7fVxyXG4iXX0=