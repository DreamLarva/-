"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
* */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
    const str = [...s];
    let result = [];
    if (str.join("") === str.reverse().join("")) {
        return str.join("");
    }
    str.forEach((v, i, a) => {
        // 123321 格式
        if (v === a[i + 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + 1 + temp <= a.length - 1 &&
                a[i + 1 + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 2 + 2 * temp) {
                // 这个第一个 2 改成1 竟然不会有错误
                result = a.slice(i - temp, i + 1 + temp + 1);
            }
        }
        // 12321 格式
        if (a[i + 1] === a[i - 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + temp <= a.length - 1 &&
                a[i + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 1 + 2 * temp) {
                result = a.slice(i - temp, i + temp + 1);
            }
        }
    });
    return result.join("") || str[0];
};
/**
 * Manacher算法
 * 时间复杂度为 O(n)
 * */
const manacher_____1 = require("../\u7B97\u6CD5/manacher\u9A6C\u62C9\u8F66\u7B97\u6CD5");
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(longestPalindrome("cbbd"), "bb");
assert_1.default.strictEqual(longestPalindrome("abacddc"), "cddc");
assert_1.default.strictEqual((0, manacher_____1.manacher1)("abacddc"), "cddc");
assert_1.default.strictEqual((0, manacher_____1.manacher1)("abacddc"), "cddc");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS7mnIDplb/lm57mloflrZDkuLIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzUu5pyA6ZW/5Zue5paH5a2Q5LiyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7OztHQUdHO0FBQ0gsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQVM7SUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckI7SUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixPQUNFLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztnQkFDYixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQy9CO2dCQUNBLElBQUksRUFBRSxDQUFDO2FBQ1I7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEMsc0JBQXNCO2dCQUN0QixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzlDO1NBQ0Y7UUFDRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDekIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2IsT0FDRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFDM0I7Z0JBQ0EsSUFBSSxFQUFFLENBQUM7YUFDUjtZQUNELElBQUksRUFBRSxDQUFDO1lBQ1AsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFO2dCQUNoQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDMUM7U0FDRjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUM7QUFFRjs7O0tBR0s7QUFDTCx5RkFBZ0Q7QUFHaEQsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BELGdCQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELGdCQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsd0JBQVMsRUFBQyxTQUFTLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLHdCQUFTLEVBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu57uZ5a6a5LiA5Liq5a2X56ym5LiyIHPvvIzmib7liLAgcyDkuK3mnIDplb/nmoTlm57mloflrZDkuLLjgILkvaDlj6/ku6XlgYforr4gcyDnmoTmnIDlpKfplb/luqbkuLogMTAwMOOAglxuXG7npLrkvosgMe+8mlxuXG7ovpPlhaU6IFwiYmFiYWRcIlxu6L6T5Ye6OiBcImJhYlwiXG7ms6jmhI86IFwiYWJhXCIg5Lmf5piv5LiA5Liq5pyJ5pWI562U5qGI44CCXG7npLrkvosgMu+8mlxuXG7ovpPlhaU6IFwiY2JiZFwiXG7ovpPlh7o6IFwiYmJcIlxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgbG9uZ2VzdFBhbGluZHJvbWUgPSBmdW5jdGlvbiAoczogc3RyaW5nKSB7XG4gIGNvbnN0IHN0ciA9IFsuLi5zXTtcbiAgbGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcbiAgaWYgKHN0ci5qb2luKFwiXCIpID09PSBzdHIucmV2ZXJzZSgpLmpvaW4oXCJcIikpIHtcbiAgICByZXR1cm4gc3RyLmpvaW4oXCJcIik7XG4gIH1cbiAgc3RyLmZvckVhY2goKHYsIGksIGEpID0+IHtcbiAgICAvLyAxMjMzMjEg5qC85byPXG4gICAgaWYgKHYgPT09IGFbaSArIDFdKSB7XG4gICAgICBsZXQgdGVtcCA9IDE7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIGkgLSB0ZW1wID49IDAgJiZcbiAgICAgICAgaSArIDEgKyB0ZW1wIDw9IGEubGVuZ3RoIC0gMSAmJlxuICAgICAgICBhW2kgKyAxICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXG4gICAgICApIHtcbiAgICAgICAgdGVtcCsrO1xuICAgICAgfVxuICAgICAgdGVtcC0tO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAyICsgMiAqIHRlbXApIHtcbiAgICAgICAgLy8g6L+Z5Liq56ys5LiA5LiqIDIg5pS55oiQMSDnq5/nhLbkuI3kvJrmnInplJnor69cbiAgICAgICAgcmVzdWx0ID0gYS5zbGljZShpIC0gdGVtcCwgaSArIDEgKyB0ZW1wICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIDEyMzIxIOagvOW8j1xuICAgIGlmIChhW2kgKyAxXSA9PT0gYVtpIC0gMV0pIHtcbiAgICAgIGxldCB0ZW1wID0gMTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgaSAtIHRlbXAgPj0gMCAmJlxuICAgICAgICBpICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgYVtpICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXG4gICAgICApIHtcbiAgICAgICAgdGVtcCsrO1xuICAgICAgfVxuICAgICAgdGVtcC0tO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxICsgMiAqIHRlbXApIHtcbiAgICAgICAgcmVzdWx0ID0gYS5zbGljZShpIC0gdGVtcCwgaSArIHRlbXAgKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIikgfHwgc3RyWzBdO1xufTtcblxuLyoqXG4gKiBNYW5hY2hlcueul+azlVxuICog5pe26Ze05aSN5p2C5bqm5Li6IE8obilcbiAqICovXG5pbXBvcnQgeyBtYW5hY2hlcjEgfSBmcm9tIFwiLi4v566X5rOVL21hbmFjaGVy6ams5ouJ6L2m566X5rOVXCI7XG5cblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChsb25nZXN0UGFsaW5kcm9tZShcImNiYmRcIiksIFwiYmJcIik7XG5hc3NlcnQuc3RyaWN0RXF1YWwobG9uZ2VzdFBhbGluZHJvbWUoXCJhYmFjZGRjXCIpLCBcImNkZGNcIik7XG5hc3NlcnQuc3RyaWN0RXF1YWwobWFuYWNoZXIxKFwiYWJhY2RkY1wiKSwgXCJjZGRjXCIpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1hbmFjaGVyMShcImFiYWNkZGNcIiksIFwiY2RkY1wiKTtcblxuXG4iXX0=