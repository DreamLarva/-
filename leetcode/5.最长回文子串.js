"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
* */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
  const str = [...s];
  let result = [];
  if (str.join("") === str.reverse().join("")) {
    return str.join("");
  }
  str.forEach((v, i, a) => {
    // 123321 格式
    if (v === a[i + 1]) {
      let temp = 1;
      while (
        i - temp >= 0 &&
        i + 1 + temp <= a.length - 1 &&
        a[i + 1 + temp] === a[i - temp]
      ) {
        temp++;
      }
      temp--;
      if (result.length < 2 + 2 * temp) {
        // 这个第一个 2 改成1 竟然不会有错误
        result = a.slice(i - temp, i + 1 + temp + 1);
      }
    }
    // 12321 格式
    if (a[i + 1] === a[i - 1]) {
      let temp = 1;
      while (
        i - temp >= 0 &&
        i + temp <= a.length - 1 &&
        a[i + temp] === a[i - temp]
      ) {
        temp++;
      }
      temp--;
      if (result.length < 1 + 2 * temp) {
        result = a.slice(i - temp, i + temp + 1);
      }
    }
  });
  return result.join("") || str[0];
};
/**
 * todo
 * Manacher算法
 * 时间复杂度为 O(n)
 * */
function Manacher(s) {
  // 添加在每个字符中间添加 # 将字符串隔开
  // 就能将 所有 1221 这样的 转化为 1#2#2#1 就可以 同 121 这样格式一样处理
  let text = "";
  for (let i = 0; i < s.length - 1; i++) {
    text += s[i] + "#";
  }
  text += s[s.length - 1];
  // 从左向右 中心拓展判断是不是 回文
  let index = 0;
  const map = [];
  while (index < text.length) {
    const middle = index;
    // if (text[middle] === "#"){
    //     index++;
    //     continue
    // }
    let range = 1;
    while (
      middle - range > 0 &&
      middle + range < text.length &&
      text[middle - range] === text[middle + range]
    ) {
      range++;
    }
    map[middle] = range;
    index++;
    while (index < middle + range - 1) {}
  }
  console.log(map);
  return true;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(longestPalindrome("cbbd"), "bb");
assert_1.default.strictEqual(longestPalindrome("abacddc"), "cddc");
Manacher("1234");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS7mnIDplb/lm57mloflrZDkuLIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzUu5pyA6ZW/5Zue5paH5a2Q5LiyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7OztHQUdHO0FBQ0gsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQVM7SUFDdkMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUN6QyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdkI7SUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixPQUNJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztnQkFDYixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQzdCO2dCQUNGLElBQUksRUFBRSxDQUFDO2FBQ1Y7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDOUIsc0JBQXNCO2dCQUN0QixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2hEO1NBQ0o7UUFDRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2IsT0FDSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFDekI7Z0JBQ0YsSUFBSSxFQUFFLENBQUM7YUFDVjtZQUNELElBQUksRUFBRSxDQUFDO1lBQ1AsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFO2dCQUM5QixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDNUM7U0FDSjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRjs7OztLQUlLO0FBQ0wsU0FBUyxRQUFRLENBQUMsQ0FBUztJQUN2Qix1QkFBdUI7SUFDdkIsaURBQWlEO0lBQ2pELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUN0QjtJQUNELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV4QixvQkFBb0I7SUFDcEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO0lBQ3pCLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDeEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLDZCQUE2QjtRQUM3QixlQUFlO1FBQ2YsZUFBZTtRQUNmLElBQUk7UUFFSixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPLE1BQU0sR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDeEcsS0FBSyxFQUFFLENBQUM7U0FDWDtRQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSyxFQUFFLENBQUM7UUFDUixPQUFPLEtBQUssR0FBRyxNQUFNLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRTtTQUdsQztLQUNKO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUdoQixPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBR0Qsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BELGdCQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXpELFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbue7meWumuS4gOS4quWtl+espuS4siBz77yM5om+5YiwIHMg5Lit5pyA6ZW/55qE5Zue5paH5a2Q5Liy44CC5L2g5Y+v5Lul5YGH6K6+IHMg55qE5pyA5aSn6ZW/5bqm5Li6IDEwMDDjgIJcclxuXHJcbuekuuS+iyAx77yaXHJcblxyXG7ovpPlhaU6IFwiYmFiYWRcIlxyXG7ovpPlh7o6IFwiYmFiXCJcclxu5rOo5oSPOiBcImFiYVwiIOS5n+aYr+S4gOS4quacieaViOetlOahiOOAglxyXG7npLrkvosgMu+8mlxyXG5cclxu6L6T5YWlOiBcImNiYmRcIlxyXG7ovpPlh7o6IFwiYmJcIlxyXG4qICovXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG52YXIgbG9uZ2VzdFBhbGluZHJvbWUgPSBmdW5jdGlvbiAoczogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdHIgPSBbLi4uc107XHJcbiAgICBsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgaWYgKHN0ci5qb2luKFwiXCIpID09PSBzdHIucmV2ZXJzZSgpLmpvaW4oXCJcIikpIHtcclxuICAgICAgICByZXR1cm4gc3RyLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICBzdHIuZm9yRWFjaCgodiwgaSwgYSkgPT4ge1xyXG4gICAgICAgIC8vIDEyMzMyMSDmoLzlvI9cclxuICAgICAgICBpZiAodiA9PT0gYVtpICsgMV0pIHtcclxuICAgICAgICAgICAgbGV0IHRlbXAgPSAxO1xyXG4gICAgICAgICAgICB3aGlsZSAoXHJcbiAgICAgICAgICAgICAgICBpIC0gdGVtcCA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICBpICsgMSArIHRlbXAgPD0gYS5sZW5ndGggLSAxICYmXHJcbiAgICAgICAgICAgICAgICBhW2kgKyAxICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRlbXArKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZW1wLS07XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMiArIDIgKiB0ZW1wKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDov5nkuKrnrKzkuIDkuKogMiDmlLnmiJAxIOern+eEtuS4jeS8muaciemUmeivr1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYS5zbGljZShpIC0gdGVtcCwgaSArIDEgKyB0ZW1wICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMTIzMjEg5qC85byPXHJcbiAgICAgICAgaWYgKGFbaSArIDFdID09PSBhW2kgLSAxXSkge1xyXG4gICAgICAgICAgICBsZXQgdGVtcCA9IDE7XHJcbiAgICAgICAgICAgIHdoaWxlIChcclxuICAgICAgICAgICAgICAgIGkgLSB0ZW1wID49IDAgJiZcclxuICAgICAgICAgICAgICAgIGkgKyB0ZW1wIDw9IGEubGVuZ3RoIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgYVtpICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRlbXArKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ZW1wLS07XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMSArIDIgKiB0ZW1wKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhLnNsaWNlKGkgLSB0ZW1wLCBpICsgdGVtcCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIikgfHwgc3RyWzBdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHRvZG9cclxuICogTWFuYWNoZXLnrpfms5VcclxuICog5pe26Ze05aSN5p2C5bqm5Li6IE8obilcclxuICogKi9cclxuZnVuY3Rpb24gTWFuYWNoZXIoczogc3RyaW5nKSB7XHJcbiAgICAvLyDmt7vliqDlnKjmr4/kuKrlrZfnrKbkuK3pl7Tmt7vliqAgIyDlsIblrZfnrKbkuLLpmpTlvIBcclxuICAgIC8vIOWwseiDveWwhiDmiYDmnIkgMTIyMSDov5nmoLfnmoQg6L2s5YyW5Li6IDEjMiMyIzEg5bCx5Y+v5LulIOWQjCAxMjEg6L+Z5qC35qC85byP5LiA5qC35aSE55CGXHJcbiAgICBsZXQgdGV4dCA9IFwiXCI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgdGV4dCArPSBzW2ldICsgXCIjXCI7XHJcbiAgICB9XHJcbiAgICB0ZXh0ICs9IHNbcy5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAvLyDku47lt6blkJHlj7Mg5Lit5b+D5ouT5bGV5Yik5pat5piv5LiN5pivIOWbnuaWh1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGNvbnN0IG1hcDogbnVtYmVyW10gPSBbXTtcclxuICAgIHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgbWlkZGxlID0gaW5kZXg7XHJcbiAgICAgICAgLy8gaWYgKHRleHRbbWlkZGxlXSA9PT0gXCIjXCIpe1xyXG4gICAgICAgIC8vICAgICBpbmRleCsrO1xyXG4gICAgICAgIC8vICAgICBjb250aW51ZVxyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgbGV0IHJhbmdlID0gMTtcclxuICAgICAgICB3aGlsZSAobWlkZGxlIC0gcmFuZ2UgPiAwICYmIG1pZGRsZSArIHJhbmdlIDwgdGV4dC5sZW5ndGggJiYgdGV4dFttaWRkbGUgLSByYW5nZV0gPT09IHRleHRbbWlkZGxlICsgcmFuZ2VdKSB7XHJcbiAgICAgICAgICAgIHJhbmdlKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1hcFttaWRkbGVdID0gcmFuZ2U7XHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUgKyByYW5nZSAtIDEpIHtcclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKG1hcClcclxuXHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcclxuXHJcbmFzc2VydC5zdHJpY3RFcXVhbChsb25nZXN0UGFsaW5kcm9tZShcImNiYmRcIiksIFwiYmJcIik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChsb25nZXN0UGFsaW5kcm9tZShcImFiYWNkZGNcIiksIFwiY2RkY1wiKTtcclxuXHJcbk1hbmFjaGVyKFwiMTIzNFwiKTtcclxuIl19
