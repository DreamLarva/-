"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
* */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
    const str = [...s];
    let result = [];
    if (str.join("") === str.reverse().join("")) {
        return str.join("");
    }
    str.forEach((v, i, a) => {
        // 123321 格式
        if (v === a[i + 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + 1 + temp <= a.length - 1 &&
                a[i + 1 + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 2 + 2 * temp) {
                // 这个第一个 2 改成1 竟然不会有错误
                result = a.slice(i - temp, i + 1 + temp + 1);
            }
        }
        // 12321 格式
        if (a[i + 1] === a[i - 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + temp <= a.length - 1 &&
                a[i + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 1 + 2 * temp) {
                result = a.slice(i - temp, i + temp + 1);
            }
        }
    });
    return result.join("") || str[0];
};
/**
 * todo
 * Manacher算法
 * 时间复杂度为 O(n)
 * */
function Manacher(s) {
    // 添加在每个字符中间添加 # 将字符串隔开
    // 就能将 所有 1221 这样的 转化为 1#2#2#1 就可以 同 121 这样格式一样处理
    let text = "";
    for (let i = 0; i < s.length - 1; i++) {
        text += s[i] + "#";
    }
    text += s[s.length - 1];
    // 从左向右 中心拓展判断是不是 回文
    let index = 0;
    const map = [];
    while (index < text.length) {
        const middle = index;
        // if (text[middle] === "#"){
        //     index++;
        //     continue
        // }
        let range = 1;
        while (middle - range > 0 &&
            middle + range < text.length &&
            text[middle - range] === text[middle + range]) {
            range++;
        }
        map[middle] = range;
        index++;
        while (index < middle + range - 1) { }
    }
    console.log(map);
    return true;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(longestPalindrome("cbbd"), "bb");
assert_1.default.strictEqual(longestPalindrome("abacddc"), "cddc");
Manacher("1234");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS7mnIDplb/lm57mloflrZDkuLIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzUu5pyA6ZW/5Zue5paH5a2Q5LiyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7OztHQUdHO0FBQ0gsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQVM7SUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckI7SUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixPQUNFLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztnQkFDYixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQy9CO2dCQUNBLElBQUksRUFBRSxDQUFDO2FBQ1I7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEMsc0JBQXNCO2dCQUN0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WyIvKlxu57uZ5a6a5LiA5Liq5a2X56ym5LiyIHPvvIzmib7liLAgcyDkuK3mnIDplb/nmoTlm57mloflrZDkuLLjgILkvaDlj6/ku6XlgYforr4gcyDnmoTmnIDlpKfplb/luqbkuLogMTAwMOOAglxuXG7npLrkvosgMe+8mlxuXG7ovpPlhaU6IFwiYmFiYWRcIlxu6L6T5Ye6OiBcImJhYlwiXG7ms6jmhI86IFwiYWJhXCIg5Lmf5piv5LiA5Liq5pyJ5pWI562U5qGI44CCXG7npLrkvosgMu+8mlxuXG7ovpPlhaU6IFwiY2JiZFwiXG7ovpPlh7o6IFwiYmJcIlxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgbG9uZ2VzdFBhbGluZHJvbWUgPSBmdW5jdGlvbiAoczogc3RyaW5nKSB7XG4gIGNvbnN0IHN0ciA9IFsuLi5zXTtcbiAgbGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcbiAgaWYgKHN0ci5qb2luKFwiXCIpID09PSBzdHIucmV2ZXJzZSgpLmpvaW4oXCJcIikpIHtcbiAgICByZXR1cm4gc3RyLmpvaW4oXCJcIik7XG4gIH1cbiAgc3RyLmZvckVhY2goKHYsIGksIGEpID0+IHtcbiAgICAvLyAxMjMzMjEg5qC85byPXG4gICAgaWYgKHYgPT09IGFbaSArIDFdKSB7XG4gICAgICBsZXQgdGVtcCA9IDE7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIGkgLSB0ZW1wID49IDAgJiZcbiAgICAgICAgaSArIDEgKyB0ZW1wIDw9IGEubGVuZ3RoIC0gMSAmJlxuICAgICAgICBhW2kgKyAxICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXG4gICAgICApIHtcbiAgICAgICAgdGVtcCsrO1xuICAgICAgfVxuICAgICAgdGVtcC0tO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAyICsgMiAqIHRlbXApIHtcbiAgICAgICAgLy8g6L+Z5Liq56ys5LiA5LiqIDIg5pS55oiQMSDnq5/nhLbkuI3kvJrmnInplJnor69cbiAgICAgICAgcmVzdWx0ID0gYS5zbGljZShpIC0gdGVtcCwgaSArIDEgKyB0ZW1wICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIDEyMzIxIOagvOW8j1xuICAgIGlmIChhW2kgKyAxXSA9PT0gYVtpIC0gMV0pIHtcbiAgICAgIGxldCB0ZW1wID0gMTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgaSAtIHRlbXAgPj0gMCAmJlxuICAgICAgICBpICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgYVtpICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXG4gICAgICApIHtcbiAgICAgICAgdGVtcCsrO1xuICAgICAgfVxuICAgICAgdGVtcC0tO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxICsgMiAqIHRlbXApIHtcbiAgICAgICAgcmVzdWx0ID0gYS5zbGljZShpIC0gdGVtcCwgaSArIHRlbXAgKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIikgfHwgc3RyWzBdO1xufTtcblxuLyoqXG4gKiB0b2RvXG4gKiBNYW5hY2hlcueul+azlVxuICog5pe26Ze05aSN5p2C5bqm5Li6IE8obilcbiAqICovXG5mdW5jdGlvbiBNYW5hY2hlcihzOiBzdHJpbmcpIHtcbiAgLy8g5re75Yqg5Zyo5q+P5Liq5a2X56ym5Lit6Ze05re75YqgICMg5bCG5a2X56ym5Liy6ZqU5byAXG4gIC8vIOWwseiDveWwhiDmiYDmnIkgMTIyMSDov5nmoLfnmoQg6L2s5YyW5Li6IDEjMiMyIzEg5bCx5Y+v5LulIOWQjCAxMjEg6L+Z5qC35qC85byP5LiA5qC35aSE55CGXG4gIGxldCB0ZXh0ID0gXCJcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHRleHQgKz0gc1tpXSArIFwiI1wiO1xuICB9XG4gIHRleHQgKz0gc1tzLmxlbmd0aCAtIDFdO1xuXG4gIC8vIOS7juW3puWQkeWPsyDkuK3lv4Pmi5PlsZXliKTmlq3mmK/kuI3mmK8g5Zue5paHXG4gIGxldCBpbmRleCA9IDA7XG4gIGNvbnN0IG1hcDogbnVtYmVyW10gPSBbXTtcbiAgd2hpbGUgKGluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICBjb25zdCBtaWRkbGUgPSBpbmRleDtcbiAgICAvLyBpZiAodGV4dFttaWRkbGVdID09PSBcIiNcIil7XG4gICAgLy8gICAgIGluZGV4Kys7XG4gICAgLy8gICAgIGNvbnRpbnVlXG4gICAgLy8gfVxuXG4gICAgbGV0IHJhbmdlID0gMTtcbiAgICB3aGlsZSAoXG4gICAgICBtaWRkbGUgLSByYW5nZSA+IDAgJiZcbiAgICAgIG1pZGRsZSArIHJhbmdlIDwgdGV4dC5sZW5ndGggJiZcbiAgICAgIHRleHRbbWlkZGxlIC0gcmFuZ2VdID09PSB0ZXh0W21pZGRsZSArIHJhbmdlXVxuICAgICkge1xuICAgICAgcmFuZ2UrKztcbiAgICB9XG4gICAgbWFwW21pZGRsZV0gPSByYW5nZTtcbiAgICBpbmRleCsrO1xuICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSArIHJhbmdlIC0gMSkge31cbiAgfVxuICBjb25zb2xlLmxvZyhtYXApO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKGxvbmdlc3RQYWxpbmRyb21lKFwiY2JiZFwiKSwgXCJiYlwiKTtcbmFzc2VydC5zdHJpY3RFcXVhbChsb25nZXN0UGFsaW5kcm9tZShcImFiYWNkZGNcIiksIFwiY2RkY1wiKTtcblxuTWFuYWNoZXIoXCIxMjM0XCIpO1xuIl19