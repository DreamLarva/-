"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
* */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
    const str = [...s];
    let result = [];
    if (str.join("") === str.reverse().join("")) {
        return str.join("");
    }
    str.forEach((v, i, a) => {
        // 123321 格式
        if (v === a[i + 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + 1 + temp <= a.length - 1 &&
                a[i + 1 + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 2 + 2 * temp) {
                // 这个第一个 2 改成1 竟然不会有错误
                result = a.slice(i - temp, i + 1 + temp + 1);
            }
        }
        // 12321 格式
        if (a[i + 1] === a[i - 1]) {
            let temp = 1;
            while (i - temp >= 0 &&
                i + temp <= a.length - 1 &&
                a[i + temp] === a[i - temp]) {
                temp++;
            }
            temp--;
            if (result.length < 1 + 2 * temp) {
                result = a.slice(i - temp, i + temp + 1);
            }
        }
    });
    return result.join("") || str[0];
};
/**
 * todo
 * Manacher算法
 * 时间复杂度为 O(n)
 * */
function Manacher(s) {
    // 添加在每个字符中间添加 # 将字符串隔开
    // 就能将 所有 1221 这样的 转化为 1#2#2#1 就可以 同 121 这样格式一样处理
    let text = "";
    for (let i = 0; i < s.length - 1; i++) {
        text += s[i] + "#";
    }
    text += s[s.length - 1];
    // 从左向右 中心拓展判断是不是 回文
    let index = 0;
    const map = [];
    while (index < text.length) {
        const middle = index;
        // if (text[middle] === "#"){
        //     index++;
        //     continue
        // }
        let range = 1;
        while (middle - range > 0 &&
            middle + range < text.length &&
            text[middle - range] === text[middle + range]) {
            range++;
        }
        map[middle] = range;
        index++;
        while (index < middle + range - 1) { }
    }
    console.log(map);
    return true;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(longestPalindrome("cbbd"), "bb");
assert_1.default.strictEqual(longestPalindrome("abacddc"), "cddc");
Manacher("1234");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS7mnIDplb/lm57mloflrZDkuLIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzUu5pyA6ZW/5Zue5paH5a2Q5LiyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7OztHQUdHO0FBQ0gsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQVM7SUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckI7SUFDRCxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUN0QixZQUFZO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixPQUNFLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQztnQkFDYixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7Z0JBQzVCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQy9CO2dCQUNBLElBQUksRUFBRSxDQUFDO2FBQ1I7WUFDRCxJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtnQkFDaEMsc0JBQXNCO2dCQUN0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WyIvKlxyXG7nu5nlrprkuIDkuKrlrZfnrKbkuLIgc++8jOaJvuWIsCBzIOS4reacgOmVv+eahOWbnuaWh+WtkOS4suOAguS9oOWPr+S7peWBh+iuviBzIOeahOacgOWkp+mVv+W6puS4uiAxMDAw44CCXHJcblxyXG7npLrkvosgMe+8mlxyXG5cclxu6L6T5YWlOiBcImJhYmFkXCJcclxu6L6T5Ye6OiBcImJhYlwiXHJcbuazqOaEjzogXCJhYmFcIiDkuZ/mmK/kuIDkuKrmnInmlYjnrZTmoYjjgIJcclxu56S65L6LIDLvvJpcclxuXHJcbui+k+WFpTogXCJjYmJkXCJcclxu6L6T5Ye6OiBcImJiXCJcclxuKiAqL1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHNcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxudmFyIGxvbmdlc3RQYWxpbmRyb21lID0gZnVuY3Rpb24gKHM6IHN0cmluZykge1xyXG4gIGNvbnN0IHN0ciA9IFsuLi5zXTtcclxuICBsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xyXG4gIGlmIChzdHIuam9pbihcIlwiKSA9PT0gc3RyLnJldmVyc2UoKS5qb2luKFwiXCIpKSB7XHJcbiAgICByZXR1cm4gc3RyLmpvaW4oXCJcIik7XHJcbiAgfVxyXG4gIHN0ci5mb3JFYWNoKCh2LCBpLCBhKSA9PiB7XHJcbiAgICAvLyAxMjMzMjEg5qC85byPXHJcbiAgICBpZiAodiA9PT0gYVtpICsgMV0pIHtcclxuICAgICAgbGV0IHRlbXAgPSAxO1xyXG4gICAgICB3aGlsZSAoXHJcbiAgICAgICAgaSAtIHRlbXAgPj0gMCAmJlxyXG4gICAgICAgIGkgKyAxICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEgJiZcclxuICAgICAgICBhW2kgKyAxICsgdGVtcF0gPT09IGFbaSAtIHRlbXBdXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRlbXArKztcclxuICAgICAgfVxyXG4gICAgICB0ZW1wLS07XHJcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMiArIDIgKiB0ZW1wKSB7XHJcbiAgICAgICAgLy8g6L+Z5Liq56ys5LiA5LiqIDIg5pS55oiQMSDnq5/nhLbkuI3kvJrmnInplJnor69cclxuICAgICAgICByZXN1bHQgPSBhLnNsaWNlKGkgLSB0ZW1wLCBpICsgMSArIHRlbXAgKyAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gMTIzMjEg5qC85byPXHJcbiAgICBpZiAoYVtpICsgMV0gPT09IGFbaSAtIDFdKSB7XHJcbiAgICAgIGxldCB0ZW1wID0gMTtcclxuICAgICAgd2hpbGUgKFxyXG4gICAgICAgIGkgLSB0ZW1wID49IDAgJiZcclxuICAgICAgICBpICsgdGVtcCA8PSBhLmxlbmd0aCAtIDEgJiZcclxuICAgICAgICBhW2kgKyB0ZW1wXSA9PT0gYVtpIC0gdGVtcF1cclxuICAgICAgKSB7XHJcbiAgICAgICAgdGVtcCsrO1xyXG4gICAgICB9XHJcbiAgICAgIHRlbXAtLTtcclxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxICsgMiAqIHRlbXApIHtcclxuICAgICAgICByZXN1bHQgPSBhLnNsaWNlKGkgLSB0ZW1wLCBpICsgdGVtcCArIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpIHx8IHN0clswXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiB0b2RvXHJcbiAqIE1hbmFjaGVy566X5rOVXHJcbiAqIOaXtumXtOWkjeadguW6puS4uiBPKG4pXHJcbiAqICovXHJcbmZ1bmN0aW9uIE1hbmFjaGVyKHM6IHN0cmluZykge1xyXG4gIC8vIOa3u+WKoOWcqOavj+S4quWtl+espuS4remXtOa3u+WKoCAjIOWwhuWtl+espuS4sumalOW8gFxyXG4gIC8vIOWwseiDveWwhiDmiYDmnIkgMTIyMSDov5nmoLfnmoQg6L2s5YyW5Li6IDEjMiMyIzEg5bCx5Y+v5LulIOWQjCAxMjEg6L+Z5qC35qC85byP5LiA5qC35aSE55CGXHJcbiAgbGV0IHRleHQgPSBcIlwiO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgIHRleHQgKz0gc1tpXSArIFwiI1wiO1xyXG4gIH1cclxuICB0ZXh0ICs9IHNbcy5sZW5ndGggLSAxXTtcclxuXHJcbiAgLy8g5LuO5bem5ZCR5Y+zIOS4reW/g+aLk+WxleWIpOaWreaYr+S4jeaYryDlm57mlodcclxuICBsZXQgaW5kZXggPSAwO1xyXG4gIGNvbnN0IG1hcDogbnVtYmVyW10gPSBbXTtcclxuICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xyXG4gICAgY29uc3QgbWlkZGxlID0gaW5kZXg7XHJcbiAgICAvLyBpZiAodGV4dFttaWRkbGVdID09PSBcIiNcIil7XHJcbiAgICAvLyAgICAgaW5kZXgrKztcclxuICAgIC8vICAgICBjb250aW51ZVxyXG4gICAgLy8gfVxyXG5cclxuICAgIGxldCByYW5nZSA9IDE7XHJcbiAgICB3aGlsZSAoXHJcbiAgICAgIG1pZGRsZSAtIHJhbmdlID4gMCAmJlxyXG4gICAgICBtaWRkbGUgKyByYW5nZSA8IHRleHQubGVuZ3RoICYmXHJcbiAgICAgIHRleHRbbWlkZGxlIC0gcmFuZ2VdID09PSB0ZXh0W21pZGRsZSArIHJhbmdlXVxyXG4gICAgKSB7XHJcbiAgICAgIHJhbmdlKys7XHJcbiAgICB9XHJcbiAgICBtYXBbbWlkZGxlXSA9IHJhbmdlO1xyXG4gICAgaW5kZXgrKztcclxuICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSArIHJhbmdlIC0gMSkge31cclxuICB9XHJcbiAgY29uc29sZS5sb2cobWFwKTtcclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKGxvbmdlc3RQYWxpbmRyb21lKFwiY2JiZFwiKSwgXCJiYlwiKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGxvbmdlc3RQYWxpbmRyb21lKFwiYWJhY2RkY1wiKSwgXCJjZGRjXCIpO1xyXG5cclxuTWFuYWNoZXIoXCIxMjM0XCIpO1xyXG4iXX0=