"use strict";
/*
颠倒给定的 32 位无符号整数的二进制位。



示例 1：

输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
示例 2：

输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
      因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。


提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。


进阶:
如果多次调用这个函数，你将如何优化你的算法？
* */
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {number} n - a positive integer
 * @return {number} - a positive integer
 */
/**
 * 由于所有 js 的 数字都是有符号位 但是又没有 无符号左移的操作 所以 这里是不能正确 执行 二进制 末尾 是 1 的数字
 * */
var reverseBits = function (n) {
  let result = 0;
  let i = 32; // 共 32位
  while (i--) {
    result <<= 1; // 左移一位
    // n & 1 : 就取 最后一位二进制的数
    // 然后 把最后一位 加到 result 的最左边
    result += n & 1;
    // 右移一位 去掉原来的最后一位
    n >>>= 1;
  }
  return result;
};
var reverseBits2 = function (n) {
  return parseInt(
    n.toString(2).padStart(32, "0").split("").reverse().join(""),
    2
  );
};
/**
 * 数学方法 10进制 转 2进制 然后手动操作位数
 * */
var reverseBits3 = function (n) {
  let nums = new Array(32).fill(0);
  let count = 0;
  while (n) {
    nums[count] = n % 2;
    count += 1;
    n = Math.trunc(n / 2);
  }
  let num = nums.join("");
  return Number.parseInt(num, 2);
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(reverseBits(1), -2147483648);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLumioOWAkuS6jOi/m+WItuS9jS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMTkwLumioOWAkuS6jOi/m+WItuS9jS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTJCSTs7Ozs7QUFFSjs7O0dBR0c7QUFDSDs7S0FFSztBQUNMLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBUztJQUNuQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRO0lBQ3BCLE9BQU8sQ0FBQyxFQUFFLEVBQUU7UUFDVixNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTztRQUNyQix1QkFBdUI7UUFDdkIsMEJBQTBCO1FBQzFCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLGlCQUFpQjtRQUNqQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixJQUFJLFlBQVksR0FBRyxVQUFVLENBQVM7SUFDcEMsT0FBTyxRQUFRLENBQ2IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQzVELENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7O0tBRUs7QUFDTCxJQUFJLFlBQVksR0FBRyxVQUFVLENBQVM7SUFDcEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNYLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN2QjtJQUNELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEIsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu6aKg5YCS57uZ5a6a55qEIDMyIOS9jeaXoOespuWPt+aVtOaVsOeahOS6jOi/m+WItuS9jeOAglxuXG5cblxu56S65L6LIDHvvJpcblxu6L6T5YWlOiAwMDAwMDAxMDEwMDEwMTAwMDAwMTExMTAxMDAxMTEwMFxu6L6T5Ye6OiAwMDExMTAwMTAxMTExMDAwMDAxMDEwMDEwMTAwMDAwMFxu6Kej6YeKOiDovpPlhaXnmoTkuozov5vliLbkuLIgMDAwMDAwMTAxMDAxMDEwMDAwMDExMTEwMTAwMTExMDAg6KGo56S65peg56ym5Y+35pW05pWwIDQzMjYxNTk277yMXG4gICAgICDlm6DmraTov5Tlm54gOTY0MTc2MTky77yM5YW25LqM6L+b5Yi26KGo56S65b2i5byP5Li6IDAwMTExMDAxMDExMTEwMDAwMDEwMTAwMTAxMDAwMDAw44CCXG7npLrkvosgMu+8mlxuXG7ovpPlhaXvvJoxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEwMVxu6L6T5Ye677yaMTAxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTFcbuino+mHiu+8mui+k+WFpeeahOS6jOi/m+WItuS4siAxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEwMSDooajnpLrml6DnrKblj7fmlbTmlbAgNDI5NDk2NzI5M++8jFxuICAgICAg5Zug5q2k6L+U5ZueIDMyMjEyMjU0NzEg5YW25LqM6L+b5Yi26KGo56S65b2i5byP5Li6IDEwMTAxMTExMTEwMDEwMTEwMDEwMDExMTAxMTAxMDAx44CCXG5cblxu5o+Q56S677yaXG5cbuivt+azqOaEj++8jOWcqOafkOS6m+ivreiogO+8iOWmgiBKYXZh77yJ5Lit77yM5rKh5pyJ5peg56ym5Y+35pW05pWw57G75Z6L44CC5Zyo6L+Z56eN5oOF5Ya15LiL77yM6L6T5YWl5ZKM6L6T5Ye66YO95bCG6KKr5oyH5a6a5Li65pyJ56ym5Y+35pW05pWw57G75Z6L77yM5bm25LiU5LiN5bqU5b2x5ZON5oKo55qE5a6e546w77yM5Zug5Li65peg6K665pW05pWw5piv5pyJ56ym5Y+355qE6L+Y5piv5peg56ym5Y+355qE77yM5YW25YaF6YOo55qE5LqM6L+b5Yi26KGo56S65b2i5byP6YO95piv55u45ZCM55qE44CCXG7lnKggSmF2YSDkuK3vvIznvJbor5Hlmajkvb/nlKjkuozov5vliLbooaXnoIHorrDms5XmnaXooajnpLrmnInnrKblj7fmlbTmlbDjgILlm6DmraTvvIzlnKjkuIrpnaLnmoQg56S65L6LIDIg5Lit77yM6L6T5YWl6KGo56S65pyJ56ym5Y+35pW05pWwIC0z77yM6L6T5Ye66KGo56S65pyJ56ym5Y+35pW05pWwIC0xMDczNzQxODI144CCXG5cblxu6L+b6Zi2Olxu5aaC5p6c5aSa5qyh6LCD55So6L+Z5Liq5Ye95pWw77yM5L2g5bCG5aaC5L2V5LyY5YyW5L2g55qE566X5rOV77yfXG4qICovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG4gLSBhIHBvc2l0aXZlIGludGVnZXJcbiAqIEByZXR1cm4ge251bWJlcn0gLSBhIHBvc2l0aXZlIGludGVnZXJcbiAqL1xuLyoqXG4gKiDnlLHkuo7miYDmnIkganMg55qEIOaVsOWtl+mDveaYr+acieespuWPt+S9jSDkvYbmmK/lj4jmsqHmnIkg5peg56ym5Y+35bem56e755qE5pON5L2cIOaJgOS7pSDov5nph4zmmK/kuI3og73mraPnoa4g5omn6KGMIOS6jOi/m+WItiDmnKvlsL4g5pivIDEg55qE5pWw5a2XXG4gKiAqL1xudmFyIHJldmVyc2VCaXRzID0gZnVuY3Rpb24gKG46IG51bWJlcikge1xuICBsZXQgcmVzdWx0ID0gMDtcbiAgbGV0IGkgPSAzMjsgLy8g5YWxIDMy5L2NXG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXN1bHQgPDw9IDE7IC8vIOW3puenu+S4gOS9jVxuICAgIC8vIG4gJiAxIDog5bCx5Y+WIOacgOWQjuS4gOS9jeS6jOi/m+WItueahOaVsFxuICAgIC8vIOeEtuWQjiDmiormnIDlkI7kuIDkvY0g5Yqg5YiwIHJlc3VsdCDnmoTmnIDlt6bovrlcbiAgICByZXN1bHQgKz0gbiAmIDE7XG4gICAgLy8g5Y+z56e75LiA5L2NIOWOu+aOieWOn+adpeeahOacgOWQjuS4gOS9jVxuICAgIG4gPj4+PSAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgcmV2ZXJzZUJpdHMyID0gZnVuY3Rpb24gKG46IG51bWJlcikge1xuICByZXR1cm4gcGFyc2VJbnQoXG4gICAgbi50b1N0cmluZygyKS5wYWRTdGFydCgzMiwgXCIwXCIpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpLFxuICAgIDJcbiAgKTtcbn07XG5cbi8qKlxuICog5pWw5a2m5pa55rOVIDEw6L+b5Yi2IOi9rCAy6L+b5Yi2IOeEtuWQjuaJi+WKqOaTjeS9nOS9jeaVsFxuICogKi9cbnZhciByZXZlcnNlQml0czMgPSBmdW5jdGlvbiAobjogbnVtYmVyKSB7XG4gIGxldCBudW1zID0gbmV3IEFycmF5KDMyKS5maWxsKDApO1xuICBsZXQgY291bnQgPSAwO1xuICB3aGlsZSAobikge1xuICAgIG51bXNbY291bnRdID0gbiAlIDI7XG4gICAgY291bnQgKz0gMTtcbiAgICBuID0gTWF0aC50cnVuYyhuIC8gMik7XG4gIH1cbiAgbGV0IG51bSA9IG51bXMuam9pbihcIlwiKTtcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChudW0sIDIpO1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChyZXZlcnNlQml0cygxKSwgLTIxNDc0ODM2NDgpO1xuIl19
