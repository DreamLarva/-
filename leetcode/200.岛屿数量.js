"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands1 = function (grid) {
    // 深度优先
    // 遍历整个二维数组
    let lands = 0;
    for (let y = 0; y < grid.length; y++) {
        for (let x = 0; x < grid[y].length; x++) {
            if (grid[y][x] === "1") {
                // 如果有 1 则有一个陆地
                lands++;
                // 然后将所有与它相邻的 1 都置为 0
                setWater(x, y);
            }
        }
    }
    return lands;
    function setWater(x, y) {
        if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length)
            return;
        if (grid[y][x] === "0")
            return;
        grid[y][x] = "0";
        // 上
        setWater(x, y - 1);
        // 右
        setWater(x + 1, y);
        // 下
        setWater(x, y + 1);
        // 左
        setWater(x - 1, y);
    }
};
var numIslands2 = function (grid) {
    // 广度优先优先
    // 遍历整个二维数组
    let lands = 0;
    for (let y = 0; y < grid.length; y++) {
        for (let x = 0; x < grid[y].length; x++) {
            if (grid[y][x] === "1") {
                // 如果有 1 则有一个陆地
                lands++;
                // 然后将所有与它相邻的 1 都置为 0
                setWater(x, y);
            }
        }
    }
    return lands;
    function setWater(x, y) {
        const list = [[x, y]];
        while (list.length) {
            const [x, y] = list.shift();
            if (x < 0 || y < 0 || y >= grid.length || x >= grid[y].length)
                continue;
            if (grid[y][x] === "0")
                continue;
            grid[y][x] = "0";
            // 上
            list.push([x, y - 1]);
            // 右
            list.push([x + 1, y]);
            // 下
            list.push([x, y + 1]);
            // 左
            list.push([x - 1, y]);
        }
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(numIslands1([
    ["1", "1", "1", "1", "0"],
    ["1", "1", "0", "1", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "0", "0", "0"],
]), 1);
assert_1.default.strictEqual(numIslands1([
    ["1", "1", "1"],
    ["0", "1", "0"],
    ["1", "1", "1"],
]), 1);
assert_1.default.strictEqual(numIslands2([
    ["1", "1", "1", "1", "0"],
    ["1", "1", "0", "1", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "0", "0", "0"],
]), 1);
assert_1.default.strictEqual(numIslands2([
    ["1", "1", "1"],
    ["0", "1", "0"],
    ["1", "1", "1"],
]), 1);
const benchmark_1 = __importDefault(require("benchmark"));
const suite = new benchmark_1.default.Suite();
const sample = [
    ["1", "1", "1", "1", "0"],
    ["1", "1", "0", "1", "0"],
    ["1", "1", "0", "0", "0"],
    ["0", "0", "0", "0", "0"],
];
suite
    .add("dfs", function () {
    numIslands1(sample);
})
    .add("bfs", function () {
    numIslands2(sample);
})
    .on("cycle", function (event) {
    console.log(String(event.target));
})
    .on("complete", function () {
    // console.log('Fastest is ' + this.filter('fastest').map( 'name'));
})
    // run async
    .run({ async: false });
//# sourceMappingURL=data:application/json;base64,