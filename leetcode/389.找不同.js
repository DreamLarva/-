"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定两个字符串 s 和 t，它们只包含小写字母。

字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。

请找出在 t 中被添加的字母。



示例:

输入：
s = "abcd"
t = "abcde"

输出：
e

解释：
'e' 是那个被添加的字母。
* */
/**
 * @param {string} s
 * @param {string} t
 * @return {character}
 */
var findTheDifference1 = function (s, t) {
  let temp = 0;
  // 将 字符中串的为 转化成 数字的问题
  for (const char of t) {
    temp += char.charCodeAt(0);
  }
  for (const char of s) {
    temp -= char.charCodeAt(0);
  }
  return String.fromCharCode(temp);
};
var findTheDifference2 = function (s, t) {
  let temp = 0;
  // 将 字符中串的为 转化成 数字的问题
  for (const char of t) {
    temp ^= char.charCodeAt(0);
  }
  for (const char of s) {
    temp ^= char.charCodeAt(0);
  }
  return String.fromCharCode(temp);
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(findTheDifference1("abcd", "abcde"), "e");
assert_1.default.strictEqual(findTheDifference1("", "a"), "a");
assert_1.default.strictEqual(findTheDifference2("abcd", "abcde"), "e");
assert_1.default.strictEqual(findTheDifference2("", "a"), "a");
const benchmark_1 = __importDefault(require("benchmark"));
const suite = new benchmark_1.default.Suite();
suite
  .add("+", function () {
    findTheDifference1("abcd", "abcde");
  })
  .add("^", function () {
    findTheDifference2("abcd", "abcde");
  })
  .on("cycle", function (event) {
    console.log(String(event.target));
  })
  .on("complete", function () {
    // console.log('Fastest is ' + this.filter('fastest').map( 'name'));
  })
  // run async
  .run({ async: false });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5LuaJvuS4jeWQjC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMzg5LuaJvuS4jeWQjC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW9CSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLGtCQUFrQixHQUFHLFVBQVUsQ0FBUyxFQUFFLENBQVM7SUFDbkQsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2IscUJBQXFCO0lBQ3JCLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ2xCLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUU7UUFDbEIsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFFRCxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUYsSUFBSSxrQkFBa0IsR0FBRyxVQUFVLENBQVMsRUFBRSxDQUFTO0lBQ25ELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLHFCQUFxQjtJQUNyQixLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsRUFBRTtRQUNsQixJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUVELEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ2xCLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzlCO0lBRUQsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUdGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLFdBQVcsQ0FDZCxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ25DLEdBQUcsQ0FDTixDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2Qsa0JBQWtCLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUMzQixHQUFHLENBQ04sQ0FBQztBQUNGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDbkMsR0FBRyxDQUNOLENBQUM7QUFDRixnQkFBTSxDQUFDLFdBQVcsQ0FDZCxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQzNCLEdBQUcsQ0FDTixDQUFDO0FBRUYsMERBQWtDO0FBRWxDLE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQVMsQ0FBQyxLQUFLLENBQUM7QUFDbEMsS0FBSztLQUNBLEdBQUcsQ0FBQyxHQUFHLEVBQUU7SUFDTixrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxDQUFDO0tBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRTtJQUNOLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUM7S0FDRCxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsS0FBc0I7SUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0tBQ0QsRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUNaLG9FQUFvRTtBQUN4RSxDQUFDLENBQUM7SUFDRixZQUFZO0tBQ1gsR0FBRyxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG7nu5nlrprkuKTkuKrlrZfnrKbkuLIgcyDlkowgdO+8jOWug+S7rOWPquWMheWQq+Wwj+WGmeWtl+avjeOAglxyXG5cclxu5a2X56ym5LiyIHQg55Sx5a2X56ym5LiyIHMg6ZqP5py66YeN5o6S77yM54S25ZCO5Zyo6ZqP5py65L2N572u5re75Yqg5LiA5Liq5a2X5q+N44CCXHJcblxyXG7or7fmib7lh7rlnKggdCDkuK3ooqvmt7vliqDnmoTlrZfmr43jgIJcclxuXHJcblxyXG5cclxu56S65L6LOlxyXG5cclxu6L6T5YWl77yaXHJcbnMgPSBcImFiY2RcIlxyXG50ID0gXCJhYmNkZVwiXHJcblxyXG7ovpPlh7rvvJpcclxuZVxyXG5cclxu6Kej6YeK77yaXHJcbidlJyDmmK/pgqPkuKrooqvmt7vliqDnmoTlrZfmr43jgIJcclxuKiAqL1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHNcclxuICogQHBhcmFtIHtzdHJpbmd9IHRcclxuICogQHJldHVybiB7Y2hhcmFjdGVyfVxyXG4gKi9cclxudmFyIGZpbmRUaGVEaWZmZXJlbmNlMSA9IGZ1bmN0aW9uIChzOiBzdHJpbmcsIHQ6IHN0cmluZykge1xyXG4gICAgbGV0IHRlbXAgPSAwO1xyXG4gICAgLy8g5bCGIOWtl+espuS4reS4sueahOS4uiDovazljJbmiJAg5pWw5a2X55qE6Zeu6aKYXHJcbiAgICBmb3IgKGNvbnN0IGNoYXIgb2YgdCkge1xyXG4gICAgICAgIHRlbXAgKz0gY2hhci5jaGFyQ29kZUF0KDApO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgY2hhciBvZiBzKSB7XHJcbiAgICAgICAgdGVtcCAtPSBjaGFyLmNoYXJDb2RlQXQoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGVtcCk7XHJcbn07XHJcblxyXG52YXIgZmluZFRoZURpZmZlcmVuY2UyID0gZnVuY3Rpb24gKHM6IHN0cmluZywgdDogc3RyaW5nKSB7XHJcbiAgICBsZXQgdGVtcCA9IDA7XHJcbiAgICAvLyDlsIYg5a2X56ym5Lit5Liy55qE5Li6IOi9rOWMluaIkCDmlbDlrZfnmoTpl67pophcclxuICAgIGZvciAoY29uc3QgY2hhciBvZiB0KSB7XHJcbiAgICAgICAgdGVtcCBePSBjaGFyLmNoYXJDb2RlQXQoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBjaGFyIG9mIHMpIHtcclxuICAgICAgICB0ZW1wIF49IGNoYXIuY2hhckNvZGVBdCgwKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0ZW1wKTtcclxufTtcclxuXHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcclxuXHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIGZpbmRUaGVEaWZmZXJlbmNlMShcImFiY2RcIiwgXCJhYmNkZVwiKSxcclxuICAgIFwiZVwiLFxyXG4pO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICBmaW5kVGhlRGlmZmVyZW5jZTEoXCJcIiwgXCJhXCIpLFxyXG4gICAgXCJhXCIsXHJcbik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIGZpbmRUaGVEaWZmZXJlbmNlMihcImFiY2RcIiwgXCJhYmNkZVwiKSxcclxuICAgIFwiZVwiLFxyXG4pO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICBmaW5kVGhlRGlmZmVyZW5jZTIoXCJcIiwgXCJhXCIpLFxyXG4gICAgXCJhXCIsXHJcbik7XHJcblxyXG5pbXBvcnQgQmVuY2htYXJrIGZyb20gXCJiZW5jaG1hcmtcIjtcclxuXHJcbmNvbnN0IHN1aXRlID0gbmV3IEJlbmNobWFyay5TdWl0ZTtcclxuc3VpdGVcclxuICAgIC5hZGQoJysnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZmluZFRoZURpZmZlcmVuY2UxKFwiYWJjZFwiLCBcImFiY2RlXCIpO1xyXG4gICAgfSlcclxuICAgIC5hZGQoJ14nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZmluZFRoZURpZmZlcmVuY2UyKFwiYWJjZFwiLCBcImFiY2RlXCIpO1xyXG4gICAgfSlcclxuICAgIC5vbignY3ljbGUnLCBmdW5jdGlvbiAoZXZlbnQ6IEJlbmNobWFyay5FdmVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFN0cmluZyhldmVudC50YXJnZXQpKTtcclxuICAgIH0pXHJcbiAgICAub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24gKHRoaXM6IEJlbmNobWFyay5TdWl0ZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdGYXN0ZXN0IGlzICcgKyB0aGlzLmZpbHRlcignZmFzdGVzdCcpLm1hcCggJ25hbWUnKSk7XHJcbiAgICB9KVxyXG4gICAgLy8gcnVuIGFzeW5jXHJcbiAgICAucnVuKHsnYXN5bmMnOiBmYWxzZX0pO1xyXG4iXX0=
