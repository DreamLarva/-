"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:

输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
示例 2:

输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4
说明:

你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/kth-largest-element-in-an-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
const lodash_1 = __importDefault(require("lodash"));
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function (nums, k) {
    /**
     * 方法一 不断的堆化(求第k大的值 用**最小堆**) 并且保持 一定的长度(k)
     * 慢的一b
     * */
    const minHeap = [];
    for (let i = 0; i < nums.length; i++) {
        // 优化 如果小于顶部 就直接 过
        if (minHeap.length === k && nums[i] < minHeap[0])
            continue;
        minHeap.push(nums[i]);
        heapifyWithSiftDown(minHeap);
        if (minHeap.length > k) {
            minHeap.shift();
        }
    }
    // 还必须再堆化一次 使最小值 在第一个
    heapifyWithSiftDown(minHeap);
    return minHeap[0];
    function heapifyWithSiftDown(A) {
        // 初始选择最接近叶子的一个父结点
        for (let i = Math.floor((A.length - 1) / 2); i >= 0; i--) {
            siftDown(A, i);
        }
        return A;
    }
    function siftDown(A, k) {
        // 此处是 最小堆
        while (k * 2 + 1 < A.length) {
            let son = k * 2 + 1;
            // 与其两个儿子中较小的一个比较
            if (k * 2 + 2 < A.length && A[son] > A[k * 2 + 2]) {
                son = k * 2 + 2;
            }
            // 若大于儿子，则与儿子交换。
            if (A[son] > A[k]) {
                break;
            }
            [A[son], A[k]] = [A[k], A[son]];
            // 交换后再与新的儿子比较并交换，直至没有儿子。
            k = son;
        }
    }
};
var findKthLargest_1 = function (nums, k) {
    /**
     * 方法二 快速选择法(Hoare 选择法)
     * */
    const size = nums.length;
    return quickSelect(0, size - 1, size - k);
    function partition(left, right, pivot_index) {
        let pivot = nums[pivot_index];
        // 现将 枢轴 换到末尾 方便 操作
        [nums[pivot_index], nums[right]] = [nums[right], nums[pivot_index]];
        // 存储 枢轴新的位置
        let store_index = left;
        // 枢轴的值 放到左边
        for (let i = left; i <= right; i++) {
            if (nums[i] < pivot) {
                [nums[store_index], nums[i]] = [nums[i], nums[store_index]];
                store_index++;
            }
        }
        // 将在最末尾的枢轴的值 放到新的位置
        [nums[store_index], nums[right]] = [nums[right], nums[store_index]];
        return store_index;
    }
    function quickSelect(left, right, k_smallest) {
        // 如果 左右为 同一个值 那么说明 只有一个值 不需要再选择了
        if (left === right) {
            return nums[left];
        }
        // 随机 用一个值作为 index 作为枢轴 并且返回 枢轴的 index
        let pivot_index = partition(left, right, lodash_1.default.random(left, right - 1)); // lodash 的 random 是含头 含尾的
        if (k_smallest === pivot_index)
            return nums[k_smallest];
        // 如果 枢轴的 index 小于 k_smallest 说明 值 还在有枢轴的右侧
        else if (k_smallest < pivot_index)
            return quickSelect(left, pivot_index - 1, k_smallest);
        // 如果 枢轴的 index 大于 k_smallest 说明 值 还在有枢轴的左侧
        return quickSelect(pivot_index + 1, right, k_smallest);
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(findKthLargest([3, 2, 1, 5, 6, 4], 2), 5);
assert_1.default.strictEqual(findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4);
assert_1.default.strictEqual(findKthLargest_1([3, 2, 1, 5, 6, 4], 2), 5);
assert_1.default.strictEqual(findKthLargest_1([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE1LuaVsOe7hOS4reeahOesrEvkuKrmnIDlpKflhYPntKAuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzIxNS7mlbDnu4TkuK3nmoTnrKxL5Liq5pyA5aSn5YWD57SgLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWtCSTtBQUNKLG9EQUF1QjtBQUV2Qjs7OztHQUlHO0FBQ0gsSUFBSSxjQUFjLEdBQUcsVUFBVSxJQUFjLEVBQUUsQ0FBUztJQUNwRDs7O1NBR0s7SUFDTCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsa0JBQWtCO1FBQ2xCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFBRSxTQUFTO1FBQzNELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDbkI7S0FDSjtJQUNELHFCQUFxQjtJQUNyQixtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQixTQUFTLG1CQUFtQixDQUFDLENBQVc7UUFDcEMsa0JBQWtCO1FBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0RCxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsU0FBUyxRQUFRLENBQUMsQ0FBVyxFQUFFLENBQVM7UUFDcEMsVUFBVTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQixpQkFBaUI7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDL0MsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ25CO1lBRUQsZ0JBQWdCO1lBQ2hCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDZixNQUFNO2FBQ1Q7WUFDRCxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNoQyx5QkFBeUI7WUFDekIsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNYO0lBQ0wsQ0FBQztBQUdMLENBQUMsQ0FBQztBQUVGLElBQUksZ0JBQWdCLEdBQUcsVUFBVSxJQUFjLEVBQUUsQ0FBUztJQUN0RDs7U0FFSztJQUNMLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRTFDLFNBQVMsU0FBUyxDQUFDLElBQVksRUFBRSxLQUFhLEVBQUUsV0FBbUI7UUFDL0QsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlCLG1CQUFtQjtRQUNuQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNwRSxZQUFZO1FBQ1osSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRXZCLFlBQVk7UUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRTtnQkFDakIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELFdBQVcsRUFBRSxDQUFDO2FBQ2pCO1NBQ0o7UUFDRCxvQkFBb0I7UUFDcEIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDcEUsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUVELFNBQVMsV0FBVyxDQUFDLElBQVksRUFBRSxLQUFhLEVBQUUsVUFBa0I7UUFDaEUsaUNBQWlDO1FBQ2pDLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUNELHNDQUFzQztRQUN0QyxJQUFJLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxnQkFBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7UUFFL0YsSUFBSSxVQUFVLEtBQUssV0FBVztZQUFFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELDJDQUEyQzthQUN0QyxJQUFJLFVBQVUsR0FBRyxXQUFXO1lBQUUsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDekYsMkNBQTJDO1FBQzNDLE9BQU8sV0FBVyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTNELENBQUM7QUFHTCxDQUFDLENBQUM7QUFFRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDckMsQ0FBQyxDQUNKLENBQUM7QUFDRixnQkFBTSxDQUFDLFdBQVcsQ0FDZCxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUM5QyxDQUFDLENBQ0osQ0FBQztBQUNGLGdCQUFNLENBQUMsV0FBVyxDQUNkLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDdkMsQ0FBQyxDQUNKLENBQUM7QUFDRixnQkFBTSxDQUFDLFdBQVcsQ0FDZCxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ2hELENBQUMsQ0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxu5Zyo5pyq5o6S5bqP55qE5pWw57uE5Lit5om+5Yiw56ysIGsg5Liq5pyA5aSn55qE5YWD57Sg44CC6K+35rOo5oSP77yM5L2g6ZyA6KaB5om+55qE5piv5pWw57uE5o6S5bqP5ZCO55qE56ysIGsg5Liq5pyA5aSn55qE5YWD57Sg77yM6ICM5LiN5piv56ysIGsg5Liq5LiN5ZCM55qE5YWD57Sg44CCXHJcblxyXG7npLrkvosgMTpcclxuXHJcbui+k+WFpTogWzMsMiwxLDUsNiw0XSDlkowgayA9IDJcclxu6L6T5Ye6OiA1XHJcbuekuuS+i8KgMjpcclxuXHJcbui+k+WFpTogWzMsMiwzLDEsMiw0LDUsNSw2XSDlkowgayA9IDRcclxu6L6T5Ye6OiA0XHJcbuivtOaYjjpcclxuXHJcbuS9oOWPr+S7peWBh+iuviBrIOaAu+aYr+acieaViOeahO+8jOS4lCAxIOKJpCBrIOKJpCDmlbDnu4TnmoTplb/luqbjgIJcclxuXHJcbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXHJcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL2t0aC1sYXJnZXN0LWVsZW1lbnQtaW4tYW4tYXJyYXlcclxu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXHJcbiogKi9cclxuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyW119IG51bXNcclxuICogQHBhcmFtIHtudW1iZXJ9IGtcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIGZpbmRLdGhMYXJnZXN0ID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCBrOiBudW1iZXIpIHtcclxuICAgIC8qKlxyXG4gICAgICog5pa55rOV5LiAIOS4jeaWreeahOWghuWMlijmsYLnrKxr5aSn55qE5YC8IOeUqCoq5pyA5bCP5aCGKiopIOW5tuS4lOS/neaMgSDkuIDlrprnmoTplb/luqYoaylcclxuICAgICAqIOaFoueahOS4gGJcclxuICAgICAqICovXHJcbiAgICBjb25zdCBtaW5IZWFwID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyDkvJjljJYg5aaC5p6c5bCP5LqO6aG26YOoIOWwseebtOaOpSDov4dcclxuICAgICAgICBpZiAobWluSGVhcC5sZW5ndGggPT09IGsgJiYgbnVtc1tpXSA8IG1pbkhlYXBbMF0pIGNvbnRpbnVlO1xyXG4gICAgICAgIG1pbkhlYXAucHVzaChudW1zW2ldKTtcclxuICAgICAgICBoZWFwaWZ5V2l0aFNpZnREb3duKG1pbkhlYXApO1xyXG4gICAgICAgIGlmIChtaW5IZWFwLmxlbmd0aCA+IGspIHtcclxuICAgICAgICAgICAgbWluSGVhcC5zaGlmdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOi/mOW/hemhu+WGjeWghuWMluS4gOasoSDkvb/mnIDlsI/lgLwg5Zyo56ys5LiA5LiqXHJcbiAgICBoZWFwaWZ5V2l0aFNpZnREb3duKG1pbkhlYXApO1xyXG4gICAgcmV0dXJuIG1pbkhlYXBbMF07XHJcblxyXG4gICAgZnVuY3Rpb24gaGVhcGlmeVdpdGhTaWZ0RG93bihBOiBudW1iZXJbXSkge1xyXG4gICAgICAgIC8vIOWIneWni+mAieaLqeacgOaOpei/keWPtuWtkOeahOS4gOS4queItue7k+eCuVxyXG4gICAgICAgIGZvciAobGV0IGkgPSBNYXRoLmZsb29yKChBLmxlbmd0aCAtIDEpIC8gMik7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHNpZnREb3duKEEsIGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIEE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2lmdERvd24oQTogbnVtYmVyW10sIGs6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOatpOWkhOaYryDmnIDlsI/loIZcclxuICAgICAgICB3aGlsZSAoayAqIDIgKyAxIDwgQS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IHNvbiA9IGsgKiAyICsgMTtcclxuICAgICAgICAgICAgLy8g5LiO5YW25Lik5Liq5YS/5a2Q5Lit6L6D5bCP55qE5LiA5Liq5q+U6L6DXHJcbiAgICAgICAgICAgIGlmIChrICogMiArIDIgPCBBLmxlbmd0aCAmJiBBW3Nvbl0gPiBBW2sgKiAyICsgMl0pIHtcclxuICAgICAgICAgICAgICAgIHNvbiA9IGsgKiAyICsgMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g6Iul5aSn5LqO5YS/5a2Q77yM5YiZ5LiO5YS/5a2Q5Lqk5o2i44CCXHJcbiAgICAgICAgICAgIGlmIChBW3Nvbl0gPiBBW2tdKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBbQVtzb25dLCBBW2tdXSA9IFtBW2tdLCBBW3Nvbl1dO1xyXG4gICAgICAgICAgICAvLyDkuqTmjaLlkI7lho3kuI7mlrDnmoTlhL/lrZDmr5TovoPlubbkuqTmjaLvvIznm7Toh7PmsqHmnInlhL/lrZDjgIJcclxuICAgICAgICAgICAgayA9IHNvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxufTtcclxuXHJcbnZhciBmaW5kS3RoTGFyZ2VzdF8xID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCBrOiBudW1iZXIpIHtcclxuICAgIC8qKlxyXG4gICAgICog5pa55rOV5LqMIOW/q+mAn+mAieaLqeazlShIb2FyZSDpgInmi6nms5UpXHJcbiAgICAgKiAqL1xyXG4gICAgY29uc3Qgc2l6ZSA9IG51bXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHF1aWNrU2VsZWN0KDAsIHNpemUgLSAxLCBzaXplIC0gayk7XHJcblxyXG4gICAgZnVuY3Rpb24gcGFydGl0aW9uKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgcGl2b3RfaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBwaXZvdCA9IG51bXNbcGl2b3RfaW5kZXhdO1xyXG4gICAgICAgIC8vIOeOsOWwhiDmnqLovbQg5o2i5Yiw5pyr5bC+IOaWueS+vyDmk43kvZxcclxuICAgICAgICBbbnVtc1twaXZvdF9pbmRleF0sIG51bXNbcmlnaHRdXSA9IFtudW1zW3JpZ2h0XSwgbnVtc1twaXZvdF9pbmRleF1dO1xyXG4gICAgICAgIC8vIOWtmOWCqCDmnqLovbTmlrDnmoTkvY3nva5cclxuICAgICAgICBsZXQgc3RvcmVfaW5kZXggPSBsZWZ0O1xyXG5cclxuICAgICAgICAvLyDmnqLovbTnmoTlgLwg5pS+5Yiw5bem6L65XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGxlZnQ7IGkgPD0gcmlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobnVtc1tpXSA8IHBpdm90KSB7XHJcbiAgICAgICAgICAgICAgICBbbnVtc1tzdG9yZV9pbmRleF0sIG51bXNbaV1dID0gW251bXNbaV0sIG51bXNbc3RvcmVfaW5kZXhdXTtcclxuICAgICAgICAgICAgICAgIHN0b3JlX2luZGV4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5bCG5Zyo5pyA5pyr5bC+55qE5p6i6L2055qE5YC8IOaUvuWIsOaWsOeahOS9jee9rlxyXG4gICAgICAgIFtudW1zW3N0b3JlX2luZGV4XSwgbnVtc1tyaWdodF1dID0gW251bXNbcmlnaHRdLCBudW1zW3N0b3JlX2luZGV4XV07XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlX2luZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHF1aWNrU2VsZWN0KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwga19zbWFsbGVzdDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAvLyDlpoLmnpwg5bem5Y+z5Li6IOWQjOS4gOS4quWAvCDpgqPkuYjor7TmmI4g5Y+q5pyJ5LiA5Liq5YC8IOS4jemcgOimgeWGjemAieaLqeS6hlxyXG4gICAgICAgIGlmIChsZWZ0ID09PSByaWdodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVtc1tsZWZ0XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6ZqP5py6IOeUqOS4gOS4quWAvOS9nOS4uiBpbmRleCDkvZzkuLrmnqLovbQg5bm25LiU6L+U5ZueIOaeoui9tOeahCBpbmRleFxyXG4gICAgICAgIGxldCBwaXZvdF9pbmRleCA9IHBhcnRpdGlvbihsZWZ0LCByaWdodCwgXy5yYW5kb20obGVmdCwgcmlnaHQgLSAxKSk7IC8vIGxvZGFzaCDnmoQgcmFuZG9tIOaYr+WQq+WktCDlkKvlsL7nmoRcclxuXHJcbiAgICAgICAgaWYgKGtfc21hbGxlc3QgPT09IHBpdm90X2luZGV4KSByZXR1cm4gbnVtc1trX3NtYWxsZXN0XTtcclxuICAgICAgICAvLyDlpoLmnpwg5p6i6L2055qEIGluZGV4IOWwj+S6jiBrX3NtYWxsZXN0IOivtOaYjiDlgLwg6L+Y5Zyo5pyJ5p6i6L2055qE5Y+z5L6nXHJcbiAgICAgICAgZWxzZSBpZiAoa19zbWFsbGVzdCA8IHBpdm90X2luZGV4KSByZXR1cm4gcXVpY2tTZWxlY3QobGVmdCwgcGl2b3RfaW5kZXggLSAxLCBrX3NtYWxsZXN0KTtcclxuICAgICAgICAvLyDlpoLmnpwg5p6i6L2055qEIGluZGV4IOWkp+S6jiBrX3NtYWxsZXN0IOivtOaYjiDlgLwg6L+Y5Zyo5pyJ5p6i6L2055qE5bem5L6nXHJcbiAgICAgICAgcmV0dXJuIHF1aWNrU2VsZWN0KHBpdm90X2luZGV4ICsgMSwgcmlnaHQsIGtfc21hbGxlc3QpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59O1xyXG5cclxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgZmluZEt0aExhcmdlc3QoWzMsIDIsIDEsIDUsIDYsIDRdLCAyKSxcclxuICAgIDUsXHJcbik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIGZpbmRLdGhMYXJnZXN0KFszLCAyLCAzLCAxLCAyLCA0LCA1LCA1LCA2XSwgNCksXHJcbiAgICA0LFxyXG4pO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICBmaW5kS3RoTGFyZ2VzdF8xKFszLCAyLCAxLCA1LCA2LCA0XSwgMiksXHJcbiAgICA1LFxyXG4pO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgICBmaW5kS3RoTGFyZ2VzdF8xKFszLCAyLCAzLCAxLCAyLCA0LCA1LCA1LCA2XSwgNCksXHJcbiAgICA0LFxyXG4pO1xyXG4iXX0=