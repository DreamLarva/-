"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var findKthLargest = function (nums, k) {
    /**
     * 方法一 不断的堆化(求第k大的值 用**最小堆**) 并且保持 一定的长度(k)
     * */
    const minHeap = [];
    for (let i = 0; i < nums.length; i++) {
        minHeap.push(nums[i]);
        heapifyWithSiftDown(minHeap);
        if (minHeap.length > k) {
            minHeap.shift();
        }
    }
    heapifyWithSiftDown(minHeap);
    return minHeap[0];
    function heapifyWithSiftDown(A) {
        // 初始选择最接近叶子的一个父结点
        for (let i = Math.floor((A.length - 1) / 2); i >= 0; i--) {
            siftDown(A, i);
        }
        return A;
    }
    function siftDown(A, k) {
        // 此处是 最小堆
        while (k * 2 + 1 < A.length) {
            let son = k * 2 + 1;
            // 与其两个儿子中较小的一个比较
            if (k * 2 + 2 < A.length && A[son] > A[k * 2 + 2]) {
                son = k * 2 + 2;
            }
            // 若大于儿子，则与儿子交换。
            if (A[son] > A[k]) {
                break;
            }
            [A[son], A[k]] = [A[k], A[son]];
            // 交换后再与新的儿子比较并交换，直至没有儿子。
            k = son;
        }
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(findKthLargest([3, 2, 1, 5, 6, 4], 2), 5);
assert_1.default.strictEqual(findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4), 4);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE1LuaVsOe7hOS4reeahOesrEvkuKrmnIDlpKflhYPntKAuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzIxNS7mlbDnu4TkuK3nmoTnrKxL5Liq5pyA5aSn5YWD57SgLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBcUJBOzs7O0dBSUc7QUFDSCxJQUFJLGNBQWMsR0FBRyxVQUFVLElBQWMsRUFBRSxDQUFTO0lBQ3BEOztTQUVLO0lBQ0wsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDbkI7S0FDSjtJQUNELG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxCLFNBQVMsbUJBQW1CLENBQUMsQ0FBVztRQUNwQyxrQkFBa0I7UUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RELFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxTQUFTLFFBQVEsQ0FBQyxDQUFXLEVBQUUsQ0FBUztRQUNwQyxVQUFVO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLGlCQUFpQjtZQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUMvQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkI7WUFFRCxnQkFBZ0I7WUFDaEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNmLE1BQU07YUFDVDtZQUNELENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLHlCQUF5QjtZQUN6QixDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ1g7SUFDTCxDQUFDO0FBR0wsQ0FBQyxDQUFDO0FBRUYsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUNkLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JDLENBQUMsQ0FDSixDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDOUMsQ0FBQyxDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG7lnKjmnKrmjpLluo/nmoTmlbDnu4TkuK3mib7liLDnrKwgayDkuKrmnIDlpKfnmoTlhYPntKDjgILor7fms6jmhI/vvIzkvaDpnIDopoHmib7nmoTmmK/mlbDnu4TmjpLluo/lkI7nmoTnrKwgayDkuKrmnIDlpKfnmoTlhYPntKDvvIzogIzkuI3mmK/nrKwgayDkuKrkuI3lkIznmoTlhYPntKDjgIJcclxuXHJcbuekuuS+iyAxOlxyXG5cclxu6L6T5YWlOiBbMywyLDEsNSw2LDRdIOWSjCBrID0gMlxyXG7ovpPlh7o6IDVcclxu56S65L6LwqAyOlxyXG5cclxu6L6T5YWlOiBbMywyLDMsMSwyLDQsNSw1LDZdIOWSjCBrID0gNFxyXG7ovpPlh7o6IDRcclxu6K+05piOOlxyXG5cclxu5L2g5Y+v5Lul5YGH6K6+IGsg5oC75piv5pyJ5pWI55qE77yM5LiUIDEg4omkIGsg4omkIOaVsOe7hOeahOmVv+W6puOAglxyXG5cclxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcclxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMva3RoLWxhcmdlc3QtZWxlbWVudC1pbi1hbi1hcnJheVxyXG7okZfkvZzmnYPlvZLpoobmiaPnvZHnu5zmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vlrpjmlrnmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgIJcclxuKiAqL1xyXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xyXG4gKiBAcGFyYW0ge251bWJlcn0ga1xyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgZmluZEt0aExhcmdlc3QgPSBmdW5jdGlvbiAobnVtczogbnVtYmVyW10sIGs6IG51bWJlcikge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlrnms5XkuIAg5LiN5pat55qE5aCG5YyWKOaxguesrGvlpKfnmoTlgLwg55SoKirmnIDlsI/loIYqKikg5bm25LiU5L+d5oyBIOS4gOWumueahOmVv+W6pihrKVxyXG4gICAgICogKi9cclxuICAgIGNvbnN0IG1pbkhlYXAgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1pbkhlYXAucHVzaChudW1zW2ldKTtcclxuICAgICAgICBoZWFwaWZ5V2l0aFNpZnREb3duKG1pbkhlYXApO1xyXG4gICAgICAgIGlmIChtaW5IZWFwLmxlbmd0aCA+IGspIHtcclxuICAgICAgICAgICAgbWluSGVhcC5zaGlmdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhlYXBpZnlXaXRoU2lmdERvd24obWluSGVhcCk7XHJcbiAgICByZXR1cm4gbWluSGVhcFswXTtcclxuXHJcbiAgICBmdW5jdGlvbiBoZWFwaWZ5V2l0aFNpZnREb3duKEE6IG51bWJlcltdKSB7XHJcbiAgICAgICAgLy8g5Yid5aeL6YCJ5oup5pyA5o6l6L+R5Y+25a2Q55qE5LiA5Liq54i257uT54K5XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IE1hdGguZmxvb3IoKEEubGVuZ3RoIC0gMSkgLyAyKTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgc2lmdERvd24oQSwgaSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gQTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaWZ0RG93bihBOiBudW1iZXJbXSwgazogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g5q2k5aSE5pivIOacgOWwj+WghlxyXG4gICAgICAgIHdoaWxlIChrICogMiArIDEgPCBBLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgc29uID0gayAqIDIgKyAxO1xyXG4gICAgICAgICAgICAvLyDkuI7lhbbkuKTkuKrlhL/lrZDkuK3ovoPlsI/nmoTkuIDkuKrmr5TovoNcclxuICAgICAgICAgICAgaWYgKGsgKiAyICsgMiA8IEEubGVuZ3RoICYmIEFbc29uXSA+IEFbayAqIDIgKyAyXSkge1xyXG4gICAgICAgICAgICAgICAgc29uID0gayAqIDIgKyAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XlpKfkuo7lhL/lrZDvvIzliJnkuI7lhL/lrZDkuqTmjaLjgIJcclxuICAgICAgICAgICAgaWYgKEFbc29uXSA+IEFba10pIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFtBW3Nvbl0sIEFba11dID0gW0Fba10sIEFbc29uXV07XHJcbiAgICAgICAgICAgIC8vIOS6pOaNouWQjuWGjeS4juaWsOeahOWEv+WtkOavlOi+g+W5tuS6pOaNou+8jOebtOiHs+ayoeacieWEv+WtkOOAglxyXG4gICAgICAgICAgICBrID0gc29uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG59O1xyXG5cclxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgZmluZEt0aExhcmdlc3QoWzMsIDIsIDEsIDUsIDYsIDRdLCAyKSxcclxuICAgIDUsXHJcbik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIGZpbmRLdGhMYXJnZXN0KFszLCAyLCAzLCAxLCAyLCA0LCA1LCA1LCA2XSwgNCksXHJcbiAgICA0LFxyXG4pO1xyXG4iXX0=