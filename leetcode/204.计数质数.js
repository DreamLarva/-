"use strict";
/*
统计所有小于非负整数 n 的质数的数量。

示例:

输入: 10
输出: 4
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
* */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 厄拉多塞筛法.
 * 比如说求20以内质数的个数,首先0,1不是质数.2是第一个质数,然后把20以内所有2的倍数划去.
 * 2后面紧跟的数即为下一个质数3,然后把3所有的倍数划去.3后面紧跟的数即为下一个质数5,再把5所有的倍数划去.以此类推.
 * */
/**
 * @param {number} n
 * @return {number}
 */
var countPrimes = function (n) {
    const primeCache = [
        2,
        3,
        5,
        7,
        11,
        13,
        17,
        19,
        23,
        29,
        31,
        37,
        41,
        43,
        47,
        53,
        59,
        61,
        67,
        71,
        73,
        79,
        83,
        89,
        97,
    ];
    if (n <= 100) {
        let index = 0;
        while (n > primeCache[index]) {
            index++;
        }
        return index;
    }
    const excludeCache = new Set();
    for (const num of primeCache) {
        saveExclude(excludeCache, num, n);
    }
    let result = primeCache.length;
    for (let num = 101; num < n; num++) {
        if (excludeCache.has(num))
            continue;
        if (isPrime(num)) {
            saveExclude(excludeCache, num, n);
            result++;
        }
    }
    return result;
};
function saveExclude(set, num, n) {
    if (num < 100) {
        num = Math.ceil(100 / num) * num;
    }
    while (n >= num) {
        set.add(num);
        num += num;
    }
}
function isPrime(n) {
    if (n <= 3)
        return n > 1;
    if (n % 2 === 0 || n % 3 === 0)
        return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) {
            return false;
        }
    }
    return true;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(countPrimes(2), 0);
assert_1.default.strictEqual(countPrimes(3), 1);
assert_1.default.strictEqual(countPrimes(6), 3);
assert_1.default.strictEqual(countPrimes(100), 25);
assert_1.default.strictEqual(countPrimes(105), 27);
assert_1.default.strictEqual(countPrimes(121), 30);
var countPrimes2 = function (n) {
    // 使用数组
    let notPrimes = new Uint8Array(n);
    let count = 0;
    for (let i = 2; i < n; i++) {
        if (notPrimes[i] !== 1) {
            count++;
            let a = n / i;
            for (let j = i; j < a; j++) {
                notPrimes[i * j] = 1;
            }
        }
    }
    return count;
};
assert_1.default.strictEqual(countPrimes2(2), 0);
assert_1.default.strictEqual(countPrimes2(3), 1);
assert_1.default.strictEqual(countPrimes2(6), 3);
assert_1.default.strictEqual(countPrimes2(100), 25);
assert_1.default.strictEqual(countPrimes2(105), 27);
assert_1.default.strictEqual(countPrimes2(121), 30);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0LuiuoeaVsOi0qOaVsC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMjA0LuiuoeaVsOi0qOaVsC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7O0lBUUk7Ozs7O0FBRUo7Ozs7S0FJSztBQUNMOzs7R0FHRztBQUNILElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBUztJQUNuQyxNQUFNLFVBQVUsR0FBRztRQUNqQixDQUFDO1FBQ0QsQ0FBQztRQUNELENBQUM7UUFDRCxDQUFDO1FBQ0QsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO1FBQ0YsRUFBRTtRQUNGLEVBQUU7UUFDRixFQUFFO0tBQ0gsQ0FBQztJQUVGLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUNaLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM1QixLQUFLLEVBQUUsQ0FBQztTQUNUO1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sWUFBWSxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzVDLEtBQUssTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO1FBQzVCLFdBQVcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ25DO0lBRUQsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUMvQixLQUFLLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2xDLElBQUksWUFB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QyxDQUFDLENBQUM7QUFDdkMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN2QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbue7n+iuoeaJgOacieWwj+S6jumdnui0n+aVtOaVsCBuIOeahOi0qOaVsOeahOaVsOmHj+OAglxyXG5cclxu56S65L6LOlxyXG5cclxu6L6T5YWlOiAxMFxyXG7ovpPlh7o6IDRcclxu6Kej6YeKOiDlsI/kuo4gMTAg55qE6LSo5pWw5LiA5YWx5pyJIDQg5LiqLCDlroPku6zmmK8gMiwgMywgNSwgNyDjgIJcclxuKiAqL1xyXG5cclxuLyoqXHJcbiAqIOWOhOaLieWkmuWhnuetm+azlS5cclxuICog5q+U5aaC6K+05rGCMjDku6XlhoXotKjmlbDnmoTkuKrmlbAs6aaW5YWIMCwx5LiN5piv6LSo5pWwLjLmmK/nrKzkuIDkuKrotKjmlbAs54S25ZCO5oqKMjDku6XlhoXmiYDmnIky55qE5YCN5pWw5YiS5Y67LlxyXG4gKiAy5ZCO6Z2i57Sn6Lef55qE5pWw5Y2z5Li65LiL5LiA5Liq6LSo5pWwMyznhLblkI7miooz5omA5pyJ55qE5YCN5pWw5YiS5Y67LjPlkI7pnaLntKfot5/nmoTmlbDljbPkuLrkuIvkuIDkuKrotKjmlbA1LOWGjeaKijXmiYDmnInnmoTlgI3mlbDliJLljrsu5Lul5q2k57G75o6oLlxyXG4gKiAqL1xyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IG5cclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIGNvdW50UHJpbWVzID0gZnVuY3Rpb24gKG46IG51bWJlcikge1xyXG4gIGNvbnN0IHByaW1lQ2FjaGUgPSBbXHJcbiAgICAyLFxyXG4gICAgMyxcclxuICAgIDUsXHJcbiAgICA3LFxyXG4gICAgMTEsXHJcbiAgICAxMyxcclxuICAgIDE3LFxyXG4gICAgMTksXHJcbiAgICAyMyxcclxuICAgIDI5LFxyXG4gICAgMzEsXHJcbiAgICAzNyxcclxuICAgIDQxLFxyXG4gICAgNDMsXHJcbiAgICA0NyxcclxuICAgIDUzLFxyXG4gICAgNTksXHJcbiAgICA2MSxcclxuICAgIDY3LFxyXG4gICAgNzEsXHJcbiAgICA3MyxcclxuICAgIDc5LFxyXG4gICAgODMsXHJcbiAgICA4OSxcclxuICAgIDk3LFxyXG4gIF07XHJcblxyXG4gIGlmIChuIDw9IDEwMCkge1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIHdoaWxlIChuID4gcHJpbWVDYWNoZVtpbmRleF0pIHtcclxuICAgICAgaW5kZXgrKztcclxuICAgIH1cclxuICAgIHJldHVybiBpbmRleDtcclxuICB9XHJcbiAgY29uc3QgZXhjbHVkZUNhY2hlOiBTZXQ8bnVtYmVyPiA9IG5ldyBTZXQoKTtcclxuICBmb3IgKGNvbnN0IG51bSBvZiBwcmltZUNhY2hlKSB7XHJcbiAgICBzYXZlRXhjbHVkZShleGNsdWRlQ2FjaGUsIG51bSwgbik7XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzdWx0ID0gcHJpbWVDYWNoZS5sZW5ndGg7XHJcbiAgZm9yIChsZXQgbnVtID0gMTAxOyBudW0gPCBuOyBudW0rKykge1xyXG4gICAgaWYgKGV4Y2x1ZGVDYWNoZS5oYXMobnVtKSkgY29udGludWU7XHJcblxyXG4gICAgaWYgKGlzUHJpbWUobnVtKSkge1xyXG4gICAgICBzYXZlRXhjbHVkZShleGNsdWRlQ2FjaGUsIG51bSwgbik7XHJcbiAgICAgIHJlc3VsdCsrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNhdmVFeGNsdWRlKHNldDogU2V0PG51bWJlcj4sIG51bTogbnVtYmVyLCBuOiBudW1iZXIpIHtcclxuICBpZiAobnVtIDwgMTAwKSB7XHJcbiAgICBudW0gPSBNYXRoLmNlaWwoMTAwIC8gbnVtKSAqIG51bTtcclxuICB9XHJcbiAgd2hpbGUgKG4gPj0gbnVtKSB7XHJcbiAgICBzZXQuYWRkKG51bSk7XHJcbiAgICBudW0gKz0gbnVtO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNQcmltZShuOiBudW1iZXIpIHtcclxuICBpZiAobiA8PSAzKSByZXR1cm4gbiA+IDE7XHJcbiAgaWYgKG4gJSAyID09PSAwIHx8IG4gJSAzID09PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgZm9yIChsZXQgaSA9IDU7IGkgKiBpIDw9IG47IGkgKz0gNikge1xyXG4gICAgaWYgKG4gJSBpID09PSAwIHx8IG4gJSAoaSArIDIpID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDIpLCAwKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDMpLCAxKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDYpLCAzKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDEwMCksIDI1KTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDEwNSksIDI3KTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDEyMSksIDMwKTtcclxuXHJcbnZhciBjb3VudFByaW1lczIgPSBmdW5jdGlvbiAobjogbnVtYmVyKSB7XHJcbiAgLy8g5L2/55So5pWw57uEXHJcbiAgbGV0IG5vdFByaW1lcyA9IG5ldyBVaW50OEFycmF5KG4pO1xyXG4gIGxldCBjb3VudCA9IDA7XHJcbiAgZm9yIChsZXQgaSA9IDI7IGkgPCBuOyBpKyspIHtcclxuICAgIGlmIChub3RQcmltZXNbaV0gIT09IDEpIHtcclxuICAgICAgY291bnQrKztcclxuICAgICAgbGV0IGEgPSBuIC8gaTtcclxuICAgICAgZm9yIChsZXQgaiA9IGk7IGogPCBhOyBqKyspIHtcclxuICAgICAgICBub3RQcmltZXNbaSAqIGpdID0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY291bnQ7XHJcbn07XHJcblxyXG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMyKDIpLCAwKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzMigzKSwgMSk7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lczIoNiksIDMpO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMyKDEwMCksIDI1KTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzMigxMDUpLCAyNyk7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lczIoMTIxKSwgMzApO1xyXG4iXX0=