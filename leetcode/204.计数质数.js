"use strict";
/*
统计所有小于非负整数 n 的质数的数量。

示例:

输入: 10
输出: 4
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
* */
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 厄拉多塞筛法.
 * 比如说求20以内质数的个数,首先0,1不是质数.2是第一个质数,然后把20以内所有2的倍数划去.
 * 2后面紧跟的数即为下一个质数3,然后把3所有的倍数划去.3后面紧跟的数即为下一个质数5,再把5所有的倍数划去.以此类推.
 * */
/**
 * @param {number} n
 * @return {number}
 */
var countPrimes = function (n) {
  const primeCache = [
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
    73, 79, 83, 89, 97,
  ];
  if (n <= 100) {
    let index = 0;
    while (n > primeCache[index]) {
      index++;
    }
    return index;
  }
  const excludeCache = new Set();
  for (const num of primeCache) {
    saveExclude(excludeCache, num, n);
  }
  let result = primeCache.length;
  for (let num = 101; num < n; num++) {
    if (excludeCache.has(num)) continue;
    if (isPrime(num)) {
      saveExclude(excludeCache, num, n);
      result++;
    }
  }
  return result;
};
function saveExclude(set, num, n) {
  if (num < 100) {
    num = Math.ceil(100 / num) * num;
  }
  while (n >= num) {
    set.add(num);
    num += num;
  }
}
function isPrime(n) {
  if (n <= 3) return n > 1;
  if (n % 2 === 0 || n % 3 === 0) return false;
  for (let i = 5; i * i <= n; i += 6) {
    if (n % i === 0 || n % (i + 2) === 0) {
      return false;
    }
  }
  return true;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(countPrimes(2), 0);
assert_1.default.strictEqual(countPrimes(3), 1);
assert_1.default.strictEqual(countPrimes(6), 3);
assert_1.default.strictEqual(countPrimes(100), 25);
assert_1.default.strictEqual(countPrimes(105), 27);
assert_1.default.strictEqual(countPrimes(121), 30);
var countPrimes2 = function (n) {
  // 使用数组
  let notPrimes = new Uint8Array(n);
  let count = 0;
  for (let i = 2; i < n; i++) {
    if (notPrimes[i] !== 1) {
      count++;
      let a = n / i;
      for (let j = i; j < a; j++) {
        notPrimes[i * j] = 1;
      }
    }
  }
  return count;
};
assert_1.default.strictEqual(countPrimes2(2), 0);
assert_1.default.strictEqual(countPrimes2(3), 1);
assert_1.default.strictEqual(countPrimes2(6), 3);
assert_1.default.strictEqual(countPrimes2(100), 25);
assert_1.default.strictEqual(countPrimes2(105), 27);
assert_1.default.strictEqual(countPrimes2(121), 30);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0LuiuoeaVsOi0qOaVsC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMjA0LuiuoeaVsOi0qOaVsC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7O0lBUUk7Ozs7O0FBRUo7Ozs7S0FJSztBQUNMOzs7R0FHRztBQUNILElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBUztJQUNuQyxNQUFNLFVBQVUsR0FBRztRQUNqQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUMxRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtLQUNuQixDQUFDO0lBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO1FBQ1osSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLEtBQUssRUFBRSxDQUFDO1NBQ1Q7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxZQUFZLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDNUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7UUFDNUIsV0FBVyxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFFRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQy9CLEtBQUssSUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbEMsSUFBSSxZ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QUFDLENBQUMsQ0FBQztBQUN2QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7n+iuoeaJgOacieWwj+S6jumdnui0n+aVtOaVsCBuIOeahOi0qOaVsOeahOaVsOmHj+OAglxuXG7npLrkvos6XG5cbui+k+WFpTogMTBcbui+k+WHujogNFxu6Kej6YeKOiDlsI/kuo4gMTAg55qE6LSo5pWw5LiA5YWx5pyJIDQg5LiqLCDlroPku6zmmK8gMiwgMywgNSwgNyDjgIJcbiogKi9cblxuLyoqXG4gKiDljoTmi4nlpJrloZ7nrZvms5UuXG4gKiDmr5TlpoLor7TmsYIyMOS7peWGhei0qOaVsOeahOS4quaVsCzpppblhYgwLDHkuI3mmK/otKjmlbAuMuaYr+esrOS4gOS4qui0qOaVsCznhLblkI7miooyMOS7peWGheaJgOaciTLnmoTlgI3mlbDliJLljrsuXG4gKiAy5ZCO6Z2i57Sn6Lef55qE5pWw5Y2z5Li65LiL5LiA5Liq6LSo5pWwMyznhLblkI7miooz5omA5pyJ55qE5YCN5pWw5YiS5Y67LjPlkI7pnaLntKfot5/nmoTmlbDljbPkuLrkuIvkuIDkuKrotKjmlbA1LOWGjeaKijXmiYDmnInnmoTlgI3mlbDliJLljrsu5Lul5q2k57G75o6oLlxuICogKi9cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xudmFyIGNvdW50UHJpbWVzID0gZnVuY3Rpb24gKG46IG51bWJlcikge1xuICBjb25zdCBwcmltZUNhY2hlID0gW1xuICAgIDIsIDMsIDUsIDcsIDExLCAxMywgMTcsIDE5LCAyMywgMjksIDMxLCAzNywgNDEsIDQzLCA0NywgNTMsIDU5LCA2MSwgNjcsIDcxLFxuICAgIDczLCA3OSwgODMsIDg5LCA5NyxcbiAgXTtcblxuICBpZiAobiA8PSAxMDApIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChuID4gcHJpbWVDYWNoZVtpbmRleF0pIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuICBjb25zdCBleGNsdWRlQ2FjaGU6IFNldDxudW1iZXI+ID0gbmV3IFNldCgpO1xuICBmb3IgKGNvbnN0IG51bSBvZiBwcmltZUNhY2hlKSB7XG4gICAgc2F2ZUV4Y2x1ZGUoZXhjbHVkZUNhY2hlLCBudW0sIG4pO1xuICB9XG5cbiAgbGV0IHJlc3VsdCA9IHByaW1lQ2FjaGUubGVuZ3RoO1xuICBmb3IgKGxldCBudW0gPSAxMDE7IG51bSA8IG47IG51bSsrKSB7XG4gICAgaWYgKGV4Y2x1ZGVDYWNoZS5oYXMobnVtKSkgY29udGludWU7XG5cbiAgICBpZiAoaXNQcmltZShudW0pKSB7XG4gICAgICBzYXZlRXhjbHVkZShleGNsdWRlQ2FjaGUsIG51bSwgbik7XG4gICAgICByZXN1bHQrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZnVuY3Rpb24gc2F2ZUV4Y2x1ZGUoc2V0OiBTZXQ8bnVtYmVyPiwgbnVtOiBudW1iZXIsIG46IG51bWJlcikge1xuICBpZiAobnVtIDwgMTAwKSB7XG4gICAgbnVtID0gTWF0aC5jZWlsKDEwMCAvIG51bSkgKiBudW07XG4gIH1cbiAgd2hpbGUgKG4gPj0gbnVtKSB7XG4gICAgc2V0LmFkZChudW0pO1xuICAgIG51bSArPSBudW07XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQcmltZShuOiBudW1iZXIpIHtcbiAgaWYgKG4gPD0gMykgcmV0dXJuIG4gPiAxO1xuICBpZiAobiAlIDIgPT09IDAgfHwgbiAlIDMgPT09IDApIHJldHVybiBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDU7IGkgKiBpIDw9IG47IGkgKz0gNikge1xuICAgIGlmIChuICUgaSA9PT0gMCB8fCBuICUgKGkgKyAyKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lcygyKSwgMCk7XG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMoMyksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDYpLCAzKTtcbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lcygxMDApLCAyNSk7XG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMoMTA1KSwgMjcpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzKDEyMSksIDMwKTtcblxudmFyIGNvdW50UHJpbWVzMiA9IGZ1bmN0aW9uIChuOiBudW1iZXIpIHtcbiAgLy8g5L2/55So5pWw57uEXG4gIGxldCBub3RQcmltZXMgPSBuZXcgVWludDhBcnJheShuKTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IDI7IGkgPCBuOyBpKyspIHtcbiAgICBpZiAobm90UHJpbWVzW2ldICE9PSAxKSB7XG4gICAgICBjb3VudCsrO1xuICAgICAgbGV0IGEgPSBuIC8gaTtcbiAgICAgIGZvciAobGV0IGogPSBpOyBqIDwgYTsgaisrKSB7XG4gICAgICAgIG5vdFByaW1lc1tpICogal0gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59O1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMyKDIpLCAwKTtcbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lczIoMyksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzMig2KSwgMyk7XG5hc3NlcnQuc3RyaWN0RXF1YWwoY291bnRQcmltZXMyKDEwMCksIDI1KTtcbmFzc2VydC5zdHJpY3RFcXVhbChjb3VudFByaW1lczIoMTA1KSwgMjcpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50UHJpbWVzMigxMjEpLCAzMCk7XG4iXX0=
