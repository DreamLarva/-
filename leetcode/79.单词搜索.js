"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
function exist(board, word) {
  const m = board.length;
  const n = board[0].length;
  const directions = [
    [0, 1],
    [0, -1],
    [1, 0],
    [-1, 0],
  ]; // 四个方向
  // 已经走过的格子
  const visited = Array.from({ length: m }).map(() => Array(n).fill(false));
  function backTrace(y, x, word, index) {
    if (board[y][x] != word.charAt(index)) {
      return false;
    } else if (index === word.length - 1) {
      return true;
    }
    visited[y][x] = true;
    let result = false;
    for (const [dx, dy] of directions) {
      let newX = dx + x;
      let newY = dy + y;
      if (newX >= 0 && newY >= 0 && newX < n && newY < m) {
        if (!visited[newY][newX]) {
          /**
           * 递归中快速 中断的方法
           * 存一个值, 到达目标直接 break 并且返回
           * */
          if (backTrace(newY, newX, word, index + 1)) {
            result = true;
            break;
          }
        }
      }
    }
    visited[y][x] = false;
    return result;
  }
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (backTrace(i, j, word, 0)) return true;
    }
  }
  return false;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(
  exist(
    [
      ["C", "A", "A"],
      ["A", "A", "A"],
      ["B", "C", "D"],
    ],
    "AAB"
  ),
  true
);
assert_1.default.strictEqual(
  exist(
    [
      ["A", "B", "C", "E"],
      ["S", "F", "C", "S"],
      ["A", "D", "E", "E"],
    ],
    "ABCCED"
  ),
  true
);
assert_1.default.strictEqual(
  exist(
    [
      ["A", "B", "C", "E"],
      ["S", "F", "C", "S"],
      ["A", "D", "E", "E"],
    ],
    "SEE"
  ),
  true
);
assert_1.default.strictEqual(
  exist(
    [
      ["A", "B", "C", "E"],
      ["S", "F", "C", "S"],
      ["A", "D", "E", "E"],
    ],
    "ABCA"
  ),
  false
);
assert_1.default.strictEqual(exist([["A", "A"]], "AAA"), false);
//# sourceMappingURL=data:application/json;base64,
