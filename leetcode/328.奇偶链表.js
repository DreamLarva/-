"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。

请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:

输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL
示例 2:

输入: 2->1->3->5->6->4->7->NULL
输出: 2->3->6->7->1->5->4->NULL
说明:

应当保持奇数节点和偶数节点的相对顺序。
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/odd-even-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
const LinkedList_1 = require("../util/LinkedList");
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var oddEvenList = function (head) {
    if (head == null || head.next == null || head.next.next == null)
        return head;
    // 根据题意
    // 空间复杂度 O(1) 说明空间复杂度 不会应为 n 的大小而改变
    // 时间复杂度应为 O(nodes)，nodes 为节点总数。 那么每个节点只能遍历一次
    let odd_last_node = head;
    const even_head_node = head.next;
    let even_last_node = even_head_node;
    while (true) {
        if (even_last_node.next == null) {
            odd_last_node.next = even_head_node;
            break;
        }
        odd_last_node.next = even_last_node.next;
        odd_last_node = odd_last_node.next;
        if (odd_last_node.next == null) {
            odd_last_node.next = even_head_node;
            /**
             * 注意 由于单数的链表的最后一个节点一定连的是 偶数链表所有没问题
             * 但是偶数的节点的 最后一个节点 可能还连着 一个奇数的节点 所以要 加以处理
             * */
            even_last_node.next = null;
            break;
        }
        even_last_node.next = odd_last_node.next;
        even_last_node = even_last_node.next;
    }
    return head;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(oddEvenList(null), null);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1, 2, 3, 4])).toString(), [1, 3, 2, 4]);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1])).toString(), [1]);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1, 2])).toString(), [
    1,
    2,
]);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1, 2, 3])).toString(), [
    1,
    3,
    2,
]);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1, 2, 3, 4])).toString(), [1, 3, 2, 4]);
assert_1.default.deepStrictEqual(oddEvenList(LinkedList_1.createLinkedList([1, 2, 3, 4, 5])).toString(), [1, 3, 5, 2, 4]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI4LuWlh+WBtumTvuihqC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMzI4LuWlh+WBtumTvuihqC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFxQkk7QUFDSixtREFBZ0U7QUFFaEU7OztHQUdHO0FBQ0gsSUFBSSxXQUFXLEdBQUcsVUFBVSxJQUFxQjtJQUMvQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQzdFLE9BQU87SUFDUCxtQ0FBbUM7SUFDbkMsNkNBQTZDO0lBQzdDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQztJQUN6QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pDLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUVwQyxPQUFPLElBQUksRUFBRTtRQUNYLElBQUksY0FBZSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDaEMsYUFBYSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7WUFDcEMsTUFBTTtTQUNQO1FBQ0QsYUFBYSxDQUFDLElBQUksR0FBRyxjQUFlLENBQUMsSUFBSSxDQUFDO1FBQzFDLGFBQWEsR0FBRyxhQUFhLENBQUMsSUFBSyxDQUFDO1FBRXBDLElBQUksYUFBYSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDOUIsYUFBYSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7WUFDcEM7OztpQkFHSztZQUNMLGNBQWMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQzNCLE1BQU07U0FDUDtRQUNELGNBQWUsQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztRQUMxQyxjQUFjLEdBQUcsY0FBZSxDQUFDLElBQUksQ0FBQztLQUN2QztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoRCxnQkFBTSxDQUFDLGVBQWUsQ0FDcEIsV0FBVyxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRSxFQUN2RCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNiLENBQUM7QUFDRixnQkFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsNkJBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLGdCQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7SUFDeEUsQ0FBQztJQUNELENBQUM7Q0FDRixDQUFDLENBQUM7QUFDSCxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsNkJBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUMzRSxDQUFDO0lBQ0QsQ0FBQztJQUNELENBQUM7Q0FDRixDQUFDLENBQUM7QUFDSCxnQkFBTSxDQUFDLGVBQWUsQ0FDcEIsV0FBVyxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRSxFQUN2RCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNiLENBQUM7QUFDRixnQkFBTSxDQUFDLGVBQWUsQ0FDcEIsV0FBVyxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDMUQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG7nu5nlrprkuIDkuKrljZXpk77ooajvvIzmiormiYDmnInnmoTlpYfmlbDoioLngrnlkozlgbbmlbDoioLngrnliIbliKvmjpLlnKjkuIDotbfjgILor7fms6jmhI/vvIzov5nph4znmoTlpYfmlbDoioLngrnlkozlgbbmlbDoioLngrnmjIfnmoTmmK/oioLngrnnvJblj7fnmoTlpYflgbbmgKfvvIzogIzkuI3mmK/oioLngrnnmoTlgLznmoTlpYflgbbmgKfjgIJcclxuXHJcbuivt+WwneivleS9v+eUqOWOn+WcsOeul+azleWujOaIkOOAguS9oOeahOeul+azleeahOepuumXtOWkjeadguW6puW6lOS4uiBPKDEp77yM5pe26Ze05aSN5p2C5bqm5bqU5Li6IE8obm9kZXMp77yMbm9kZXMg5Li66IqC54K55oC75pWw44CCXHJcblxyXG7npLrkvosgMTpcclxuXHJcbui+k+WFpTogMS0+Mi0+My0+NC0+NS0+TlVMTFxyXG7ovpPlh7o6IDEtPjMtPjUtPjItPjQtPk5VTExcclxu56S65L6LIDI6XHJcblxyXG7ovpPlhaU6IDItPjEtPjMtPjUtPjYtPjQtPjctPk5VTExcclxu6L6T5Ye6OiAyLT4zLT42LT43LT4xLT41LT40LT5OVUxMXHJcbuivtOaYjjpcclxuXHJcbuW6lOW9k+S/neaMgeWlh+aVsOiKgueCueWSjOWBtuaVsOiKgueCueeahOebuOWvuemhuuW6j+OAglxyXG7pk77ooajnmoTnrKzkuIDkuKroioLngrnop4bkuLrlpYfmlbDoioLngrnvvIznrKzkuozkuKroioLngrnop4bkuLrlgbbmlbDoioLngrnvvIzku6XmraTnsbvmjqjjgIJcclxuXHJcbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXHJcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL29kZC1ldmVuLWxpbmtlZC1saXN0XHJcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxyXG4qICovXHJcbmltcG9ydCB7IExpc3ROb2RlLCBjcmVhdGVMaW5rZWRMaXN0IH0gZnJvbSBcIi4uL3V0aWwvTGlua2VkTGlzdFwiO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TGlzdE5vZGV9IGhlYWRcclxuICogQHJldHVybiB7TGlzdE5vZGV9XHJcbiAqL1xyXG52YXIgb2RkRXZlbkxpc3QgPSBmdW5jdGlvbiAoaGVhZDogTGlzdE5vZGUgfCBudWxsKSB7XHJcbiAgaWYgKGhlYWQgPT0gbnVsbCB8fCBoZWFkLm5leHQgPT0gbnVsbCB8fCBoZWFkLm5leHQubmV4dCA9PSBudWxsKSByZXR1cm4gaGVhZDtcclxuICAvLyDmoLnmja7popjmhI9cclxuICAvLyDnqbrpl7TlpI3mnYLluqYgTygxKSDor7TmmI7nqbrpl7TlpI3mnYLluqYg5LiN5Lya5bqU5Li6IG4g55qE5aSn5bCP6ICM5pS55Y+YXHJcbiAgLy8g5pe26Ze05aSN5p2C5bqm5bqU5Li6IE8obm9kZXMp77yMbm9kZXMg5Li66IqC54K55oC75pWw44CCIOmCo+S5iOavj+S4quiKgueCueWPquiDvemBjeWOhuS4gOasoVxyXG4gIGxldCBvZGRfbGFzdF9ub2RlID0gaGVhZDtcclxuICBjb25zdCBldmVuX2hlYWRfbm9kZSA9IGhlYWQubmV4dDtcclxuICBsZXQgZXZlbl9sYXN0X25vZGUgPSBldmVuX2hlYWRfbm9kZTtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChldmVuX2xhc3Rfbm9kZSEubmV4dCA9PSBudWxsKSB7XHJcbiAgICAgIG9kZF9sYXN0X25vZGUubmV4dCA9IGV2ZW5faGVhZF9ub2RlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIG9kZF9sYXN0X25vZGUubmV4dCA9IGV2ZW5fbGFzdF9ub2RlIS5uZXh0O1xyXG4gICAgb2RkX2xhc3Rfbm9kZSA9IG9kZF9sYXN0X25vZGUubmV4dCE7XHJcblxyXG4gICAgaWYgKG9kZF9sYXN0X25vZGUubmV4dCA9PSBudWxsKSB7XHJcbiAgICAgIG9kZF9sYXN0X25vZGUubmV4dCA9IGV2ZW5faGVhZF9ub2RlO1xyXG4gICAgICAvKipcclxuICAgICAgICog5rOo5oSPIOeUseS6juWNleaVsOeahOmTvuihqOeahOacgOWQjuS4gOS4quiKgueCueS4gOWumui/nueahOaYryDlgbbmlbDpk77ooajmiYDmnInmsqHpl67pophcclxuICAgICAgICog5L2G5piv5YG25pWw55qE6IqC54K555qEIOacgOWQjuS4gOS4quiKgueCuSDlj6/og73ov5jov57nnYAg5LiA5Liq5aWH5pWw55qE6IqC54K5IOaJgOS7peimgSDliqDku6XlpITnkIZcclxuICAgICAgICogKi9cclxuICAgICAgZXZlbl9sYXN0X25vZGUubmV4dCA9IG51bGw7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgZXZlbl9sYXN0X25vZGUhLm5leHQgPSBvZGRfbGFzdF9ub2RlLm5leHQ7XHJcbiAgICBldmVuX2xhc3Rfbm9kZSA9IGV2ZW5fbGFzdF9ub2RlIS5uZXh0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGhlYWQ7XHJcbn07XHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcclxuXHJcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwob2RkRXZlbkxpc3QobnVsbCksIG51bGwpO1xyXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxyXG4gIG9kZEV2ZW5MaXN0KGNyZWF0ZUxpbmtlZExpc3QoWzEsIDIsIDMsIDRdKSkhLnRvU3RyaW5nKCksXHJcbiAgWzEsIDMsIDIsIDRdXHJcbik7XHJcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwob2RkRXZlbkxpc3QoY3JlYXRlTGlua2VkTGlzdChbMV0pKSEudG9TdHJpbmcoKSwgWzFdKTtcclxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChvZGRFdmVuTGlzdChjcmVhdGVMaW5rZWRMaXN0KFsxLCAyXSkpIS50b1N0cmluZygpLCBbXHJcbiAgMSxcclxuICAyLFxyXG5dKTtcclxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChvZGRFdmVuTGlzdChjcmVhdGVMaW5rZWRMaXN0KFsxLCAyLCAzXSkpIS50b1N0cmluZygpLCBbXHJcbiAgMSxcclxuICAzLFxyXG4gIDIsXHJcbl0pO1xyXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxyXG4gIG9kZEV2ZW5MaXN0KGNyZWF0ZUxpbmtlZExpc3QoWzEsIDIsIDMsIDRdKSkhLnRvU3RyaW5nKCksXHJcbiAgWzEsIDMsIDIsIDRdXHJcbik7XHJcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgb2RkRXZlbkxpc3QoY3JlYXRlTGlua2VkTGlzdChbMSwgMiwgMywgNCwgNV0pKSEudG9TdHJpbmcoKSxcclxuICBbMSwgMywgNSwgMiwgNF1cclxuKTtcclxuIl19