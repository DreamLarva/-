"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * @lc app=leetcode.cn id=21 lang=javascript
 *
 * [21] 合并两个有序链表
 *
 * https://leetcode-cn.com/problems/merge-two-sorted-lists/description/
 *
 * algorithms
 * Easy (52.38%)
 * Total Accepted:    43.6K
 * Total Submissions: 83.3K
 * Testcase Example:  '[1,2,4]\n[1,3,4]'
 *
 * 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
 *
 * 示例：
 *
 * 输入：1->2->4, 1->3->4
 * 输出：1->1->2->3->4->4
 *
 *
 */
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
const LinkedList_1 = require("../util/LinkedList");
/**
 * 递归
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var mergeTwoLists1 = function (l1, l2) {
    // 如果 某一个链表到底了 就返回 另一个
    if (l1 === null)
        return l2;
    if (l2 === null)
        return l1;
    if (l1.val <= l2.val) {
        // 递归 下一个值
        l1.next = mergeTwoLists1(l1.next, l2);
        // 返回本轮较小的值
        return l1;
    }
    else {
        l2.next = mergeTwoLists1(l1, l2.next);
        return l2;
    }
};
var mergeTwoLists2 = function (l1, l2) {
    const head = new LinkedList_1.ListNode(0);
    let current = head;
    while (l1 != null && l2 != null) {
        if (l1.val < l2.val) {
            current.next = l1;
            l1 = l1.next;
        }
        else {
            current.next = l2;
            l2 = l2.next;
        }
        current = current.next;
    }
    current.next = l1 == null ? l2 : l1;
    return head.next;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(mergeTwoLists1(LinkedList_1.createLinkedList([1, 2, 4]), LinkedList_1.createLinkedList([1, 3, 4])).toString(), [1, 1, 2, 3, 4, 4]);
assert_1.default.deepStrictEqual(mergeTwoLists2(LinkedList_1.createLinkedList([1, 2, 4]), LinkedList_1.createLinkedList([1, 3, 4])).toString(), [1, 1, 2, 3, 4, 4]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEu5ZCI5bm25Lik5Liq5pyJ5bqP6ZO+6KGoLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8yMS7lkIjlubbkuKTkuKrmnInluo/pk77ooagudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0g7Ozs7OztHQU1HO0FBQ0gsbURBQWdFO0FBRWhFOzs7OztHQUtHO0FBQ0gsSUFBSSxjQUFjLEdBQUcsVUFDbkIsRUFBMkIsRUFDM0IsRUFBMkI7SUFFM0Isc0JBQXNCO0lBQ3RCLElBQUksRUFBRSxLQUFLLElBQUk7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMzQixJQUFJLEVBQUUsS0FBSyxJQUFJO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFM0IsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUU7UUFDcEIsVUFBVTtRQUNWLEVBQUUsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsV0FBVztRQUNYLE9BQU8sRUFBRSxDQUFDO0tBQ1g7U0FBTTtRQUNMLEVBQUUsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsT0FBTyxFQUFFLENBQUM7S0FDWDtBQUNILENBQUMsQ0FBQztBQUVGLElBQUksY0FBYyxHQUFHLFVBQ25CLEVBQTJCLEVBQzNCLEVBQTJCO0lBRTNCLE1BQU0sSUFBSSxHQUFxQixJQUFJLHFCQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLE9BQU8sRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO1FBQy9CLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ2Q7UUFDRCxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztLQUN4QjtJQUVELE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFcEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLGVBQWUsQ0FDcEIsY0FBYyxDQUNaLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMzQiw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDM0IsQ0FBQyxRQUFRLEVBQUUsRUFFYixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ25CLENBQUM7QUFDRixnQkFBTSxDQUFDLGVBQWUsQ0FDcEIsY0FBYyxDQUNaLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMzQiw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDM0IsQ0FBQyxRQUFRLEVBQUUsRUFFYixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQGxjIGFwcD1sZWV0Y29kZS5jbiBpZD0yMSBsYW5nPWphdmFzY3JpcHRcbiAqXG4gKiBbMjFdIOWQiOW5tuS4pOS4quacieW6j+mTvuihqFxuICpcbiAqIGh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL21lcmdlLXR3by1zb3J0ZWQtbGlzdHMvZGVzY3JpcHRpb24vXG4gKlxuICogYWxnb3JpdGhtc1xuICogRWFzeSAoNTIuMzglKVxuICogVG90YWwgQWNjZXB0ZWQ6ICAgIDQzLjZLXG4gKiBUb3RhbCBTdWJtaXNzaW9uczogODMuM0tcbiAqIFRlc3RjYXNlIEV4YW1wbGU6ICAnWzEsMiw0XVxcblsxLDMsNF0nXG4gKlxuICog5bCG5Lik5Liq5pyJ5bqP6ZO+6KGo5ZCI5bm25Li65LiA5Liq5paw55qE5pyJ5bqP6ZO+6KGo5bm26L+U5Zue44CC5paw6ZO+6KGo5piv6YCa6L+H5ou85o6l57uZ5a6a55qE5Lik5Liq6ZO+6KGo55qE5omA5pyJ6IqC54K557uE5oiQ55qE44CCXG4gKlxuICog56S65L6L77yaXG4gKlxuICog6L6T5YWl77yaMS0+Mi0+NCwgMS0+My0+NFxuICog6L6T5Ye677yaMS0+MS0+Mi0+My0+NC0+NFxuICpcbiAqXG4gKi9cbi8qKlxuICogRGVmaW5pdGlvbiBmb3Igc2luZ2x5LWxpbmtlZCBsaXN0LlxuICogZnVuY3Rpb24gTGlzdE5vZGUodmFsKSB7XG4gKiAgICAgdGhpcy52YWwgPSB2YWw7XG4gKiAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAqIH1cbiAqL1xuaW1wb3J0IHsgTGlzdE5vZGUsIGNyZWF0ZUxpbmtlZExpc3QgfSBmcm9tIFwiLi4vdXRpbC9MaW5rZWRMaXN0XCI7XG5cbi8qKlxuICog6YCS5b2SXG4gKiBAcGFyYW0ge0xpc3ROb2RlfSBsMVxuICogQHBhcmFtIHtMaXN0Tm9kZX0gbDJcbiAqIEByZXR1cm4ge0xpc3ROb2RlfVxuICovXG52YXIgbWVyZ2VUd29MaXN0czEgPSBmdW5jdGlvbiA8VD4oXG4gIGwxOiBMaXN0Tm9kZTxudW1iZXI+IHwgbnVsbCxcbiAgbDI6IExpc3ROb2RlPG51bWJlcj4gfCBudWxsXG4pOiBMaXN0Tm9kZTxudW1iZXI+IHwgbnVsbCB7XG4gIC8vIOWmguaenCDmn5DkuIDkuKrpk77ooajliLDlupXkuoYg5bCx6L+U5ZueIOWPpuS4gOS4qlxuICBpZiAobDEgPT09IG51bGwpIHJldHVybiBsMjtcbiAgaWYgKGwyID09PSBudWxsKSByZXR1cm4gbDE7XG5cbiAgaWYgKGwxLnZhbCA8PSBsMi52YWwpIHtcbiAgICAvLyDpgJLlvZIg5LiL5LiA5Liq5YC8XG4gICAgbDEubmV4dCA9IG1lcmdlVHdvTGlzdHMxKGwxLm5leHQsIGwyKTtcbiAgICAvLyDov5Tlm57mnKzova7ovoPlsI/nmoTlgLxcbiAgICByZXR1cm4gbDE7XG4gIH0gZWxzZSB7XG4gICAgbDIubmV4dCA9IG1lcmdlVHdvTGlzdHMxKGwxLCBsMi5uZXh0KTtcbiAgICByZXR1cm4gbDI7XG4gIH1cbn07XG5cbnZhciBtZXJnZVR3b0xpc3RzMiA9IGZ1bmN0aW9uIDxUPihcbiAgbDE6IExpc3ROb2RlPG51bWJlcj4gfCBudWxsLFxuICBsMjogTGlzdE5vZGU8bnVtYmVyPiB8IG51bGxcbik6IExpc3ROb2RlPG51bWJlcj4gfCBudWxsIHtcbiAgY29uc3QgaGVhZDogTGlzdE5vZGU8bnVtYmVyPiA9IG5ldyBMaXN0Tm9kZSgwKTtcbiAgbGV0IGN1cnJlbnQgPSBoZWFkO1xuICB3aGlsZSAobDEgIT0gbnVsbCAmJiBsMiAhPSBudWxsKSB7XG4gICAgaWYgKGwxLnZhbCA8IGwyLnZhbCkge1xuICAgICAgY3VycmVudC5uZXh0ID0gbDE7XG4gICAgICBsMSA9IGwxLm5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQubmV4dCA9IGwyO1xuICAgICAgbDIgPSBsMi5uZXh0O1xuICAgIH1cbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG5cbiAgY3VycmVudC5uZXh0ID0gbDEgPT0gbnVsbCA/IGwyIDogbDE7XG5cbiAgcmV0dXJuIGhlYWQubmV4dDtcbn07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICBtZXJnZVR3b0xpc3RzMShcbiAgICBjcmVhdGVMaW5rZWRMaXN0KFsxLCAyLCA0XSksXG4gICAgY3JlYXRlTGlua2VkTGlzdChbMSwgMywgNF0pXG4gICkhLnRvU3RyaW5nKCksXG5cbiAgWzEsIDEsIDIsIDMsIDQsIDRdXG4pO1xuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgbWVyZ2VUd29MaXN0czIoXG4gICAgY3JlYXRlTGlua2VkTGlzdChbMSwgMiwgNF0pLFxuICAgIGNyZWF0ZUxpbmtlZExpc3QoWzEsIDMsIDRdKVxuICApIS50b1N0cmluZygpLFxuXG4gIFsxLCAxLCAyLCAzLCA0LCA0XVxuKTtcbiJdfQ==