"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function (n) {
    if (n === 0 || n === 1)
        return n;
    if (n === 2)
        return 2;
    if (n === 3)
        return 5;
    let result = 0;
    for (let i = 0; i <= n - 1; i++) {
        // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
        result += (numTrees(i) || 1) * (numTrees(n - 1 - i) || 1);
    }
    return result;
};
// 添加记忆化
var numTrees_1 = function (n) {
    const cache = {};
    return step(n);
    function step(n) {
        if (cache[n])
            return cache[n];
        if (n === 0 || n === 1)
            return n;
        let result = 0;
        for (let i = 0; i <= n - 1; i++) {
            // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
            result += (step(i) || 1) * (step(n - 1 - i) || 1);
        }
        return (cache[n] = result);
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(numTrees_1(2), 2);
assert_1.default.strictEqual(numTrees_1(3), 5);
assert_1.default.strictEqual(numTrees_1(5), 42);
assert_1.default.strictEqual(numTrees_1(10), 16796);
const Benchmark = require("benchmark");
const suite = new Benchmark.Suite();
suite
    .add("没记忆", function () {
    numTrees(10);
})
    .add("有记忆", function () {
    numTrees_1(10);
})
    // add listeners
    .on("cycle", function (event) {
    console.log(String(event.target));
})
    .on("complete", function () {
    console.log("Fastest is " + this.filter("fastest").map("name"));
})
    // run async
    .run({ async: false });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYu5LiN5ZCM55qE5LqM5Y+J5pCc57Si5qCRLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS85Ni7kuI3lkIznmoTkuozlj4nmkJzntKLmoJEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBUztJQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLCtCQUErQjtRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLFFBQVE7QUFDUixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQVM7SUFDbEMsTUFBTSxLQUFLLEdBQThCLEVBQUUsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVmLFNBQVMsSUFBSSxDQUFDLENBQVM7UUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsK0JBQStCO1lBQy9CLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUUxQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEMsS0FBSztLQUNGLEdBQUcsQ0FBQyxLQUFLLEVBQUU7SUFDVixRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDZixDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsS0FBSyxFQUFFO0lBQ1YsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztJQUNGLGdCQUFnQjtLQUNmLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFVO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztLQUNELEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztJQUNGLFlBQVk7S0FDWCxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG7nu5nlrprkuIDkuKrmlbTmlbAgbu+8jOaxguS7pcKgMSAuLi7CoG7CoOS4uuiKgueCuee7hOaIkOeahOS6jOWPieaQnOe0ouagkeacieWkmuWwkeenje+8n1xuXG7npLrkvos6XG5cbui+k+WFpTogM1xu6L6T5Ye6OiA1XG7op6Pph4o6XG7nu5nlrpogbiA9IDMsIOS4gOWFseaciSA1IOenjeS4jeWQjOe7k+aehOeahOS6jOWPieaQnOe0ouagkTpcblxuICAgMSAgICAgICAgIDMgICAgIDMgICAgICAyICAgICAgMVxuICAgIFxcICAgICAgIC8gICAgIC8gICAgICAvIFxcICAgICAgXFxcbiAgICAgMyAgICAgMiAgICAgMSAgICAgIDEgICAzICAgICAgMlxuICAgIC8gICAgIC8gICAgICAgXFwgICAgICAgICAgICAgICAgIFxcXG4gICAyICAgICAxICAgICAgICAgMiAgICAgICAgICAgICAgICAgM1xuXG7mnaXmupDvvJrlipvmiaPvvIhMZWV0Q29kZe+8iVxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdW5pcXVlLWJpbmFyeS1zZWFyY2gtdHJlZXNcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG52YXIgbnVtVHJlZXMgPSBmdW5jdGlvbiAobjogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKG4gPT09IDAgfHwgbiA9PT0gMSkgcmV0dXJuIG47XG4gIGlmIChuID09PSAyKSByZXR1cm4gMjtcbiAgaWYgKG4gPT09IDMpIHJldHVybiA1O1xuXG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSBuIC0gMTsgaSsrKSB7XG4gICAgLy8g5oyJ54Wn5q+P5LiA5Liq5pWw5a2XIOWwhiDlroMg5Lul5Y+KIOS7lueahCDlt6bkvqcg5Y+z5L6nIOWIhuS4uuS4iee7hFxuICAgIHJlc3VsdCArPSAobnVtVHJlZXMoaSkgfHwgMSkgKiAobnVtVHJlZXMobiAtIDEgLSBpKSB8fCAxKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyDmt7vliqDorrDlv4bljJZcbnZhciBudW1UcmVlc18xID0gZnVuY3Rpb24gKG46IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGNhY2hlOiB7IFtrZXk6IG51bWJlcl06IG51bWJlciB9ID0ge307XG4gIHJldHVybiBzdGVwKG4pO1xuXG4gIGZ1bmN0aW9uIHN0ZXAobjogbnVtYmVyKSB7XG4gICAgaWYgKGNhY2hlW25dKSByZXR1cm4gY2FjaGVbbl07XG4gICAgaWYgKG4gPT09IDAgfHwgbiA9PT0gMSkgcmV0dXJuIG47XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbiAtIDE7IGkrKykge1xuICAgICAgLy8g5oyJ54Wn5q+P5LiA5Liq5pWw5a2XIOWwhiDlroMg5Lul5Y+KIOS7lueahCDlt6bkvqcg5Y+z5L6nIOWIhuS4uuS4iee7hFxuICAgICAgcmVzdWx0ICs9IChzdGVwKGkpIHx8IDEpICogKHN0ZXAobiAtIDEgLSBpKSB8fCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW25dID0gcmVzdWx0KTtcbiAgfVxufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDIpLCAyKTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDMpLCA1KTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDUpLCA0Mik7XG5hc3NlcnQuc3RyaWN0RXF1YWwobnVtVHJlZXNfMSgxMCksIDE2Nzk2KTtcblxuY29uc3QgQmVuY2htYXJrID0gcmVxdWlyZShcImJlbmNobWFya1wiKTtcbmNvbnN0IHN1aXRlID0gbmV3IEJlbmNobWFyay5TdWl0ZSgpO1xuc3VpdGVcbiAgLmFkZChcIuayoeiusOW/hlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgbnVtVHJlZXMoMTApO1xuICB9KVxuICAuYWRkKFwi5pyJ6K6w5b+GXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBudW1UcmVlc18xKDEwKTtcbiAgfSlcbiAgLy8gYWRkIGxpc3RlbmVyc1xuICAub24oXCJjeWNsZVwiLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKFN0cmluZyhldmVudC50YXJnZXQpKTtcbiAgfSlcbiAgLm9uKFwiY29tcGxldGVcIiwgZnVuY3Rpb24gKHRoaXM6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKFwiRmFzdGVzdCBpcyBcIiArIHRoaXMuZmlsdGVyKFwiZmFzdGVzdFwiKS5tYXAoXCJuYW1lXCIpKTtcbiAgfSlcbiAgLy8gcnVuIGFzeW5jXG4gIC5ydW4oeyBhc3luYzogZmFsc2UgfSk7XG4iXX0=