"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function (n) {
    if (n === 0 || n === 1)
        return n;
    if (n === 2)
        return 2;
    if (n === 3)
        return 5;
    let result = 0;
    for (let i = 0; i <= n - 1; i++) {
        // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
        result += (numTrees(i) || 1) * (numTrees(n - 1 - i) || 1);
    }
    return result;
};
// 添加记忆化
var numTrees_1 = function (n) {
    const cache = {};
    return step(n);
    function step(n) {
        if (cache[n])
            return cache[n];
        if (n === 0 || n === 1)
            return n;
        let result = 0;
        for (let i = 0; i <= n - 1; i++) {
            // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
            result += (step(i) || 1) * (step(n - 1 - i) || 1);
        }
        return cache[n] = result;
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(numTrees_1(2), 2);
assert_1.default.strictEqual(numTrees_1(3), 5);
assert_1.default.strictEqual(numTrees_1(5), 42);
assert_1.default.strictEqual(numTrees_1(10), 16796);
const Benchmark = require('benchmark');
const suite = new Benchmark.Suite;
suite
    .add('没记忆', function () {
    numTrees(10);
})
    .add('有记忆', function () {
    numTrees_1(10);
})
    // add listeners
    .on('cycle', function (event) {
    console.log(String(event.target));
})
    .on('complete', function () {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
})
    // run async
    .run({ 'async': false });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYu5LiN5ZCM55qE5LqM5Y+J5pCc57Si5qCRLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS85Ni7kuI3lkIznmoTkuozlj4nmkJzntKLmoJEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBUztJQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLCtCQUErQjtRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM3RDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLFFBQVE7QUFDUixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQVM7SUFDaEMsTUFBTSxLQUFLLEdBQThCLEVBQUUsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVmLFNBQVMsSUFBSSxDQUFDLENBQVM7UUFDbkIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsK0JBQStCO1lBQy9CLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQzdCLENBQUM7QUFFTCxDQUFDLENBQUM7QUFHRixvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUNiLENBQUMsQ0FDSixDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUNiLENBQUMsQ0FDSixDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUNiLEVBQUUsQ0FDTCxDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2QsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNkLEtBQUssQ0FDUixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQztBQUNsQyxLQUFLO0tBQ0EsR0FBRyxDQUFDLEtBQUssRUFBRTtJQUNSLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsS0FBSyxFQUFFO0lBQ1IsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQztJQUNGLGdCQUFnQjtLQUNmLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFVO0lBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztLQUNELEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLENBQUMsQ0FBQztJQUNGLFlBQVk7S0FDWCxHQUFHLENBQUMsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG7nu5nlrprkuIDkuKrmlbTmlbAgbu+8jOaxguS7pcKgMSAuLi7CoG7CoOS4uuiKgueCuee7hOaIkOeahOS6jOWPieaQnOe0ouagkeacieWkmuWwkeenje+8n1xuXG7npLrkvos6XG5cbui+k+WFpTogM1xu6L6T5Ye6OiA1XG7op6Pph4o6XG7nu5nlrpogbiA9IDMsIOS4gOWFseaciSA1IOenjeS4jeWQjOe7k+aehOeahOS6jOWPieaQnOe0ouagkTpcblxuICAgMSAgICAgICAgIDMgICAgIDMgICAgICAyICAgICAgMVxuICAgIFxcICAgICAgIC8gICAgIC8gICAgICAvIFxcICAgICAgXFxcbiAgICAgMyAgICAgMiAgICAgMSAgICAgIDEgICAzICAgICAgMlxuICAgIC8gICAgIC8gICAgICAgXFwgICAgICAgICAgICAgICAgIFxcXG4gICAyICAgICAxICAgICAgICAgMiAgICAgICAgICAgICAgICAgM1xuXG7mnaXmupDvvJrlipvmiaPvvIhMZWV0Q29kZe+8iVxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdW5pcXVlLWJpbmFyeS1zZWFyY2gtdHJlZXNcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG52YXIgbnVtVHJlZXMgPSBmdW5jdGlvbiAobjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSByZXR1cm4gbjtcbiAgICBpZiAobiA9PT0gMikgcmV0dXJuIDI7XG4gICAgaWYgKG4gPT09IDMpIHJldHVybiA1O1xuXG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbiAtIDE7IGkrKykge1xuICAgICAgICAvLyDmjInnhafmr4/kuIDkuKrmlbDlrZcg5bCGIOWugyDku6Xlj4og5LuW55qEIOW3puS+pyDlj7Pkvqcg5YiG5Li65LiJ57uEXG4gICAgICAgIHJlc3VsdCArPSAobnVtVHJlZXMoaSkgfHwgMSkgKiAobnVtVHJlZXMobiAtIDEgLSBpKSB8fCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8g5re75Yqg6K6w5b+G5YyWXG52YXIgbnVtVHJlZXNfMSA9IGZ1bmN0aW9uIChuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGNhY2hlOiB7IFtrZXk6IG51bWJlcl06IG51bWJlciB9ID0ge307XG4gICAgcmV0dXJuIHN0ZXAobik7XG5cbiAgICBmdW5jdGlvbiBzdGVwKG46IG51bWJlcikge1xuICAgICAgICBpZiAoY2FjaGVbbl0pIHJldHVybiBjYWNoZVtuXTtcbiAgICAgICAgaWYgKG4gPT09IDAgfHwgbiA9PT0gMSkgcmV0dXJuIG47XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBuIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAvLyDmjInnhafmr4/kuIDkuKrmlbDlrZcg5bCGIOWugyDku6Xlj4og5LuW55qEIOW3puS+pyDlj7Pkvqcg5YiG5Li65LiJ57uEXG4gICAgICAgICAgICByZXN1bHQgKz0gKHN0ZXAoaSkgfHwgMSkgKiAoc3RlcChuIC0gMSAtIGkpIHx8IDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlW25dID0gcmVzdWx0O1xuICAgIH1cblxufTtcblxuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgIG51bVRyZWVzXzEoMiksXG4gICAgMixcbik7XG5hc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgbnVtVHJlZXNfMSgzKSxcbiAgICA1LFxuKTtcbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgICBudW1UcmVlc18xKDUpLFxuICAgIDQyLFxuKTtcbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgICBudW1UcmVlc18xKDEwKSxcbiAgICAxNjc5Nixcbik7XG5cbmNvbnN0IEJlbmNobWFyayA9IHJlcXVpcmUoJ2JlbmNobWFyaycpO1xuY29uc3Qgc3VpdGUgPSBuZXcgQmVuY2htYXJrLlN1aXRlO1xuc3VpdGVcbiAgICAuYWRkKCfmsqHorrDlv4YnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG51bVRyZWVzKDEwKTtcbiAgICB9KVxuICAgIC5hZGQoJ+acieiusOW/hicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbnVtVHJlZXNfMSgxMCk7XG4gICAgfSlcbiAgICAvLyBhZGQgbGlzdGVuZXJzXG4gICAgLm9uKCdjeWNsZScsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFN0cmluZyhldmVudC50YXJnZXQpKTtcbiAgICB9KVxuICAgIC5vbignY29tcGxldGUnLCBmdW5jdGlvbiAodGhpczogYW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGYXN0ZXN0IGlzICcgKyB0aGlzLmZpbHRlcignZmFzdGVzdCcpLm1hcCgnbmFtZScpKTtcbiAgICB9KVxuICAgIC8vIHJ1biBhc3luY1xuICAgIC5ydW4oeydhc3luYyc6IGZhbHNlfSk7XG4iXX0=