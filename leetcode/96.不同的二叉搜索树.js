"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function (n) {
  if (n === 0 || n === 1) return n;
  if (n === 2) return 2;
  if (n === 3) return 5;
  let result = 0;
  for (let i = 0; i <= n - 1; i++) {
    // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
    result += (numTrees(i) || 1) * (numTrees(n - 1 - i) || 1);
  }
  return result;
};
// 添加记忆化
var numTrees_1 = function (n) {
  const cache = {};
  return step(n);
  function step(n) {
    if (cache[n]) return cache[n];
    if (n === 0 || n === 1) return n;
    let result = 0;
    for (let i = 0; i <= n - 1; i++) {
      // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
      result += (step(i) || 1) * (step(n - 1 - i) || 1);
    }
    return (cache[n] = result);
  }
};
// 动态规划
const numTrees2 = (n) => {
  const list = Array(n + 1).fill(0);
  list[0] = 1; // 没有子树 1 种情况 很好理解
  list[1] = 1; // 由于是二叉搜素数 所以一定 只能成为 左子树 或者 右子树的一种
  for (let i = 2; i <= n; i++) {
    for (let j = 1; j <= i; j++) {
      list[i] += list[j - 1] * list[i - j];
    }
  }
  return list[n];
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(numTrees_1(2), 2);
assert_1.default.strictEqual(numTrees_1(3), 5);
assert_1.default.strictEqual(numTrees_1(5), 42);
assert_1.default.strictEqual(numTrees_1(10), 16796);
assert_1.default.strictEqual(numTrees2(2), 2);
assert_1.default.strictEqual(numTrees2(3), 5);
assert_1.default.strictEqual(numTrees2(5), 42);
assert_1.default.strictEqual(numTrees2(10), 16796);
const Benchmark = require("benchmark");
const suite = new Benchmark.Suite();
suite
  .add("没记忆", function () {
    numTrees(10);
  })
  .add("有记忆", function () {
    numTrees_1(10);
  })
  .add("动态规划", function () {
    numTrees2(10);
  })
  // add listeners
  .on("cycle", function (event) {
    console.log(String(event.target));
  })
  .on("complete", function () {
    console.log("Fastest is " + this.filter("fastest").map("name"));
  })
  // run async
  .run({ async: false });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYu5LiN5ZCM55qE5LqM5Y+J5pCc57Si5qCRLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS85Ni7kuI3lkIznmoTkuozlj4nmkJzntKLmoJEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBUztJQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLCtCQUErQjtRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLFFBQVE7QUFDUixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQVM7SUFDbEMsTUFBTSxLQUFLLEdBQThCLEVBQUUsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVmLFNBQVMsSUFBSSxDQUFDLENBQVM7UUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJ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Q2YsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLEtBQVU7SUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0tBQ0QsRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQyxDQUFDO0lBQ0YsWUFBWTtLQUNYLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7meWumuS4gOS4quaVtOaVsCBu77yM5rGC5LulIDEgLi4uIG4g5Li66IqC54K557uE5oiQ55qE5LqM5Y+J5pCc57Si5qCR5pyJ5aSa5bCR56eN77yfXG5cbuekuuS+izpcblxu6L6T5YWlOiAzXG7ovpPlh7o6IDVcbuino+mHijpcbue7meWumiBuID0gMywg5LiA5YWx5pyJIDUg56eN5LiN5ZCM57uT5p6E55qE5LqM5Y+J5pCc57Si5qCROlxuXG4gICAxICAgICAgICAgMyAgICAgMyAgICAgIDIgICAgICAxXG4gICAgXFwgICAgICAgLyAgICAgLyAgICAgIC8gXFwgICAgICBcXFxuICAgICAzICAgICAyICAgICAxICAgICAgMSAgIDMgICAgICAyXG4gICAgLyAgICAgLyAgICAgICBcXCAgICAgICAgICAgICAgICAgXFxcbiAgIDIgICAgIDEgICAgICAgICAyICAgICAgICAgICAgICAgICAzXG5cbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXG7pk77mjqXvvJpodHRwczovL2xlZXRjb2RlLWNuLmNvbS9wcm9ibGVtcy91bmlxdWUtYmluYXJ5LXNlYXJjaC10cmVlc1xu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXG4qICovXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnZhciBudW1UcmVlcyA9IGZ1bmN0aW9uIChuOiBudW1iZXIpOiBudW1iZXIge1xuICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSByZXR1cm4gbjtcbiAgaWYgKG4gPT09IDIpIHJldHVybiAyO1xuICBpZiAobiA9PT0gMykgcmV0dXJuIDU7XG5cbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IG4gLSAxOyBpKyspIHtcbiAgICAvLyDmjInnhafmr4/kuIDkuKrmlbDlrZcg5bCGIOWugyDku6Xlj4og5LuW55qEIOW3puS+pyDlj7Pkvqcg5YiG5Li65LiJ57uEXG4gICAgcmVzdWx0ICs9IChudW1UcmVlcyhpKSB8fCAxKSAqIChudW1UcmVlcyhuIC0gMSAtIGkpIHx8IDEpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIOa3u+WKoOiusOW/huWMllxudmFyIG51bVRyZWVzXzEgPSBmdW5jdGlvbiAobjogbnVtYmVyKTogbnVtYmVyIHtcbiAgY29uc3QgY2FjaGU6IHsgW2tleTogbnVtYmVyXTogbnVtYmVyIH0gPSB7fTtcbiAgcmV0dXJuIHN0ZXAobik7XG5cbiAgZnVuY3Rpb24gc3RlcChuOiBudW1iZXIpIHtcbiAgICBpZiAoY2FjaGVbbl0pIHJldHVybiBjYWNoZVtuXTtcbiAgICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSByZXR1cm4gbjtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBuIC0gMTsgaSsrKSB7XG4gICAgICAvLyDmjInnhafmr4/kuIDkuKrmlbDlrZcg5bCGIOWugyDku6Xlj4og5LuW55qEIOW3puS+pyDlj7Pkvqcg5YiG5Li65LiJ57uEXG4gICAgICByZXN1bHQgKz0gKHN0ZXAoaSkgfHwgMSkgKiAoc3RlcChuIC0gMSAtIGkpIHx8IDEpO1xuICAgIH1cblxuICAgIHJldHVybiAoY2FjaGVbbl0gPSByZXN1bHQpO1xuICB9XG59O1xuXG4vLyDliqjmgIHop4TliJJcbmNvbnN0IG51bVRyZWVzMiA9IChuOiBudW1iZXIpID0+IHtcbiAgY29uc3QgbGlzdCA9IEFycmF5KG4gKyAxKS5maWxsKDApO1xuICBsaXN0WzBdID0gMTsgLy8g5rKh5pyJ5a2Q5qCRIDEg56eN5oOF5Ya1IOW+iOWlveeQhuino1xuICBsaXN0WzFdID0gMTsgLy8g55Sx5LqO5piv5LqM5Y+J5pCc57Sg5pWwIOaJgOS7peS4gOWumiDlj6rog73miJDkuLog5bem5a2Q5qCRIOaIluiAhSDlj7PlrZDmoJHnmoTkuIDnp41cbiAgZm9yIChsZXQgaSA9IDI7IGkgPD0gbjsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDE7IGogPD0gaTsgaisrKSB7XG4gICAgICBsaXN0W2ldICs9IGxpc3RbaiAtIDFdICogbGlzdFtpIC0gal07XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0W25dO1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDIpLCAyKTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDMpLCA1KTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDUpLCA0Mik7XG5hc3NlcnQuc3RyaWN0RXF1YWwobnVtVHJlZXNfMSgxMCksIDE2Nzk2KTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKG51bVRyZWVzMigyKSwgMik7XG5hc3NlcnQuc3RyaWN0RXF1YWwobnVtVHJlZXMyKDMpLCA1KTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlczIoNSksIDQyKTtcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlczIoMTApLCAxNjc5Nik7XG5cbmNvbnN0IEJlbmNobWFyayA9IHJlcXVpcmUoXCJiZW5jaG1hcmtcIik7XG5jb25zdCBzdWl0ZSA9IG5ldyBCZW5jaG1hcmsuU3VpdGUoKTtcbnN1aXRlXG4gIC5hZGQoXCLmsqHorrDlv4ZcIiwgZnVuY3Rpb24gKCkge1xuICAgIG51bVRyZWVzKDEwKTtcbiAgfSlcbiAgLmFkZChcIuacieiusOW/hlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgbnVtVHJlZXNfMSgxMCk7XG4gIH0pXG4gIC5hZGQoXCLliqjmgIHop4TliJJcIiwgZnVuY3Rpb24gKCkge1xuICAgIG51bVRyZWVzMigxMCk7XG4gIH0pXG4gIC8vIGFkZCBsaXN0ZW5lcnNcbiAgLm9uKFwiY3ljbGVcIiwgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhTdHJpbmcoZXZlbnQudGFyZ2V0KSk7XG4gIH0pXG4gIC5vbihcImNvbXBsZXRlXCIsIGZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhcIkZhc3Rlc3QgaXMgXCIgKyB0aGlzLmZpbHRlcihcImZhc3Rlc3RcIikubWFwKFwibmFtZVwiKSk7XG4gIH0pXG4gIC8vIHJ1biBhc3luY1xuICAucnVuKHsgYXN5bmM6IGZhbHNlIH0pO1xuIl19
