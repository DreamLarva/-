"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:

输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function (n) {
    if (n === 0 || n === 1)
        return n;
    if (n === 2)
        return 2;
    if (n === 3)
        return 5;
    let result = 0;
    for (let i = 0; i <= n - 1; i++) {
        // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
        result += (numTrees(i) || 1) * (numTrees(n - 1 - i) || 1);
    }
    return result;
};
// 添加记忆化
var numTrees_1 = function (n) {
    const cache = {};
    return step(n);
    function step(n) {
        if (cache[n])
            return cache[n];
        if (n === 0 || n === 1)
            return n;
        let result = 0;
        for (let i = 0; i <= n - 1; i++) {
            // 按照每一个数字 将 它 以及 他的 左侧 右侧 分为三组
            result += (step(i) || 1) * (step(n - 1 - i) || 1);
        }
        return (cache[n] = result);
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(numTrees_1(2), 2);
assert_1.default.strictEqual(numTrees_1(3), 5);
assert_1.default.strictEqual(numTrees_1(5), 42);
assert_1.default.strictEqual(numTrees_1(10), 16796);
const Benchmark = require("benchmark");
const suite = new Benchmark.Suite();
suite
    .add("没记忆", function () {
    numTrees(10);
})
    .add("有记忆", function () {
    numTrees_1(10);
})
    // add listeners
    .on("cycle", function (event) {
    console.log(String(event.target));
})
    .on("complete", function () {
    console.log("Fastest is " + this.filter("fastest").map("name"));
})
    // run async
    .run({ async: false });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYu5LiN5ZCM55qE5LqM5Y+J5pCc57Si5qCRLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS85Ni7kuI3lkIznmoTkuozlj4nmkJzntKLmoJEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CSTtBQUNKOzs7R0FHRztBQUNILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBUztJQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLCtCQUErQjtRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMzRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLFFBQVE7QUFDUixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQVM7SUFDbEMsTUFBTSxLQUFLLEdBQThCLEVBQUUsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVmLFNBQVMsSUFBSSxDQUFDLENBQVM7UUFDckIsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsK0JBQStCO1lBQy9CLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUUxQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDcEMsS0FBSztLQUNGLEdBQUcsQ0FBQyxLQUFLLEVBQUU7SUFDVixRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDZixDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsS0FBSyxFQUFFO0lBQ1YsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztJQUNGLGdCQUFnQjtLQUNmLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFVO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztLQUNELEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztJQUNGLFlBQVk7S0FDWCxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbue7meWumuS4gOS4quaVtOaVsCBu77yM5rGC5LulwqAxIC4uLsKgbsKg5Li66IqC54K557uE5oiQ55qE5LqM5Y+J5pCc57Si5qCR5pyJ5aSa5bCR56eN77yfXHJcblxyXG7npLrkvos6XHJcblxyXG7ovpPlhaU6IDNcclxu6L6T5Ye6OiA1XHJcbuino+mHijpcclxu57uZ5a6aIG4gPSAzLCDkuIDlhbHmnIkgNSDnp43kuI3lkIznu5PmnoTnmoTkuozlj4nmkJzntKLmoJE6XHJcblxyXG4gICAxICAgICAgICAgMyAgICAgMyAgICAgIDIgICAgICAxXHJcbiAgICBcXCAgICAgICAvICAgICAvICAgICAgLyBcXCAgICAgIFxcXHJcbiAgICAgMyAgICAgMiAgICAgMSAgICAgIDEgICAzICAgICAgMlxyXG4gICAgLyAgICAgLyAgICAgICBcXCAgICAgICAgICAgICAgICAgXFxcclxuICAgMiAgICAgMSAgICAgICAgIDIgICAgICAgICAgICAgICAgIDNcclxuXHJcbuadpea6kO+8muWKm+aJo++8iExlZXRDb2Rl77yJXHJcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL3VuaXF1ZS1iaW5hcnktc2VhcmNoLXRyZWVzXHJcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxyXG4qICovXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gblxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgbnVtVHJlZXMgPSBmdW5jdGlvbiAobjogbnVtYmVyKTogbnVtYmVyIHtcclxuICBpZiAobiA9PT0gMCB8fCBuID09PSAxKSByZXR1cm4gbjtcclxuICBpZiAobiA9PT0gMikgcmV0dXJuIDI7XHJcbiAgaWYgKG4gPT09IDMpIHJldHVybiA1O1xyXG5cclxuICBsZXQgcmVzdWx0ID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8PSBuIC0gMTsgaSsrKSB7XHJcbiAgICAvLyDmjInnhafmr4/kuIDkuKrmlbDlrZcg5bCGIOWugyDku6Xlj4og5LuW55qEIOW3puS+pyDlj7Pkvqcg5YiG5Li65LiJ57uEXHJcbiAgICByZXN1bHQgKz0gKG51bVRyZWVzKGkpIHx8IDEpICogKG51bVRyZWVzKG4gLSAxIC0gaSkgfHwgMSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuLy8g5re75Yqg6K6w5b+G5YyWXHJcbnZhciBudW1UcmVlc18xID0gZnVuY3Rpb24gKG46IG51bWJlcik6IG51bWJlciB7XHJcbiAgY29uc3QgY2FjaGU6IHsgW2tleTogbnVtYmVyXTogbnVtYmVyIH0gPSB7fTtcclxuICByZXR1cm4gc3RlcChuKTtcclxuXHJcbiAgZnVuY3Rpb24gc3RlcChuOiBudW1iZXIpIHtcclxuICAgIGlmIChjYWNoZVtuXSkgcmV0dXJuIGNhY2hlW25dO1xyXG4gICAgaWYgKG4gPT09IDAgfHwgbiA9PT0gMSkgcmV0dXJuIG47XHJcbiAgICBsZXQgcmVzdWx0ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG4gLSAxOyBpKyspIHtcclxuICAgICAgLy8g5oyJ54Wn5q+P5LiA5Liq5pWw5a2XIOWwhiDlroMg5Lul5Y+KIOS7lueahCDlt6bkvqcg5Y+z5L6nIOWIhuS4uuS4iee7hFxyXG4gICAgICByZXN1bHQgKz0gKHN0ZXAoaSkgfHwgMSkgKiAoc3RlcChuIC0gMSAtIGkpIHx8IDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoY2FjaGVbbl0gPSByZXN1bHQpO1xyXG4gIH1cclxufTtcclxuXHJcbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xyXG5cclxuYXNzZXJ0LnN0cmljdEVxdWFsKG51bVRyZWVzXzEoMiksIDIpO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwobnVtVHJlZXNfMSgzKSwgNSk7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDUpLCA0Mik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChudW1UcmVlc18xKDEwKSwgMTY3OTYpO1xyXG5cclxuY29uc3QgQmVuY2htYXJrID0gcmVxdWlyZShcImJlbmNobWFya1wiKTtcclxuY29uc3Qgc3VpdGUgPSBuZXcgQmVuY2htYXJrLlN1aXRlKCk7XHJcbnN1aXRlXHJcbiAgLmFkZChcIuayoeiusOW/hlwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBudW1UcmVlcygxMCk7XHJcbiAgfSlcclxuICAuYWRkKFwi5pyJ6K6w5b+GXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIG51bVRyZWVzXzEoMTApO1xyXG4gIH0pXHJcbiAgLy8gYWRkIGxpc3RlbmVyc1xyXG4gIC5vbihcImN5Y2xlXCIsIGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhTdHJpbmcoZXZlbnQudGFyZ2V0KSk7XHJcbiAgfSlcclxuICAub24oXCJjb21wbGV0ZVwiLCBmdW5jdGlvbiAodGhpczogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkZhc3Rlc3QgaXMgXCIgKyB0aGlzLmZpbHRlcihcImZhc3Rlc3RcIikubWFwKFwibmFtZVwiKSk7XHJcbiAgfSlcclxuICAvLyBydW4gYXN5bmNcclxuICAucnVuKHsgYXN5bmM6IGZhbHNlIH0pO1xyXG4iXX0=