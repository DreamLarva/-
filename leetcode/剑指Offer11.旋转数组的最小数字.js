"use strict";
/*
剑指 Offer 11. 旋转数组的最小数字
把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。

示例 1：

输入：[3,4,5,1,2]
输出：1
示例 2：

输入：[2,2,2,0,1]
输出：0
注意：本题与主站 154 题相同：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/
* */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 与 153.寻找旋转排序数组中的最小值.ts 不同点 仅在于 可能存在重复点
 * */
function minArray(numbers) {
    if (numbers.length === 1)
        return numbers[0];
    /**
     * 依然是二分法
     * */
    let left = 0;
    let right = numbers.length - 1;
    while (left < right) {
        if (left + 1 === right)
            return Math.min(numbers[left], numbers[right]);
        const mid = Math.ceil((left + right) / 2);
        // 如果 mid  和 right 相等 则值可能在左边也可能在右边
        // 官方推荐的方法 是 直接right 向左移一格
        if (numbers[mid] === numbers[right]) {
            right -= 1;
        }
        else if (numbers[mid] > numbers[right]) {
            left = mid + 1;
        }
        else {
            right = mid;
        }
    }
    return numbers[right];
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(minArray([3, 4, 5, 1, 2]), 1);
assert_1.default.strictEqual(minArray([2, 2, 2, 0, 1]), 0);
assert_1.default.strictEqual(minArray([4, 5, 6, 7, 0, 1, 2]), 0);
assert_1.default.strictEqual(minArray([2, 3, 1]), 1);
assert_1.default.strictEqual(minArray([10, 10, 10, 1, 10]), 1);
assert_1.default.strictEqual(minArray([1, 3, 3]), 1);
assert_1.default.strictEqual(minArray([3, 1, 1]), 1);
assert_1.default.strictEqual(minArray([3, 1, 3, 3]), 1);
assert_1.default.strictEqual(minArray([3, 1, 3, 3]), 1);
assert_1.default.strictEqual(minArray([1, 1, 1, 3]), 1);
assert_1.default.strictEqual(minArray([1, 3, 1, 1]), 1);
assert_1.default.strictEqual(minArray([10, 10, 10, 10, 10, 1, 10, 10, 10]), 1);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoi5YmR5oyHT2ZmZXIxMS7ml4vovazmlbDnu4TnmoTmnIDlsI/mlbDlrZcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlL+WJkeaMh09mZmVyMTEu5peL6L2s5pWw57uE55qE5pyA5bCP5pWw5a2XLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7OztJQWFJOzs7OztBQUVKOztLQUVLO0FBQ0wsU0FBUyxRQUFRLENBQUMsT0FBaUI7SUFDakMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1Qzs7U0FFSztJQUNMLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sSUFBSSxHQUFHLEtBQUssRUFBRTtRQUNuQixJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxQyxtQ0FBbUM7UUFDbkMsMEJBQTBCO1FBQzFCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQyxLQUFLLElBQUksQ0FBQyxDQUFDO1NBQ1o7YUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDaEI7YUFBTTtZQUNMLEtBQUssR0FBRyxHQUFHLENBQUM7U0FDYjtLQUNGO0lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVELG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNqRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMzQyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyRCxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0MsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QyxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLGdCQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbuWJkeaMhyBPZmZlciAxMS4g5peL6L2s5pWw57uE55qE5pyA5bCP5pWw5a2XXG7miorkuIDkuKrmlbDnu4TmnIDlvIDlp4vnmoToi6XlubLkuKrlhYPntKDmkKzliLDmlbDnu4TnmoTmnKvlsL7vvIzmiJHku6znp7DkuYvkuLrmlbDnu4TnmoTml4vovazjgILovpPlhaXkuIDkuKrpgJLlop7mjpLluo/nmoTmlbDnu4TnmoTkuIDkuKrml4vovazvvIzovpPlh7rml4vovazmlbDnu4TnmoTmnIDlsI/lhYPntKDjgILkvovlpoLvvIzmlbDnu4QgWzMsNCw1LDEsMl0g5Li6IFsxLDIsMyw0LDVdIOeahOS4gOS4quaXi+i9rO+8jOivpeaVsOe7hOeahOacgOWwj+WAvOS4ujHjgIJcblxu56S65L6LIDHvvJpcblxu6L6T5YWl77yaWzMsNCw1LDEsMl1cbui+k+WHuu+8mjFcbuekuuS+iyAy77yaXG5cbui+k+WFpe+8mlsyLDIsMiwwLDFdXG7ovpPlh7rvvJowXG7ms6jmhI/vvJrmnKzpopjkuI7kuLvnq5kgMTU0IOmimOebuOWQjO+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL2ZpbmQtbWluaW11bS1pbi1yb3RhdGVkLXNvcnRlZC1hcnJheS1paS9cbiogKi9cblxuLyoqXG4gKiDkuI4gMTUzLuWvu+aJvuaXi+i9rOaOkuW6j+aVsOe7hOS4reeahOacgOWwj+WAvC50cyDkuI3lkIzngrkg5LuF5Zyo5LqOIOWPr+iDveWtmOWcqOmHjeWkjeeCuVxuICogKi9cbmZ1bmN0aW9uIG1pbkFycmF5KG51bWJlcnM6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgaWYgKG51bWJlcnMubGVuZ3RoID09PSAxKSByZXR1cm4gbnVtYmVyc1swXTtcbiAgLyoqXG4gICAqIOS+neeEtuaYr+S6jOWIhuazlVxuICAgKiAqL1xuICBsZXQgbGVmdCA9IDA7XG4gIGxldCByaWdodCA9IG51bWJlcnMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIGlmIChsZWZ0ICsgMSA9PT0gcmlnaHQpIHJldHVybiBNYXRoLm1pbihudW1iZXJzW2xlZnRdLCBudW1iZXJzW3JpZ2h0XSk7XG4gICAgY29uc3QgbWlkID0gTWF0aC5jZWlsKChsZWZ0ICsgcmlnaHQpIC8gMik7XG5cbiAgICAvLyDlpoLmnpwgbWlkICDlkowgcmlnaHQg55u4562JIOWImeWAvOWPr+iDveWcqOW3pui+ueS5n+WPr+iDveWcqOWPs+i+uVxuICAgIC8vIOWumOaWueaOqOiNkOeahOaWueazlSDmmK8g55u05o6lcmlnaHQg5ZCR5bem56e75LiA5qC8XG4gICAgaWYgKG51bWJlcnNbbWlkXSA9PT0gbnVtYmVyc1tyaWdodF0pIHtcbiAgICAgIHJpZ2h0IC09IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXJzW21pZF0gPiBudW1iZXJzW3JpZ2h0XSkge1xuICAgICAgbGVmdCA9IG1pZCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0ID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyc1tyaWdodF07XG59XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwobWluQXJyYXkoWzMsIDQsIDUsIDEsIDJdKSwgMSk7XG5hc3NlcnQuc3RyaWN0RXF1YWwobWluQXJyYXkoWzIsIDIsIDIsIDAsIDFdKSwgMCk7XG5hc3NlcnQuc3RyaWN0RXF1YWwobWluQXJyYXkoWzQsIDUsIDYsIDcsIDAsIDEsIDJdKSwgMCk7XG5hc3NlcnQuc3RyaWN0RXF1YWwobWluQXJyYXkoWzIsIDMsIDFdKSwgMSk7XG5hc3NlcnQuc3RyaWN0RXF1YWwobWluQXJyYXkoWzEwLCAxMCwgMTAsIDEsIDEwXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFsxLCAzLCAzXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFszLCAxLCAxXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFszLCAxLCAzLCAzXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFszLCAxLCAzLCAzXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFsxLCAxLCAxLCAzXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFsxLCAzLCAxLCAxXSksIDEpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKG1pbkFycmF5KFsxMCwgMTAsIDEwLCAxMCwgMTAsIDEsIDEwLCAxMCwgMTBdKSwgMSk7XG4iXX0=