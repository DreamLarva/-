"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
56. 合并区间
给出一个区间的集合，请合并所有重叠的区间。



示例 1:

输入: intervals = [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: intervals = [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。
注意：输入类型已于2019年4月15日更改。 请重置默认代码定义以获取新方法签名。



提示：
  intervals[i][0] <= intervals[i][1]
* */
function merge(intervals) {
    // 按照最左侧数据排序
    intervals.sort(([a], [b]) => a - b);
    const result = [];
    result.push(intervals[0]);
    for (let i = 1; i < intervals.length; i++) {
        const last = result[result.length - 1];
        const current = intervals[i];
        if (current[0] <= last[1]) {
            // 现在的区域 与上个区域重叠 将上一个区域拓展
            result[result.length - 1][1] = Math.max(current[1], last[1]);
            continue;
        }
        result.push(current);
    }
    return result;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(merge([
    [1, 3],
    [2, 6],
    [8, 10],
    [15, 18],
]), [
    [1, 6],
    [8, 10],
    [15, 18],
]);
assert_1.default.deepStrictEqual(merge([
    [1, 4],
    [4, 5],
]), [[1, 5]]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYu5ZCI5bm25Yy66Ze0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS81Ni7lkIjlubbljLrpl7QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXNCSTtBQUNKLFNBQVMsS0FBSyxDQUFDLFNBQXFCO0lBQ2xDLFlBQVk7SUFDWixTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFcEMsTUFBTSxNQUFNLEdBQWUsRUFBRSxDQUFDO0lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdCLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6Qix5QkFBeUI7WUFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0QsU0FBUztTQUNWO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0QjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxvREFBNEI7QUFFNUIsZ0JBQU0sQ0FBQyxlQUFlLENBQ3BCLEtBQUssQ0FBQztJQUNKLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNQLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztDQUNULENBQUMsRUFDRjtJQUNFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUNQLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztDQUNULENBQ0YsQ0FBQztBQUVGLGdCQUFNLENBQUMsZUFBZSxDQUNwQixLQUFLLENBQUM7SUFDSixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDUCxDQUFDLEVBQ0YsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuNTYuIOWQiOW5tuWMuumXtFxu57uZ5Ye65LiA5Liq5Yy66Ze055qE6ZuG5ZCI77yM6K+35ZCI5bm25omA5pyJ6YeN5Y+g55qE5Yy66Ze044CCXG5cblxuXG7npLrkvosgMTpcblxu6L6T5YWlOiBpbnRlcnZhbHMgPSBbWzEsM10sWzIsNl0sWzgsMTBdLFsxNSwxOF1dXG7ovpPlh7o6IFtbMSw2XSxbOCwxMF0sWzE1LDE4XV1cbuino+mHijog5Yy66Ze0IFsxLDNdIOWSjCBbMiw2XSDph43lj6AsIOWwhuWug+S7rOWQiOW5tuS4uiBbMSw2XS5cbuekuuS+iyAyOlxuXG7ovpPlhaU6IGludGVydmFscyA9IFtbMSw0XSxbNCw1XV1cbui+k+WHujogW1sxLDVdXVxu6Kej6YeKOiDljLrpl7QgWzEsNF0g5ZKMIFs0LDVdIOWPr+iiq+inhuS4uumHjeWPoOWMuumXtOOAglxu5rOo5oSP77ya6L6T5YWl57G75Z6L5bey5LqOMjAxOeW5tDTmnIgxNeaXpeabtOaUueOAgiDor7fph43nva7pu5jorqTku6PnoIHlrprkuYnku6Xojrflj5bmlrDmlrnms5Xnrb7lkI3jgIJcblxuXG5cbuaPkOekuu+8mlxuICBpbnRlcnZhbHNbaV1bMF0gPD0gaW50ZXJ2YWxzW2ldWzFdXG4qICovXG5mdW5jdGlvbiBtZXJnZShpbnRlcnZhbHM6IG51bWJlcltdW10pOiBudW1iZXJbXVtdIHtcbiAgLy8g5oyJ54Wn5pyA5bem5L6n5pWw5o2u5o6S5bqPXG4gIGludGVydmFscy5zb3J0KChbYV0sIFtiXSkgPT4gYSAtIGIpO1xuXG4gIGNvbnN0IHJlc3VsdDogbnVtYmVyW11bXSA9IFtdO1xuICByZXN1bHQucHVzaChpbnRlcnZhbHNbMF0pO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgaW50ZXJ2YWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGFzdCA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgY3VycmVudCA9IGludGVydmFsc1tpXTtcblxuICAgIGlmIChjdXJyZW50WzBdIDw9IGxhc3RbMV0pIHtcbiAgICAgIC8vIOeOsOWcqOeahOWMuuWfnyDkuI7kuIrkuKrljLrln5/ph43lj6Ag5bCG5LiK5LiA5Liq5Yy65Z+f5ouT5bGVXG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdWzFdID0gTWF0aC5tYXgoY3VycmVudFsxXSwgbGFzdFsxXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICBtZXJnZShbXG4gICAgWzEsIDNdLFxuICAgIFsyLCA2XSxcbiAgICBbOCwgMTBdLFxuICAgIFsxNSwgMThdLFxuICBdKSxcbiAgW1xuICAgIFsxLCA2XSxcbiAgICBbOCwgMTBdLFxuICAgIFsxNSwgMThdLFxuICBdXG4pO1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICBtZXJnZShbXG4gICAgWzEsIDRdLFxuICAgIFs0LCA1XSxcbiAgXSksXG4gIFtbMSwgNV1dXG4pO1xuIl19