"use strict";
/*
将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：

L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。

请你实现这个将字符串进行指定行数变换的函数：

string convert(string s, int numRows);
示例 1:

输入: s = "LEETCODEISHIRING", numRows = 3
输出: "LCIRETOESIIGEDHN"
示例 2:

输入: s = "LEETCODEISHIRING", numRows = 4
输出: "LDREOEIIECIHNTSG"
解释:

L     D     R
E   O E   I I
E C   I H   N
T     S     G
* */
/**
 * @param {string} s
 * @param {number} numRows
 * @return {string}
 */
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
function convert(s, numRows) {
  if (s.length === 0 || numRows === 1) return s;
  const arr = new Array(numRows).fill(1).map(() => []);
  const strLen = s.length;
  const loopArr = explainLoopArr(numRows);
  for (let i = 0, k = 0; i < strLen; k++) {
    let { loopTime, startIndex, order } = byStep(loopArr, k);
    // console.log(byStep(loopArr, k));
    for (let j = 0; j < loopTime && i < strLen; j++) {
      arr[startIndex].push(s[i]);
      startIndex += order;
      i++;
    }
    // console.log(arr.join("\n"));
  }
  return Array.prototype.concat.apply([], arr).join("");
}
function explainLoopArr(num) {
  const result = [];
  let times = 2;
  while (num >= 1 && times-- > 0) {
    result.push(num);
    num -= 2;
  }
  return [...result, ...result.slice(1, -1)];
}
function byStep(arr, k) {
  const arrLength = arr.length;
  const loopTime = k % arrLength;
  const order = k % 2 === 0 || arrLength === 1 ? 1 : -1;
  const startIndex =
    k % 2 === 0 || arrLength === 1
      ? (arr[0] - arr[loopTime]) / 2
      : arr[0] - 1 - (arr[0] - arr[loopTime]) / 2;
  return {
    loopTime: arr[loopTime],
    startIndex,
    order,
  };
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(
  convert("LEETCODEISHIRING", 3),
  "LCIRETOESIIGEDHN"
);
assert_1.default.strictEqual(
  convert("LEETCODEISHIRING", 4),
  "LDREOEIIECIHNTSG"
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5a5a2X5b2i5Y+Y5o2iLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS82LlrlrZflvaLlj5jmjaIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUEyQkk7QUFDSjs7OztHQUlHOzs7OztBQUVILFNBQVMsT0FBTyxDQUFDLENBQVMsRUFBRSxPQUFlO0lBQ3ZDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxNQUFNLEdBQUcsR0FBZSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDeEIsTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxJQUFJLEVBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELG1DQUFtQztRQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixVQUFVLElBQUksS0FBSyxDQUFDO1lBQ3BCLENBQUMsRUFBRSxDQUFDO1NBQ1A7UUFDRCwrQkFBK0I7S0FDbEM7SUFHRCxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFHRCxTQUFTLGNBQWMsQ0FBQyxHQUFXO0lBQy9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNsQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNaO0lBQ0QsT0FBTyxDQUFDLEdBQUcsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxHQUFhLEVBQUUsQ0FBUztJQUNwQyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBRTdCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7SUFFL0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBR2hELE9BQU87UUFDSCxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUN2QixVQUFVO1FBQ1YsS0FBSztLQUNSLENBQUM7QUFDTixDQUFDO0FBRUQsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUNkLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFDOUIsa0JBQWtCLENBQ3JCLENBQUM7QUFDRixnQkFBTSxDQUFDLFdBQVcsQ0FDZCxPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQzlCLGtCQUFrQixDQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxu5bCG5LiA5Liq57uZ5a6a5a2X56ym5Liy5qC55o2u57uZ5a6a55qE6KGM5pWw77yM5Lul5LuO5LiK5b6A5LiL44CB5LuO5bem5Yiw5Y+z6L+b6KGMIFog5a2X5b2i5o6S5YiX44CCXHJcblxyXG7mr5TlpoLovpPlhaXlrZfnrKbkuLLkuLogXCJMRUVUQ09ERUlTSElSSU5HXCIg6KGM5pWw5Li6IDMg5pe277yM5o6S5YiX5aaC5LiL77yaXHJcblxyXG5MICAgQyAgIEkgICBSXHJcbkUgVCBPIEUgUyBJIEkgR1xyXG5FICAgRCAgIEggICBOXHJcbuS5i+WQju+8jOS9oOeahOi+k+WHuumcgOimgeS7juW3puW+gOWPs+mAkOihjOivu+WPlu+8jOS6p+eUn+WHuuS4gOS4quaWsOeahOWtl+espuS4su+8jOavlOWmgu+8mlwiTENJUkVUT0VTSUlHRURITlwi44CCXHJcblxyXG7or7fkvaDlrp7njrDov5nkuKrlsIblrZfnrKbkuLLov5vooYzmjIflrprooYzmlbDlj5jmjaLnmoTlh73mlbDvvJpcclxuXHJcbnN0cmluZyBjb252ZXJ0KHN0cmluZyBzLCBpbnQgbnVtUm93cyk7XHJcbuekuuS+iyAxOlxyXG5cclxu6L6T5YWlOiBzID0gXCJMRUVUQ09ERUlTSElSSU5HXCIsIG51bVJvd3MgPSAzXHJcbui+k+WHujogXCJMQ0lSRVRPRVNJSUdFREhOXCJcclxu56S65L6LIDI6XHJcblxyXG7ovpPlhaU6IHMgPSBcIkxFRVRDT0RFSVNISVJJTkdcIiwgbnVtUm93cyA9IDRcclxu6L6T5Ye6OiBcIkxEUkVPRUlJRUNJSE5UU0dcIlxyXG7op6Pph4o6XHJcblxyXG5MICAgICBEICAgICBSXHJcbkUgICBPIEUgICBJIElcclxuRSBDICAgSSBIICAgTlxyXG5UICAgICBTICAgICBHXHJcbiogKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1Sb3dzXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcblxyXG5mdW5jdGlvbiBjb252ZXJ0KHM6IHN0cmluZywgbnVtUm93czogbnVtYmVyKSB7XHJcbiAgICBpZiAocy5sZW5ndGggPT09IDAgfHwgbnVtUm93cyA9PT0gMSkgcmV0dXJuIHM7XHJcbiAgICBjb25zdCBhcnI6IHN0cmluZ1tdW10gPSBuZXcgQXJyYXkobnVtUm93cykuZmlsbCgxKS5tYXAoKCkgPT4gW10pO1xyXG4gICAgY29uc3Qgc3RyTGVuID0gcy5sZW5ndGg7XHJcbiAgICBjb25zdCBsb29wQXJyID0gZXhwbGFpbkxvb3BBcnIobnVtUm93cyk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgayA9IDA7IGkgPCBzdHJMZW47IGsrKykge1xyXG4gICAgICAgIGxldCB7bG9vcFRpbWUsIHN0YXJ0SW5kZXgsIG9yZGVyfSA9IGJ5U3RlcChsb29wQXJyLCBrKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhieVN0ZXAobG9vcEFyciwgaykpO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbG9vcFRpbWUgJiYgaSA8IHN0ckxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgIGFycltzdGFydEluZGV4XS5wdXNoKHNbaV0pO1xyXG4gICAgICAgICAgICBzdGFydEluZGV4ICs9IG9yZGVyO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGFyci5qb2luKFwiXFxuXCIpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGFycikuam9pbihcIlwiKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGV4cGxhaW5Mb29wQXJyKG51bTogbnVtYmVyKTogbnVtYmVyW10ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBsZXQgdGltZXMgPSAyO1xyXG4gICAgd2hpbGUgKG51bSA+PSAxICYmIHRpbWVzLS0gPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2gobnVtKTtcclxuICAgICAgICBudW0gLT0gMjtcclxuICAgIH1cclxuICAgIHJldHVybiBbLi4ucmVzdWx0LCAuLi5yZXN1bHQuc2xpY2UoMSwgLTEpXTtcclxufVxyXG5cclxuZnVuY3Rpb24gYnlTdGVwKGFycjogbnVtYmVyW10sIGs6IG51bWJlcikge1xyXG4gICAgY29uc3QgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCBsb29wVGltZSA9IGsgJSBhcnJMZW5ndGg7XHJcblxyXG4gICAgY29uc3Qgb3JkZXIgPSBrICUgMiA9PT0gMCB8fCBhcnJMZW5ndGggPT09IDEgPyAxIDogLTE7XHJcbiAgICBjb25zdCBzdGFydEluZGV4ID0gayAlIDIgPT09IDAgfHwgYXJyTGVuZ3RoID09PSAxID9cclxuICAgICAgICAoYXJyWzBdIC0gYXJyW2xvb3BUaW1lXSkgLyAyIDpcclxuICAgICAgICAoYXJyWzBdIC0gMSkgLSAoYXJyWzBdIC0gYXJyW2xvb3BUaW1lXSkgLyAyO1xyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvb3BUaW1lOiBhcnJbbG9vcFRpbWVdLFxyXG4gICAgICAgIHN0YXJ0SW5kZXgsXHJcbiAgICAgICAgb3JkZXIsXHJcbiAgICB9O1xyXG59XHJcblxyXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcclxuXHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICAgIGNvbnZlcnQoJ0xFRVRDT0RFSVNISVJJTkcnLCAzKSxcclxuICAgICdMQ0lSRVRPRVNJSUdFREhOJyxcclxuKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gICAgY29udmVydCgnTEVFVENPREVJU0hJUklORycsIDQpLFxyXG4gICAgJ0xEUkVPRUlJRUNJSE5UU0cnLFxyXG4pO1xyXG4iXX0=
