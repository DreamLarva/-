"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。
* */
const BinaryTree_1 = require("../util/BinaryTree");
const assert_1 = __importDefault(require("assert"));
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function (root) {
    /**
     * 注意 子树是 所有子节点 如果是 隔一层当然也算啊
     * */
    if (root === null)
        return true;
    let left_result = true;
    let right_result = true;
    if (root.left) {
        left_result = isStepBelow(root.left, root.val) && isValidBST(root.left);
    }
    if (root.right) {
        right_result = isStepUpper(root.right, root.val) && isValidBST(root.right);
    }
    return left_result && right_result;
};
// 该节点的所有子节点都大于目标值
function isStepUpper(node, num) {
    if (node === null)
        return true;
    if (node.val <= num)
        return false;
    return isStepUpper(node.left, num) && isStepUpper(node.right, num);
}
// 该几点的所有子节点都小s于目标值
function isStepBelow(node, num) {
    if (node === null)
        return true;
    if (node.val >= num)
        return false;
    return isStepBelow(node.left, num) && isStepBelow(node.right, num);
}
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([])), true);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([1, 1])), false);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([2, 1, 3])), true);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([5, 3, 7, 2, 4, 6, 8])), true);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([5, 3, 7, 2, 10, 6, 8])), false);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([5, 1, 4, null, null, 3, 6])), false);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([10, 5, 15, null, null, 6, 20])), false);
assert_1.default.strictEqual(isValidBST(BinaryTree_1.createBinaryTree([3, null, 30, 10, null, null, 15, null, 45])), false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgu6aqM6K+B5LqM5Y+J5pCc57Si5qCRLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS85OC7pqozor4Hkuozlj4nmkJzntKLmoJEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUEwQkk7QUFDSixtREFBZ0U7QUFDaEUsb0RBQThDO0FBRTlDOzs7R0FHRztBQUNILElBQUksVUFBVSxHQUFHLFVBQVUsSUFBNkI7SUFDdEQ7O1NBRUs7SUFDTCxJQUFJLElBQUksS0FBSyxJQUFJO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDL0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztJQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDYixXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekU7SUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZCxZQUFZLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDNUU7SUFFRCxPQUFPLFdBQVcsSUFBSSxZQUFZLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUYsa0JBQWtCO0FBQ2xCLFNBQVMsV0FBVyxDQUFDLElBQTZCLEVBQUUsR0FBVztJQUM3RCxJQUFJLElBQUksS0FBSyxJQUFJO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDL0IsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUc7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNsQyxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFFRCxtQkFBbUI7QUFDbkIsU0FBUyxXQUFXLENBQUMsSUFBNkIsRUFBRSxHQUFXO0lBQzdELElBQUksSUFBSSxLQUFLLElBQUk7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMvQixJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQ2xDLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUVELGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyw2QkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNELGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEUsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEUsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlFLGdCQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRixnQkFBTSxDQUFDLFdBQVcsQ0FDaEIsVUFBVSxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN6RCxLQUFLLENBQ04sQ0FBQztBQUNGLGdCQUFNLENBQUMsV0FBVyxDQUNoQixVQUFVLENBQUMsNkJBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQzVELEtBQUssQ0FDTixDQUFDO0FBQ0YsZ0JBQU0sQ0FBQyxXQUFXLENBQ2hCLFVBQVUsQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUN6RSxLQUFLLENBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbue7meWumuS4gOS4quS6jOWPieagke+8jOWIpOaWreWFtuaYr+WQpuaYr+S4gOS4quacieaViOeahOS6jOWPieaQnOe0ouagkeOAglxyXG5cclxu5YGH6K6+5LiA5Liq5LqM5Y+J5pCc57Si5qCR5YW35pyJ5aaC5LiL54m55b6B77yaXHJcblxyXG7oioLngrnnmoTlt6blrZDmoJHlj6rljIXlkKvlsI/kuo7lvZPliY3oioLngrnnmoTmlbDjgIJcclxu6IqC54K555qE5Y+z5a2Q5qCR5Y+q5YyF5ZCr5aSn5LqO5b2T5YmN6IqC54K555qE5pWw44CCXHJcbuaJgOacieW3puWtkOagkeWSjOWPs+WtkOagkeiHqui6q+W/hemhu+S5n+aYr+S6jOWPieaQnOe0ouagkeOAglxyXG7npLrkvosgMTpcclxuXHJcbui+k+WFpTpcclxuICAgIDJcclxuICAgLyBcXFxyXG4gIDEgICAzXHJcbui+k+WHujogdHJ1ZVxyXG7npLrkvosgMjpcclxuXHJcbui+k+WFpTpcclxuICAgIDVcclxuICAgLyBcXFxyXG4gIDEgICA0XHJcbiAgICAgLyBcXFxyXG4gICAgMyAgIDZcclxu6L6T5Ye6OiBmYWxzZVxyXG7op6Pph4o6IOi+k+WFpeS4ujogWzUsMSw0LG51bGwsbnVsbCwzLDZd44CCXHJcbiAgICAg5qC56IqC54K555qE5YC85Li6IDUg77yM5L2G5piv5YW25Y+z5a2Q6IqC54K55YC85Li6IDQg44CCXHJcbiogKi9cclxuaW1wb3J0IHsgY3JlYXRlQmluYXJ5VHJlZSwgVHJlZU5vZGUgfSBmcm9tIFwiLi4vdXRpbC9CaW5hcnlUcmVlXCI7XHJcbmltcG9ydCBhc3NlcnQsIHsgbm90RGVlcEVxdWFsIH0gZnJvbSBcImFzc2VydFwiO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7VHJlZU5vZGV9IHJvb3RcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1ZhbGlkQlNUID0gZnVuY3Rpb24gKHJvb3Q6IFRyZWVOb2RlPG51bWJlcj4gfCBudWxsKTogYm9vbGVhbiB7XHJcbiAgLyoqXHJcbiAgICog5rOo5oSPIOWtkOagkeaYryDmiYDmnInlrZDoioLngrkg5aaC5p6c5pivIOmalOS4gOWxguW9k+eEtuS5n+eul+WVilxyXG4gICAqICovXHJcbiAgaWYgKHJvb3QgPT09IG51bGwpIHJldHVybiB0cnVlO1xyXG4gIGxldCBsZWZ0X3Jlc3VsdCA9IHRydWU7XHJcbiAgbGV0IHJpZ2h0X3Jlc3VsdCA9IHRydWU7XHJcbiAgaWYgKHJvb3QubGVmdCkge1xyXG4gICAgbGVmdF9yZXN1bHQgPSBpc1N0ZXBCZWxvdyhyb290LmxlZnQsIHJvb3QudmFsKSAmJiBpc1ZhbGlkQlNUKHJvb3QubGVmdCk7XHJcbiAgfVxyXG5cclxuICBpZiAocm9vdC5yaWdodCkge1xyXG4gICAgcmlnaHRfcmVzdWx0ID0gaXNTdGVwVXBwZXIocm9vdC5yaWdodCwgcm9vdC52YWwpICYmIGlzVmFsaWRCU1Qocm9vdC5yaWdodCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbGVmdF9yZXN1bHQgJiYgcmlnaHRfcmVzdWx0O1xyXG59O1xyXG5cclxuLy8g6K+l6IqC54K555qE5omA5pyJ5a2Q6IqC54K56YO95aSn5LqO55uu5qCH5YC8XHJcbmZ1bmN0aW9uIGlzU3RlcFVwcGVyKG5vZGU6IFRyZWVOb2RlPG51bWJlcj4gfCBudWxsLCBudW06IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gIGlmIChub2RlID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcclxuICBpZiAobm9kZS52YWwgPD0gbnVtKSByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIGlzU3RlcFVwcGVyKG5vZGUubGVmdCwgbnVtKSAmJiBpc1N0ZXBVcHBlcihub2RlLnJpZ2h0LCBudW0pO1xyXG59XHJcblxyXG4vLyDor6Xlh6DngrnnmoTmiYDmnInlrZDoioLngrnpg73lsI9z5LqO55uu5qCH5YC8XHJcbmZ1bmN0aW9uIGlzU3RlcEJlbG93KG5vZGU6IFRyZWVOb2RlPG51bWJlcj4gfCBudWxsLCBudW06IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gIGlmIChub2RlID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcclxuICBpZiAobm9kZS52YWwgPj0gbnVtKSByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIGlzU3RlcEJlbG93KG5vZGUubGVmdCwgbnVtKSAmJiBpc1N0ZXBCZWxvdyhub2RlLnJpZ2h0LCBudW0pO1xyXG59XHJcblxyXG5hc3NlcnQuc3RyaWN0RXF1YWwoaXNWYWxpZEJTVChjcmVhdGVCaW5hcnlUcmVlKFtdKSksIHRydWUpO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoaXNWYWxpZEJTVChjcmVhdGVCaW5hcnlUcmVlKFsxLCAxXSkpLCBmYWxzZSk7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChpc1ZhbGlkQlNUKGNyZWF0ZUJpbmFyeVRyZWUoWzIsIDEsIDNdKSksIHRydWUpO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoaXNWYWxpZEJTVChjcmVhdGVCaW5hcnlUcmVlKFs1LCAzLCA3LCAyLCA0LCA2LCA4XSkpLCB0cnVlKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKGlzVmFsaWRCU1QoY3JlYXRlQmluYXJ5VHJlZShbNSwgMywgNywgMiwgMTAsIDYsIDhdKSksIGZhbHNlKTtcclxuYXNzZXJ0LnN0cmljdEVxdWFsKFxyXG4gIGlzVmFsaWRCU1QoY3JlYXRlQmluYXJ5VHJlZShbNSwgMSwgNCwgbnVsbCwgbnVsbCwgMywgNl0pKSxcclxuICBmYWxzZVxyXG4pO1xyXG5hc3NlcnQuc3RyaWN0RXF1YWwoXHJcbiAgaXNWYWxpZEJTVChjcmVhdGVCaW5hcnlUcmVlKFsxMCwgNSwgMTUsIG51bGwsIG51bGwsIDYsIDIwXSkpLFxyXG4gIGZhbHNlXHJcbik7XHJcbmFzc2VydC5zdHJpY3RFcXVhbChcclxuICBpc1ZhbGlkQlNUKGNyZWF0ZUJpbmFyeVRyZWUoWzMsIG51bGwsIDMwLCAxMCwgbnVsbCwgbnVsbCwgMTUsIG51bGwsIDQ1XSkpLFxyXG4gIGZhbHNlXHJcbik7XHJcbiJdfQ==