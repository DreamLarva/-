"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function (nums, target) {
    /**
     * 先用二分法 找到一个 等于target 的位置
     * */
    const index = getAnyTargetIndex(nums, target);
    if (index === -1)
        return [-1, -1];
    /**
     * 用两个二分法 分别找到左值 和 右值
     * */
    return [
        getLeftIndex(nums, target, index),
        getRightIndex(nums, target, index),
    ];
};
function getLeftIndex(nums, target, index) {
    let left = 0;
    let right = index;
    while (left < right) {
        /**
         * 二分法找到 mid 的值为 target 且 左侧的侧的值不是target 的 位置
         * */
        const mid = Math.floor((left + right) / 2);
        if (nums[mid] === target) {
            right = mid;
        }
        else {
            left = mid + 1;
        }
        // 不存在 nums[mid] > target 的情况
    }
    return left;
}
function getRightIndex(nums, target, index) {
    let left = index;
    let right = nums.length - 1;
    while (left < right) {
        /**
         * 二分法找到 mid 的值为 target 且 左侧的侧的值不是target 的 位置
         * */
        const mid = Math.ceil((left + right) / 2);
        if (nums[mid] === target) {
            left = mid;
        }
        else {
            right = mid - 1;
        }
        // 不存在 nums[mid] < target 的情况
    }
    return right;
}
function getAnyTargetIndex(nums, target) {
    let left = 0;
    let right = nums.length - 1;
    while (left <= right) {
        const mid = (right + left) >> 1;
        if (nums[mid] === target) {
            return mid;
        }
        else if (nums[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }
    return -1;
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(getLeftIndex([5, 7, 8, 8, 8, 10], 5, 0), 0);
assert_1.default.strictEqual(getLeftIndex([5, 7, 8, 8, 8, 10], 8, 2), 2);
assert_1.default.strictEqual(getLeftIndex([5, 7, 8, 8, 8, 10], 8, 3), 2);
assert_1.default.strictEqual(getLeftIndex([5, 7, 8, 8, 8, 10], 8, 4), 2);
assert_1.default.deepStrictEqual(searchRange([5, 7, 7, 8, 8, 10], 8), [3, 4]);
assert_1.default.deepStrictEqual(searchRange([5, 7, 7, 8, 8, 10], 6), [-1, -1]);
assert_1.default.deepStrictEqual(searchRange([1], 1), [0, 0]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQu5Zyo5o6S5bqP5pWw57uE5Lit5p+l5om+5YWD57Sg55qE56ys5LiA5Liq5ZKM5pyA5ZCO5LiA5Liq5L2N572uLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8zNC7lnKjmjpLluo/mlbDnu4TkuK3mn6Xmib7lhYPntKDnmoTnrKzkuIDkuKrlkozmnIDlkI7kuIDkuKrkvY3nva4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW1CSTtBQUNKOzs7O0dBSUc7QUFDSCxJQUFJLFdBQVcsR0FBRyxVQUFVLElBQWMsRUFBRSxNQUFjO0lBQ3hEOztTQUVLO0lBQ0wsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDOztTQUVLO0lBQ0wsT0FBTztRQUNMLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQztRQUNqQyxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUM7S0FDbkMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLFNBQVMsWUFBWSxDQUFDLElBQWMsRUFBRSxNQUFjLEVBQUUsS0FBYTtJQUNqRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDbEIsT0FBTyxJQUFJLEdBQUcsS0FBSyxFQUFFO1FBQ25COzthQUVLO1FBQ0wsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxNQUFNLEVBQUU7WUFDeEIsS0FBSyxHQUFHLEdB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QyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXRFLGdCQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu57uZ5a6a5LiA5Liq5oyJ54Wn5Y2H5bqP5o6S5YiX55qE5pW05pWw5pWw57uEIG51bXPvvIzlkozkuIDkuKrnm67moIflgLwgdGFyZ2V044CC5om+5Ye657uZ5a6a55uu5qCH5YC85Zyo5pWw57uE5Lit55qE5byA5aeL5L2N572u5ZKM57uT5p2f5L2N572u44CCXG5cbuS9oOeahOeul+azleaXtumXtOWkjeadguW6puW/hemhu+aYr8KgTyhsb2cgbikg57qn5Yir44CCXG5cbuWmguaenOaVsOe7hOS4reS4jeWtmOWcqOebruagh+WAvO+8jOi/lOWbnsKgWy0xLCAtMV3jgIJcblxu56S65L6LIDE6XG5cbui+k+WFpTogbnVtcyA9IFs1LDcsNyw4LDgsMTBdLCB0YXJnZXQgPSA4XG7ovpPlh7o6IFszLDRdXG7npLrkvovCoDI6XG5cbui+k+WFpTogbnVtcyA9IFs1LDcsNyw4LDgsMTBdLCB0YXJnZXQgPSA2XG7ovpPlh7o6IFstMSwtMV1cblxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL2ZpbmQtZmlyc3QtYW5kLWxhc3QtcG9zaXRpb24tb2YtZWxlbWVudC1pbi1zb3J0ZWQtYXJyYXlcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcltdfSBudW1zXG4gKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xudmFyIHNlYXJjaFJhbmdlID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCB0YXJnZXQ6IG51bWJlcikge1xuICAvKipcbiAgICog5YWI55So5LqM5YiG5rOVIOaJvuWIsOS4gOS4qiDnrYnkuo50YXJnZXQg55qE5L2N572uXG4gICAqICovXG4gIGNvbnN0IGluZGV4ID0gZ2V0QW55VGFyZ2V0SW5kZXgobnVtcywgdGFyZ2V0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIFstMSwgLTFdO1xuICAvKipcbiAgICog55So5Lik5Liq5LqM5YiG5rOVIOWIhuWIq+aJvuWIsOW3puWAvCDlkowg5Y+z5YC8XG4gICAqICovXG4gIHJldHVybiBbXG4gICAgZ2V0TGVmdEluZGV4KG51bXMsIHRhcmdldCwgaW5kZXgpLFxuICAgIGdldFJpZ2h0SW5kZXgobnVtcywgdGFyZ2V0LCBpbmRleCksXG4gIF07XG59O1xuXG5mdW5jdGlvbiBnZXRMZWZ0SW5kZXgobnVtczogbnVtYmVyW10sIHRhcmdldDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gaW5kZXg7XG4gIHdoaWxlIChsZWZ0IDwgcmlnaHQpIHtcbiAgICAvKipcbiAgICAgKiDkuozliIbms5Xmib7liLAgbWlkIOeahOWAvOS4uiB0YXJnZXQg5LiUIOW3puS+p+eahOS+p+eahOWAvOS4jeaYr3RhcmdldCDnmoQg5L2N572uXG4gICAgICogKi9cbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XG4gICAgaWYgKG51bXNbbWlkXSA9PT0gdGFyZ2V0KSB7XG4gICAgICByaWdodCA9IG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IG1pZCArIDE7XG4gICAgfVxuICAgIC8vIOS4jeWtmOWcqCBudW1zW21pZF0gPiB0YXJnZXQg55qE5oOF5Ya1XG4gIH1cbiAgcmV0dXJuIGxlZnQ7XG59XG5cbmZ1bmN0aW9uIGdldFJpZ2h0SW5kZXgobnVtczogbnVtYmVyW10sIHRhcmdldDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gIGxldCBsZWZ0ID0gaW5kZXg7XG4gIGxldCByaWdodCA9IG51bXMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIC8qKlxuICAgICAqIOS6jOWIhuazleaJvuWIsCBtaWQg55qE5YC85Li6IHRhcmdldCDkuJQg5bem5L6n55qE5L6n55qE5YC85LiN5pivdGFyZ2V0IOeahCDkvY3nva5cbiAgICAgKiAqL1xuICAgIGNvbnN0IG1pZCA9IE1hdGguY2VpbCgobGVmdCArIHJpZ2h0KSAvIDIpO1xuICAgIGlmIChudW1zW21pZF0gPT09IHRhcmdldCkge1xuICAgICAgbGVmdCA9IG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWQgLSAxO1xuICAgIH1cbiAgICAvLyDkuI3lrZjlnKggbnVtc1ttaWRdIDwgdGFyZ2V0IOeahOaDheWGtVxuICB9XG4gIHJldHVybiByaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0QW55VGFyZ2V0SW5kZXgobnVtczogbnVtYmVyW10sIHRhcmdldDogbnVtYmVyKSB7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gbnVtcy5sZW5ndGggLSAxO1xuICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuICAgIGNvbnN0IG1pZCA9IChyaWdodCArIGxlZnQpID4+IDE7XG4gICAgaWYgKG51bXNbbWlkXSA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH0gZWxzZSBpZiAobnVtc1ttaWRdIDwgdGFyZ2V0KSB7XG4gICAgICBsZWZ0ID0gbWlkICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWQgLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5hc3NlcnQuc3RyaWN0RXF1YWwoZ2V0TGVmdEluZGV4KFs1LCA3LCA4LCA4LCA4LCAxMF0sIDUsIDApLCAwKTtcbmFzc2VydC5zdHJpY3RFcXVhbChnZXRMZWZ0SW5kZXgoWzUsIDcsIDgsIDgsIDgsIDEwXSwgOCwgMiksIDIpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGdldExlZnRJbmRleChbNSwgNywgOCwgOCwgOCwgMTBdLCA4LCAzKSwgMik7XG5hc3NlcnQuc3RyaWN0RXF1YWwoZ2V0TGVmdEluZGV4KFs1LCA3LCA4LCA4LCA4LCAxMF0sIDgsIDQpLCAyKTtcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzZWFyY2hSYW5nZShbNSwgNywgNywgOCwgOCwgMTBdLCA4KSwgWzMsIDRdKTtcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoc2VhcmNoUmFuZ2UoWzUsIDcsIDcsIDgsIDgsIDEwXSwgNiksIFstMSwgLTFdKTtcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzZWFyY2hSYW5nZShbMV0sIDEpLCBbMCwgMF0pO1xuIl19