"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。

示例:

输入: "25525511135"
输出: ["255.255.11.135", "255.255.111.35"]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/restore-ip-addresses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
/**
 * @param {string} s
 * @return {string[]}
 */
var restoreIpAddresses = function (s) {
    /**
     * Ipv4 的格式 0.0.0.0 ~ 255.255.255.255
     * 所以 段数字 不能 > 255 除了 单个0 不能以 0 开头
     * */
    const maxBlockCount = 4;
    const maxLengthCount = 3;
    const result = [];
    step("", 0, s);
    return result;
    function step(r, c, s) {
        if (c === maxBlockCount) {
            if (s === "")
                result.push(r);
            return;
        }
        for (let i = 1; i <= maxLengthCount; i++) {
            const currentBlock = s.substr(0, i);
            if (currentBlock.length !== i)
                return;
            if (currentBlock.length !== 1 && currentBlock[0] === "0")
                return;
            if (parseInt(currentBlock) > 255)
                return;
            const rest = s.substr(i);
            step(c === 0 ? currentBlock : r + "." + currentBlock, c + 1, rest);
        }
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(restoreIpAddresses("25525511135").sort(), ["255.255.11.135", "255.255.111.35"].sort());
assert_1.default.deepStrictEqual(restoreIpAddresses("0000").sort(), ["0.0.0.0"].sort());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMu5aSN5Y6fSVDlnLDlnYAuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzkzLuWkjeWOn0lQ5Zyw5Z2ALnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0lBV0k7QUFDSjs7O0dBR0c7QUFDSCxJQUFJLGtCQUFrQixHQUFHLFVBQVUsQ0FBUztJQUN4Qzs7O1NBR0s7SUFDTCxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDeEIsTUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUM1QixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNmLE9BQU8sTUFBTSxDQUFDO0lBRWQsU0FBUyxJQUFJLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBRXpDLElBQUksQ0FBQyxLQUFLLGFBQWEsRUFBRTtZQUNyQixJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsT0FBTztTQUNWO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGNBQWMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFBRSxPQUFPO1lBQ3RDLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7Z0JBQUUsT0FBTztZQUNqRSxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHO2dCQUFFLE9BQU87WUFDekMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQ0EsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFlBQVksRUFDL0MsQ0FBQyxHQUFHLENBQUMsRUFDTCxJQUFJLENBQ1AsQ0FBQztTQUNMO0lBQ0wsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLGVBQWUsQ0FDbEIsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQ3hDLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDOUMsQ0FBQztBQUNGLGdCQUFNLENBQUMsZUFBZSxDQUNsQixrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFDakMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbue7meWumuS4gOS4quWPquWMheWQq+aVsOWtl+eahOWtl+espuS4su+8jOWkjeWOn+Wug+W5tui/lOWbnuaJgOacieWPr+iDveeahCBJUCDlnLDlnYDmoLzlvI/jgIJcclxuXHJcbuekuuS+izpcclxuXHJcbui+k+WFpTogXCIyNTUyNTUxMTEzNVwiXHJcbui+k+WHujogW1wiMjU1LjI1NS4xMS4xMzVcIiwgXCIyNTUuMjU1LjExMS4zNVwiXVxyXG5cclxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcclxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmVzdG9yZS1pcC1hZGRyZXNzZXNcclxu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXHJcbiogKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXHJcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxyXG4gKi9cclxudmFyIHJlc3RvcmVJcEFkZHJlc3NlcyA9IGZ1bmN0aW9uIChzOiBzdHJpbmcpIHtcclxuICAgIC8qKlxyXG4gICAgICogSXB2NCDnmoTmoLzlvI8gMC4wLjAuMCB+IDI1NS4yNTUuMjU1LjI1NVxyXG4gICAgICog5omA5LulIOauteaVsOWtlyDkuI3og70gPiAyNTUg6Zmk5LqGIOWNleS4qjAg5LiN6IO95LulIDAg5byA5aS0XHJcbiAgICAgKiAqL1xyXG4gICAgY29uc3QgbWF4QmxvY2tDb3VudCA9IDQ7XHJcbiAgICBjb25zdCBtYXhMZW5ndGhDb3VudCA9IDM7XHJcbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XHJcbiAgICBzdGVwKFwiXCIsIDAsIHMpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGVwKHI6IHN0cmluZywgYzogbnVtYmVyLCBzOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgaWYgKGMgPT09IG1heEJsb2NrQ291bnQpIHtcclxuICAgICAgICAgICAgaWYgKHMgPT09IFwiXCIpIHJlc3VsdC5wdXNoKHIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBtYXhMZW5ndGhDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCbG9jayA9IHMuc3Vic3RyKDAsIGkpO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrLmxlbmd0aCAhPT0gaSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrLmxlbmd0aCAhPT0gMSAmJiBjdXJyZW50QmxvY2tbMF0gPT09IFwiMFwiKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUludChjdXJyZW50QmxvY2spID4gMjU1KSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3QgPSBzLnN1YnN0cihpKTtcclxuICAgICAgICAgICAgc3RlcChcclxuICAgICAgICAgICAgICAgIGMgPT09IDAgPyBjdXJyZW50QmxvY2sgOiByICsgXCIuXCIgKyBjdXJyZW50QmxvY2ssXHJcbiAgICAgICAgICAgICAgICBjICsgMSxcclxuICAgICAgICAgICAgICAgIHJlc3QsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XHJcblxyXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxyXG4gICAgcmVzdG9yZUlwQWRkcmVzc2VzKFwiMjU1MjU1MTExMzVcIikuc29ydCgpLFxyXG4gICAgW1wiMjU1LjI1NS4xMS4xMzVcIiwgXCIyNTUuMjU1LjExMS4zNVwiXS5zb3J0KCksXHJcbik7XHJcbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoXHJcbiAgICByZXN0b3JlSXBBZGRyZXNzZXMoXCIwMDAwXCIpLnNvcnQoKSxcclxuICAgIFtcIjAuMC4wLjBcIl0uc29ydCgpLFxyXG4pO1xyXG4iXX0=