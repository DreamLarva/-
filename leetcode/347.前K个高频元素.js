"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/top-k-frequent-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
const lodash_1 = __importDefault(require("lodash"));
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number[]}
 */
var topKFrequent = function (nums, k) {
  // 类似 215.数组中的第K个最大元素
  // 不过 这边求 前 k 个 所以 不能用 快速选择法
  const countMap = lodash_1.default.toPairs(lodash_1.default.countBy(nums));
  const minHeap = [];
  for (let i = 0; i < countMap.length; i++) {
    if (minHeap.length === k && countMap[i][1] < minHeap[0][1]) continue;
    minHeap.push(countMap[i]);
    heapifyWithSiftDown(minHeap, (a, b) => a[1] > b[1]);
    if (minHeap.length > k) {
      minHeap.shift();
    }
  }
  return minHeap.map((v) => Number(v[0]));
};
function heapifyWithSiftDown(A, fn) {
  // 初始选择最接近叶子的一个父结点
  for (let i = Math.floor((A.length - 1) / 2); i >= 0; i--) {
    siftDown(A, i, fn);
  }
  return A;
}
function siftDown(A, k, fn = (a, b) => a > b) {
  // 此处是 最小堆
  while (k * 2 + 1 < A.length) {
    let son = k * 2 + 1;
    // 与其两个儿子中较小的一个比较
    if (k * 2 + 2 < A.length && fn(A[son], A[k * 2 + 2])) {
      son = k * 2 + 2;
    }
    // 若大于儿子，则与儿子交换。
    if (fn(A[son], A[k])) {
      break;
    }
    [A[son], A[k]] = [A[k], A[son]];
    // 交换后再与新的儿子比较并交换，直至没有儿子。
    k = son;
  }
}
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(
  topKFrequent([1, 1, 1, 2, 2, 3], 2).sort(),
  [1, 2].sort()
);
assert_1.default.deepStrictEqual(topKFrequent([1], 1).sort(), [1].sort());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ3LuWJjUvkuKrpq5jpopHlhYPntKAuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzM0Ny7liY1L5Liq6auY6aKR5YWD57SgLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFtQkk7QUFDSixvREFBdUI7QUFFdkI7Ozs7R0FJRztBQUNILElBQUksWUFBWSxHQUFHLFVBQVUsSUFBYyxFQUFFLENBQVM7SUFDbEQscUJBQXFCO0lBQ3JCLDRCQUE0QjtJQUM1QixNQUFNLFFBQVEsR0FBRyxnQkFBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sT0FBTyxHQUF1QixFQUFFLENBQUM7SUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFFLFNBQVM7UUFDckUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDbkI7S0FDSjtJQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQztBQUVGLFNBQVMsbUJBQW1CLENBQUksQ0FBTSxFQUFFLEVBQTJCO0lBQy9ELGtCQUFrQjtJQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEQsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdEI7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FDYixDQUFNLEVBQ04sQ0FBUyxFQUNULEtBQThCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFFN0MsVUFBVTtJQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRTtRQUN6QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixpQkFBaUI7UUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7UUFDRCxnQkFBZ0I7UUFDaEIsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xCLE1BQU07U0FDVDtRQUNELENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLHlCQUF5QjtRQUN6QixDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ1g7QUFDTCxDQUFDO0FBR0Qsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsZUFBZSxDQUNsQixZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUMxQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDaEIsQ0FBQztBQUNGLGdCQUFNLENBQUMsZUFBZSxDQUNsQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFDM0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbue7meWumuS4gOS4qumdnuepuueahOaVtOaVsOaVsOe7hO+8jOi/lOWbnuWFtuS4reWHuueOsOmikeeOh+WJjcKga8Kg6auY55qE5YWD57Sg44CCXG5cbuekuuS+iyAxOlxuXG7ovpPlhaU6IG51bXMgPSBbMSwxLDEsMiwyLDNdLCBrID0gMlxu6L6T5Ye6OiBbMSwyXVxu56S65L6LIDI6XG5cbui+k+WFpTogbnVtcyA9IFsxXSwgayA9IDFcbui+k+WHujogWzFdXG7or7TmmI7vvJpcblxu5L2g5Y+v5Lul5YGH6K6+57uZ5a6a55qEwqBrwqDmgLvmmK/lkIjnkIbnmoTvvIzkuJQgMSDiiaQgayDiiaQg5pWw57uE5Lit5LiN55u45ZCM55qE5YWD57Sg55qE5Liq5pWw44CCXG7kvaDnmoTnrpfms5XnmoTml7bpl7TlpI3mnYLluqblv4XpobvkvJjkuo4gTyhuIGxvZyBuKSAswqBuwqDmmK/mlbDnu4TnmoTlpKflsI/jgIJcblxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL3RvcC1rLWZyZXF1ZW50LWVsZW1lbnRzXG7okZfkvZzmnYPlvZLpoobmiaPnvZHnu5zmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vlrpjmlrnmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgIJcbiogKi9cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xuICogQHBhcmFtIHtudW1iZXJ9IGtcbiAqIEByZXR1cm4ge251bWJlcltdfVxuICovXG52YXIgdG9wS0ZyZXF1ZW50ID0gZnVuY3Rpb24gKG51bXM6IG51bWJlcltdLCBrOiBudW1iZXIpIHtcbiAgICAvLyDnsbvkvLwgMjE1LuaVsOe7hOS4reeahOesrEvkuKrmnIDlpKflhYPntKBcbiAgICAvLyDkuI3ov4cg6L+Z6L655rGCIOWJjSBrIOS4qiDmiYDku6Ug5LiN6IO955SoIOW/q+mAn+mAieaLqeazlVxuICAgIGNvbnN0IGNvdW50TWFwID0gXy50b1BhaXJzKF8uY291bnRCeShudW1zKSk7XG4gICAgY29uc3QgbWluSGVhcDogW3N0cmluZywgbnVtYmVyXVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudE1hcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobWluSGVhcC5sZW5ndGggPT09IGsgJiYgY291bnRNYXBbaV1bMV0gPCBtaW5IZWFwWzBdWzFdKSBjb250aW51ZTtcbiAgICAgICAgbWluSGVhcC5wdXNoKGNvdW50TWFwW2ldKTtcbiAgICAgICAgaGVhcGlmeVdpdGhTaWZ0RG93bihtaW5IZWFwLCAoYSwgYikgPT4gYVsxXSA+IGJbMV0pO1xuICAgICAgICBpZiAobWluSGVhcC5sZW5ndGggPiBrKSB7XG4gICAgICAgICAgICBtaW5IZWFwLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWluSGVhcC5tYXAodiA9PiBOdW1iZXIodlswXSkpO1xufTtcblxuZnVuY3Rpb24gaGVhcGlmeVdpdGhTaWZ0RG93bjxUPihBOiBUW10sIGZuOiAoYTogVCwgYjogVCkgPT4gYm9vbGVhbikge1xuICAgIC8vIOWIneWni+mAieaLqeacgOaOpei/keWPtuWtkOeahOS4gOS4queItue7k+eCuVxuICAgIGZvciAobGV0IGkgPSBNYXRoLmZsb29yKChBLmxlbmd0aCAtIDEpIC8gMik7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHNpZnREb3duKEEsIGksIGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIEE7XG59XG5cbmZ1bmN0aW9uIHNpZnREb3duPFQgPSBudW1iZXI+KFxuICAgIEE6IFRbXSxcbiAgICBrOiBudW1iZXIsXG4gICAgZm46IChhOiBULCBiOiBUKSA9PiBib29sZWFuID0gKGEsIGIpID0+IGEgPiBiLFxuKSB7XG4gICAgLy8g5q2k5aSE5pivIOacgOWwj+WghlxuICAgIHdoaWxlIChrICogMiArIDEgPCBBLmxlbmd0aCkge1xuICAgICAgICBsZXQgc29uID0gayAqIDIgKyAxO1xuICAgICAgICAvLyDkuI7lhbbkuKTkuKrlhL/lrZDkuK3ovoPlsI/nmoTkuIDkuKrmr5TovoNcbiAgICAgICAgaWYgKGsgKiAyICsgMiA8IEEubGVuZ3RoICYmIGZuKEFbc29uXSwgQVtrICogMiArIDJdKSkge1xuICAgICAgICAgICAgc29uID0gayAqIDIgKyAyO1xuICAgICAgICB9XG4gICAgICAgIC8vIOiLpeWkp+S6juWEv+WtkO+8jOWImeS4juWEv+WtkOS6pOaNouOAglxuICAgICAgICBpZiAoZm4oQVtzb25dLCBBW2tdKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgW0Fbc29uXSwgQVtrXV0gPSBbQVtrXSwgQVtzb25dXTtcbiAgICAgICAgLy8g5Lqk5o2i5ZCO5YaN5LiO5paw55qE5YS/5a2Q5q+U6L6D5bm25Lqk5o2i77yM55u06Iez5rKh5pyJ5YS/5a2Q44CCXG4gICAgICAgIGsgPSBzb247XG4gICAgfVxufVxuXG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgICB0b3BLRnJlcXVlbnQoWzEsIDEsIDEsIDIsIDIsIDNdLCAyKS5zb3J0KCksXG4gICAgWzEsIDJdLnNvcnQoKSxcbik7XG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICAgIHRvcEtGcmVxdWVudChbMV0sIDEpLnNvcnQoKSxcbiAgICBbMV0uc29ydCgpLFxuKTtcbiJdfQ==
