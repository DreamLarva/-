"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
* */
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
const LinkedList_1 = require("../util/LinkedList");
const assert_1 = __importDefault(require("assert"));
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers1 = function (l1, l2) {
    const firstNode = new LinkedList_1.ListNode((l1.val + l2.val) % 10);
    let currentNode = firstNode;
    let added = l1.val + l2.val >= 10 ? 1 : 0;
    while (l1.next !== null || l2.next !== null) {
        l1 = l1.next ? l1.next : new LinkedList_1.ListNode(0);
        l2 = l2.next ? l2.next : new LinkedList_1.ListNode(0);
        let sum = l1.val + l2.val + added;
        added = sum >= 10 ? 1 : 0;
        sum = sum % 10;
        currentNode.next = new LinkedList_1.ListNode(sum);
        currentNode = currentNode.next;
    }
    if (added > 0) {
        currentNode.next = new LinkedList_1.ListNode(1);
    }
    return firstNode;
};
var addTwoNumbers2 = function (l1, l2) {
    const firstNode = new LinkedList_1.ListNode((l1.val + l2.val) % 10);
    let currentNode = firstNode;
    let added = 0;
    l1 = l1 ? l1.next : null;
    l2 = l2 ? l2.next : null;
    while (l1 != null || l2 != null) {
        const v1 = l1 == null ? 0 : l1.val;
        const v2 = l2 == null ? 0 : l2.val;
        let sum = v1 + v2 + added;
        added = sum >= 10 ? 1 : 0;
        sum = sum % 10;
        currentNode.next = new LinkedList_1.ListNode(sum);
        currentNode = currentNode.next;
        l1 = l1 ? l1.next : null;
        l2 = l2 ? l2.next : null;
    }
    if (added > 0) {
        currentNode.next = new LinkedList_1.ListNode(1);
    }
    return firstNode;
};
var addTwoNumbers3 = function (l1, l2) {
    let firstNode;
    let currentNode = null;
    let added = 0;
    do {
        const v1 = l1 == null ? 0 : l1.val;
        const v2 = l2 == null ? 0 : l2.val;
        let sum = v1 + v2 + added;
        added = sum >= 10 ? 1 : 0;
        sum = sum % 10;
        if (currentNode == null) {
            currentNode = firstNode = new LinkedList_1.ListNode(sum);
        }
        else {
            currentNode.next = new LinkedList_1.ListNode(sum);
            currentNode = currentNode.next;
        }
        l1 = l1 ? l1.next : null;
        l2 = l2 ? l2.next : null;
    } while (l1 != null || l2 != null);
    if (added > 0) {
        currentNode.next = new LinkedList_1.ListNode(1);
    }
    return firstNode;
};
assert_1.default.deepStrictEqual(addTwoNumbers1(LinkedList_1.createLinkedList([2, 4, 3]), LinkedList_1.createLinkedList([5, 6, 4])), LinkedList_1.createLinkedList([7, 0, 8]));
assert_1.default.deepStrictEqual(addTwoNumbers2(LinkedList_1.createLinkedList([2, 4, 3]), LinkedList_1.createLinkedList([5, 6, 4])), LinkedList_1.createLinkedList([7, 0, 8]));
//# sourceMappingURL=data:application/json;base64,