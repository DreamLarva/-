"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
* */
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
const LinkedList_1 = require("../util/LinkedList");
const assert_1 = __importDefault(require("assert"));
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers1 = function (l1, l2) {
    const firstNode = new LinkedList_1.ListNode((l1.val + l2.val) % 10);
    let currentNode = firstNode;
    let added = l1.val + l2.val >= 10 ? 1 : 0;
    while (l1.next !== null || l2.next !== null) {
        l1 = l1.next ? l1.next : new LinkedList_1.ListNode(0);
        l2 = l2.next ? l2.next : new LinkedList_1.ListNode(0);
        let sum = l1.val + l2.val + added;
        added = sum >= 10 ? 1 : 0;
        sum = sum % 10;
        currentNode.next = new LinkedList_1.ListNode(sum);
        currentNode = currentNode.next;
    }
    if (added > 0) {
        currentNode.next = new LinkedList_1.ListNode(1);
    }
    return firstNode;
};
var addTwoNumbers2 = function (l1, l2) {
    const firstNode = new LinkedList_1.ListNode((l1.val + l2.val) % 10);
    let currentNode = firstNode;
    let added = l1.val + l2.val >= 10 ? 1 : 0;
    while (l1 != null || l2 != null) {
        l1 = l1 ? l1.next : null;
        l2 = l2 ? l2.next : null;
        const v1 = l1 == null ? 0 : l1.val;
        const v2 = l2 == null ? 0 : l2.val;
        let sum = v1 + v2 + added;
        added = sum >= 10 ? 1 : 0;
        sum = sum % 10;
        currentNode.next = new LinkedList_1.ListNode(sum);
        currentNode = currentNode.next;
    }
    if (added > 0) {
        currentNode.next = new LinkedList_1.ListNode(1);
    }
    return firstNode;
};
assert_1.default.deepStrictEqual(addTwoNumbers2(LinkedList_1.createLinkedList([2, 4, 3]), LinkedList_1.createLinkedList([5, 6, 4])), LinkedList_1.createLinkedList([7, 0, 8]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi7kuKTmlbDnm7jliqAuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbImxlZXRjb2RlLzIu5Lik5pWw55u45YqgLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0o7Ozs7OztHQU1HO0FBQ0gsbURBQThEO0FBQzlELG9EQUE0QjtBQUU1Qjs7OztHQUlHO0FBQ0gsSUFBSSxjQUFjLEdBQUcsVUFBVSxFQUFvQixFQUFFLEVBQW9CO0lBQ3JFLE1BQU0sU0FBUyxHQUFHLElBQUkscUJBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUM1QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQ3pDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHFCQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUkscUJBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLEtBQUssR0FBRyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxxQkFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO0tBQ2xDO0lBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ1gsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLHFCQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEM7SUFHRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFHRixJQUFJLGNBQWMsR0FBRyxVQUFVLEVBQXlCLEVBQUUsRUFBeUI7SUFDL0UsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQkFBUSxDQUFDLENBQUMsRUFBRyxDQUFDLEdBQUcsR0FBRyxFQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDekQsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBQzVCLElBQUksS0FBSyxHQUFHLEVBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVDLE9BQU8sRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO1FBQzdCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN6QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFekIsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ25DLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUVuQyxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUMxQixLQUFLLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixXQUFXLENBQUMsSUFBSSxHQUFHLElBQUkscUJBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztLQUNsQztJQUNELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNYLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxxQkFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RDO0lBR0QsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBS0YsZ0JBQU0sQ0FBQyxlQUFlLENBQ2xCLGNBQWMsQ0FDViw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDM0IsNkJBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzlCLEVBQ0QsNkJBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG7nu5nlh7rkuKTkuKog6Z2e56m6IOeahOmTvuihqOeUqOadpeihqOekuuS4pOS4qumdnui0n+eahOaVtOaVsOOAguWFtuS4re+8jOWug+S7rOWQhOiHqueahOS9jeaVsOaYr+aMieeFpyDpgIbluo8g55qE5pa55byP5a2Y5YKo55qE77yM5bm25LiU5a6D5Lus55qE5q+P5Liq6IqC54K55Y+q6IO95a2Y5YKoIOS4gOS9jSDmlbDlrZfjgIJcclxuXHJcbuWmguaenO+8jOaIkeS7rOWwhui/meS4pOS4quaVsOebuOWKoOi1t+adpe+8jOWImeS8mui/lOWbnuS4gOS4quaWsOeahOmTvuihqOadpeihqOekuuWug+S7rOeahOWSjOOAglxyXG5cclxu5oKo5Y+v5Lul5YGH6K6+6Zmk5LqG5pWw5a2XIDAg5LmL5aSW77yM6L+Z5Lik5Liq5pWw6YO95LiN5Lya5LulIDAg5byA5aS044CCXHJcblxyXG7npLrkvovvvJpcclxuXHJcbui+k+WFpe+8migyIC0+IDQgLT4gMykgKyAoNSAtPiA2IC0+IDQpXHJcbui+k+WHuu+8mjcgLT4gMCAtPiA4XHJcbuWOn+WboO+8mjM0MiArIDQ2NSA9IDgwN1xyXG4qICovXHJcbi8qKlxyXG4gKiBEZWZpbml0aW9uIGZvciBzaW5nbHktbGlua2VkIGxpc3QuXHJcbiAqIGZ1bmN0aW9uIExpc3ROb2RlKHZhbCkge1xyXG4gKiAgICAgdGhpcy52YWwgPSB2YWw7XHJcbiAqICAgICB0aGlzLm5leHQgPSBudWxsO1xyXG4gKiB9XHJcbiAqL1xyXG5pbXBvcnQge2NyZWF0ZUxpbmtlZExpc3QsIExpc3ROb2RlfSBmcm9tIFwiLi4vdXRpbC9MaW5rZWRMaXN0XCI7XHJcbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7TGlzdE5vZGV9IGwxXHJcbiAqIEBwYXJhbSB7TGlzdE5vZGV9IGwyXHJcbiAqIEByZXR1cm4ge0xpc3ROb2RlfVxyXG4gKi9cclxudmFyIGFkZFR3b051bWJlcnMxID0gZnVuY3Rpb24gKGwxOiBMaXN0Tm9kZTxudW1iZXI+LCBsMjogTGlzdE5vZGU8bnVtYmVyPikge1xyXG4gICAgY29uc3QgZmlyc3ROb2RlID0gbmV3IExpc3ROb2RlKChsMS52YWwgKyBsMi52YWwpICUgMTApO1xyXG4gICAgbGV0IGN1cnJlbnROb2RlID0gZmlyc3ROb2RlO1xyXG4gICAgbGV0IGFkZGVkID0gbDEudmFsICsgbDIudmFsID49IDEwID8gMSA6IDA7XHJcblxyXG4gICAgd2hpbGUgKGwxLm5leHQgIT09IG51bGwgfHwgbDIubmV4dCAhPT0gbnVsbCkge1xyXG4gICAgICAgIGwxID0gbDEubmV4dCA/IGwxLm5leHQgOiBuZXcgTGlzdE5vZGUoMCk7XHJcbiAgICAgICAgbDIgPSBsMi5uZXh0ID8gbDIubmV4dCA6IG5ldyBMaXN0Tm9kZSgwKTtcclxuICAgICAgICBsZXQgc3VtID0gbDEudmFsICsgbDIudmFsICsgYWRkZWQ7XHJcbiAgICAgICAgYWRkZWQgPSBzdW0gPj0gMTAgPyAxIDogMDtcclxuICAgICAgICBzdW0gPSBzdW0gJSAxMDtcclxuICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gbmV3IExpc3ROb2RlKHN1bSk7XHJcbiAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xyXG4gICAgfVxyXG4gICAgaWYgKGFkZGVkID4gMCkge1xyXG4gICAgICAgIGN1cnJlbnROb2RlLm5leHQgPSBuZXcgTGlzdE5vZGUoMSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiBmaXJzdE5vZGU7XHJcbn07XHJcblxyXG5cclxudmFyIGFkZFR3b051bWJlcnMyID0gZnVuY3Rpb24gKGwxOiBMaXN0Tm9kZTxudW1iZXI+fG51bGwsIGwyOiBMaXN0Tm9kZTxudW1iZXI+fG51bGwpIHtcclxuICAgIGNvbnN0IGZpcnN0Tm9kZSA9IG5ldyBMaXN0Tm9kZSgobDEhLnZhbCArIGwyIS52YWwpICUgMTApO1xyXG4gICAgbGV0IGN1cnJlbnROb2RlID0gZmlyc3ROb2RlO1xyXG4gICAgbGV0IGFkZGVkID0gbDEhLnZhbCArIGwyIS52YWwgPj0gMTAgPyAxIDogMDtcclxuXHJcbiAgICB3aGlsZSAobDEgIT0gbnVsbCB8fCBsMiAhPSBudWxsKSB7XHJcbiAgICAgICAgbDEgPSBsMSA/IGwxLm5leHQgOiBudWxsO1xyXG4gICAgICAgIGwyID0gbDIgPyBsMi5uZXh0IDogbnVsbDtcclxuXHJcbiAgICAgICAgY29uc3QgdjEgPSBsMSA9PSBudWxsID8gMCA6IGwxLnZhbDtcclxuICAgICAgICBjb25zdCB2MiA9IGwyID09IG51bGwgPyAwIDogbDIudmFsO1xyXG5cclxuICAgICAgICBsZXQgc3VtID0gdjEgKyB2MiArIGFkZGVkO1xyXG4gICAgICAgIGFkZGVkID0gc3VtID49IDEwID8gMSA6IDA7XHJcbiAgICAgICAgc3VtID0gc3VtICUgMTA7XHJcbiAgICAgICAgY3VycmVudE5vZGUubmV4dCA9IG5ldyBMaXN0Tm9kZShzdW0pO1xyXG4gICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcclxuICAgIH1cclxuICAgIGlmIChhZGRlZCA+IDApIHtcclxuICAgICAgICBjdXJyZW50Tm9kZS5uZXh0ID0gbmV3IExpc3ROb2RlKDEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4gZmlyc3ROb2RlO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcclxuICAgIGFkZFR3b051bWJlcnMyKFxyXG4gICAgICAgIGNyZWF0ZUxpbmtlZExpc3QoWzIsIDQsIDNdKSxcclxuICAgICAgICBjcmVhdGVMaW5rZWRMaXN0KFs1LCA2LCA0XSksXHJcbiAgICApLFxyXG4gICAgY3JlYXRlTGlua2VkTGlzdChbNywgMCwgOF0pLFxyXG4pO1xyXG5cclxuIl19