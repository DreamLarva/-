"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。

示例 1:

输入:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
输出: [1,2,3,6,9,8,7,4,5]
示例 2:

输入:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
输出: [1,2,3,4,8,12,11,10,9,5,6,7]
* */
/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var spiralOrder = function (matrix) {
    if (matrix.length === 0)
        return [];
    const result = [];
    let layer = [[0, 0], [matrix.length - 1, matrix[0].length - 1]];
    while (isExistNextLayer(layer)) {
        const [[top, left], [bottom, right]] = layer;
        const m = right - left;
        const n = bottom - top;
        // 只剩 1个点了
        if (m === 0 && n === 0) {
            result.push(matrix[top][left]);
            break;
        }
        // 只有 1 行
        if (n === 0) {
            for (let i = 0; i <= m; i++) {
                result.push(matrix[top][left + i]);
            }
            break;
        }
        // 只有 1列
        if (m === 0) {
            for (let i = 0; i <= n; i++) {
                result.push(matrix[top + i][left]);
            }
            break;
        }
        // 上边
        for (let i = 0; i < m; i++) {
            result.push(matrix[top][left + i]);
        }
        // 右边
        for (let i = 0; i < n; i++) {
            result.push(matrix[top + i][right]);
        }
        // 下边
        for (let i = 0; i < m; i++) {
            result.push(matrix[bottom][right - i]);
        }
        // 左边
        for (let i = 0; i < n; i++) {
            result.push(matrix[bottom - i][left]);
        }
        layer = [[top + 1, left + 1], [bottom - 1, right - 1]];
    }
    return result;
    function isExistNextLayer([[top, left], [bottom, right]]) {
        return !(top > bottom || left > right);
    }
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(spiralOrder([
    [1],
]), [1]);
assert_1.default.deepStrictEqual(spiralOrder([
    [1, 2, 3, 4],
]), [1, 2, 3, 4]);
assert_1.default.deepStrictEqual(spiralOrder([
    [1],
    [2],
    [3],
    [4],
]), [1, 2, 3, 4]);
assert_1.default.deepStrictEqual(spiralOrder([
    [1, 2, 3, 4],
    [12, 13, 14, 5],
    [11, 16, 15, 6],
    [10, 9, 8, 7],
]), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);
assert_1.default.deepStrictEqual(spiralOrder([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
]), [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]);
//# sourceMappingURL=data:application/json;base64,