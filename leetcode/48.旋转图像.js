"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个 n × n 的二维矩阵表示一个图像。

将图像顺时针旋转 90 度。

说明：

你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。

示例 1:

给定 matrix =
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
示例 2:

给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
],

原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
* */
/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */
var rotate = function (matrix) {
    const n = matrix.length;
    // 要保证所有 值都 交换 那么 应该交换了 约4分之1 的值(n 为奇数  除了中心有值不用交换的)
    // 4x4 那么 遍历 2x2
    // 5x5 => 2x3 或者 3x2
    // 7x7 => 4x3 或者 3x4
    for (let i = 0; i < n / 2; i++) {
        for (let j = i; j < n - i - 1; j++) {
            console.log(i, j);
            // 使用解构 可以不用 临时变量
            [
                matrix[i][j],
                matrix[n - j - 1][i],
                matrix[n - i - 1][n - j - 1],
                matrix[j][n - i - 1],
            ] = [
                matrix[n - j - 1][i],
                matrix[n - i - 1][n - j - 1],
                matrix[j][n - i - 1],
                matrix[i][j],
            ];
        }
    }
    return matrix;
};
const assert_1 = __importDefault(require("assert"));
// assert.deepStrictEqual(
//     rotate([
//         [5, 1, 9, 11],
//         [2, 4, 8, 10],
//         [13, 3, 6, 7],
//         [15, 14, 12, 16],
//     ]),
//     [
//         [15, 13, 2, 5],
//         [14, 3, 4, 1],
//         [12, 6, 8, 9],
//         [16, 7, 10, 11],
//     ],
// );
assert_1.default.deepStrictEqual(rotate([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25],
]), [
    [21, 16, 11, 6, 1],
    [22, 17, 12, 7, 2],
    [23, 18, 13, 8, 3],
    [24, 19, 14, 9, 4],
    [25, 20, 15, 10, 5],
]);
// assert.deepStrictEqual(
//     rotate([
//         [1, 2, 3],
//         [4, 5, 6],
//         [7, 8, 9],
//     ]),
//     [
//         [7, 4, 1],
//         [8, 5, 2],
//         [9, 6, 3],
//     ],
// );
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgu5peL6L2s5Zu+5YOPLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS80OC7ml4vovazlm77lg48udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF5Q0k7QUFDSjs7O0dBR0c7QUFDSCxJQUFJLE1BQU0sR0FBRyxVQUFVLE1BQWtCO0lBQ3JDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDeEIsb0RBQW9EO0lBQ3BELGdCQUFnQjtJQUNoQixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNsQixpQkFBaUI7WUFDakI7Z0JBQ0ksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkIsR0FBRztnQkFDQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZixDQUFDO1NBQ0w7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QiwwQkFBMEI7QUFDMUIsZUFBZTtBQUNmLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1QixVQUFVO0FBQ1YsUUFBUTtBQUNSLDBCQUEwQjtBQUMxQix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQixTQUFTO0FBQ1QsS0FBSztBQUVMLGdCQUFNLENBQUMsZUFBZSxDQUNsQixNQUFNLENBQUM7SUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDaEIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3BCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUNwQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7Q0FDdkIsQ0FBQyxFQUNGO0lBQ0ksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUN0QixDQUNKLENBQUM7QUFFRiwwQkFBMEI7QUFDMUIsZUFBZTtBQUNmLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLFVBQVU7QUFDVixRQUFRO0FBQ1IscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIsU0FBUztBQUNULEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu57uZ5a6a5LiA5LiqIG4gw5cgbiDnmoTkuoznu7Tnn6npmLXooajnpLrkuIDkuKrlm77lg4/jgIJcblxu5bCG5Zu+5YOP6aG65pe26ZKI5peL6L2sIDkwIOW6puOAglxuXG7or7TmmI7vvJpcblxu5L2g5b+F6aG75Zyo5Y6f5Zyw5peL6L2s5Zu+5YOP77yM6L+Z5oSP5ZGz552A5L2g6ZyA6KaB55u05o6l5L+u5pS56L6T5YWl55qE5LqM57u055+p6Zi144CC6K+35LiN6KaB5L2/55So5Y+m5LiA5Liq55+p6Zi15p2l5peL6L2s5Zu+5YOP44CCXG5cbuekuuS+iyAxOlxuXG7nu5nlrpogbWF0cml4ID1cbltcbiAgWzEsMiwzXSxcbiAgWzQsNSw2XSxcbiAgWzcsOCw5XVxuXSxcblxu5Y6f5Zyw5peL6L2s6L6T5YWl55+p6Zi177yM5L2/5YW25Y+Y5Li6OlxuW1xuICBbNyw0LDFdLFxuICBbOCw1LDJdLFxuICBbOSw2LDNdXG5dXG7npLrkvosgMjpcblxu57uZ5a6aIG1hdHJpeCA9XG5bXG4gIFsgNSwgMSwgOSwxMV0sXG4gIFsgMiwgNCwgOCwxMF0sXG4gIFsxMywgMywgNiwgN10sXG4gIFsxNSwxNCwxMiwxNl1cbl0sXG5cbuWOn+WcsOaXi+i9rOi+k+WFpeefqemYte+8jOS9v+WFtuWPmOS4ujpcbltcbiAgWzE1LDEzLCAyLCA1XSxcbiAgWzE0LCAzLCA0LCAxXSxcbiAgWzEyLCA2LCA4LCA5XSxcbiAgWzE2LCA3LDEwLDExXVxuXVxuKiAqL1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcltdW119IG1hdHJpeFxuICogQHJldHVybiB7dm9pZH0gRG8gbm90IHJldHVybiBhbnl0aGluZywgbW9kaWZ5IG1hdHJpeCBpbi1wbGFjZSBpbnN0ZWFkLlxuICovXG52YXIgcm90YXRlID0gZnVuY3Rpb24gKG1hdHJpeDogbnVtYmVyW11bXSkge1xuICAgIGNvbnN0IG4gPSBtYXRyaXgubGVuZ3RoO1xuICAgIC8vIOimgeS/neivgeaJgOaciSDlgLzpg70g5Lqk5o2iIOmCo+S5iCDlupTor6XkuqTmjaLkuoYg57qmNOWIhuS5izEg55qE5YC8KG4g5Li65aWH5pWwICDpmaTkuobkuK3lv4PmnInlgLzkuI3nlKjkuqTmjaLnmoQpXG4gICAgLy8gNHg0IOmCo+S5iCDpgY3ljoYgMngyXG4gICAgLy8gNXg1ID0+IDJ4MyDmiJbogIUgM3gyXG4gICAgLy8gN3g3ID0+IDR4MyDmiJbogIUgM3g0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuIC8gMjsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBpOyBqIDwgbiAtIGkgLSAxOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGksIGopO1xuICAgICAgICAgICAgLy8g5L2/55So6Kej5p6EIOWPr+S7peS4jeeUqCDkuLTml7blj5jph49cbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBtYXRyaXhbaV1bal0sXG4gICAgICAgICAgICAgICAgbWF0cml4W24gLSBqIC0gMV1baV0sXG4gICAgICAgICAgICAgICAgbWF0cml4W24gLSBpIC0gMV1bbiAtIGogLSAxXSxcbiAgICAgICAgICAgICAgICBtYXRyaXhbal1bbiAtIGkgLSAxXSxcbiAgICAgICAgICAgIF0gPSBbXG4gICAgICAgICAgICAgICAgbWF0cml4W24gLSBqIC0gMV1baV0sXG4gICAgICAgICAgICAgICAgbWF0cml4W24gLSBpIC0gMV1bbiAtIGogLSAxXSxcbiAgICAgICAgICAgICAgICBtYXRyaXhbal1bbiAtIGkgLSAxXSxcbiAgICAgICAgICAgICAgICBtYXRyaXhbaV1bal0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdHJpeDtcbn07XG5cbmltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG4vLyBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuLy8gICAgIHJvdGF0ZShbXG4vLyAgICAgICAgIFs1LCAxLCA5LCAxMV0sXG4vLyAgICAgICAgIFsyLCA0LCA4LCAxMF0sXG4vLyAgICAgICAgIFsxMywgMywgNiwgN10sXG4vLyAgICAgICAgIFsxNSwgMTQsIDEyLCAxNl0sXG4vLyAgICAgXSksXG4vLyAgICAgW1xuLy8gICAgICAgICBbMTUsIDEzLCAyLCA1XSxcbi8vICAgICAgICAgWzE0LCAzLCA0LCAxXSxcbi8vICAgICAgICAgWzEyLCA2LCA4LCA5XSxcbi8vICAgICAgICAgWzE2LCA3LCAxMCwgMTFdLFxuLy8gICAgIF0sXG4vLyApO1xuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKFxuICAgIHJvdGF0ZShbXG4gICAgICAgIFsxLCAyLCAzLCA0LCA1XSxcbiAgICAgICAgWzYsIDcsIDgsIDksIDEwXSxcbiAgICAgICAgWzExLCAxMiwgMTMsIDE0LCAxNV0sXG4gICAgICAgIFsxNiwgMTcsIDE4LCAxOSwgMjBdLFxuICAgICAgICBbMjEsIDIyLCAyMywgMjQsIDI1XSxcbiAgICBdKSxcbiAgICBbXG4gICAgICAgIFsyMSwgMTYsIDExLCA2LCAxXSxcbiAgICAgICAgWzIyLCAxNywgMTIsIDcsIDJdLFxuICAgICAgICBbMjMsIDE4LCAxMywgOCwgM10sXG4gICAgICAgIFsyNCwgMTksIDE0LCA5LCA0XSxcbiAgICAgICAgWzI1LCAyMCwgMTUsIDEwLCA1XSxcbiAgICBdLFxuKTtcblxuLy8gYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbi8vICAgICByb3RhdGUoW1xuLy8gICAgICAgICBbMSwgMiwgM10sXG4vLyAgICAgICAgIFs0LCA1LCA2XSxcbi8vICAgICAgICAgWzcsIDgsIDldLFxuLy8gICAgIF0pLFxuLy8gICAgIFtcbi8vICAgICAgICAgWzcsIDQsIDFdLFxuLy8gICAgICAgICBbOCwgNSwgMl0sXG4vLyAgICAgICAgIFs5LCA2LCAzXSxcbi8vICAgICBdLFxuLy8gKTtcbiJdfQ==