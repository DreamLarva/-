"use strict";
/**
 * 编写一个函数来查找字符串数组中的最长公共前缀。
 *
 * 如果不存在公共前缀，返回空字符串 ""。
 *
 * 示例 1:
 * 输入: ["flower","flow","flight"]
 * 输出: "fl"
 *
 * 示例 2:
 * 输入: ["dog","racecar","car"]
 * 输出: ""
 *
 * 解释: 输入不存在公共前缀。
 * 说明:
 *
 * 所有输入只包含小写字母 a-z 。
 * */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 方案1 暴力1
 * 干 做的超过需求了 要满足全部的
 * */
/**
 * @param {string[]} strs
 * @return {string}
 */
var _longestCommonPrefix = function (strs) {
    const map = [];
    for (let _len = 1;; _len++) {
        // 判断要不要继续
        if (map.length !== 0) {
            const lastMap = map[map.length - 1];
            if (Object.keys(lastMap).length === 0 ||
                Object.entries(lastMap).every(([, value]) => value < 2)) {
                break;
            }
        }
        map.push({});
        for (let i = 0; i < strs.length; i++) {
            const lastMap = map[map.length - 1];
            const cur = strs[i];
            // 记录本次循环
            if (strs[i].length >= _len) {
                const prefix = cur.substr(0, _len);
                lastMap[prefix] != null
                    ? (lastMap[prefix] += 1)
                    : (lastMap[prefix] = 1);
            }
        }
    }
    if (map.length > 2) {
        const _map = map[map.length - 2];
        let result;
        for (const [key, value] of Object.entries(_map)) {
            // 这里 key 和 value 不能推断 但是靠 result 来约束
            if (result) {
                if (value > result[1])
                    result = [key, value];
            }
            else {
                result = [key, value];
            }
        }
        return result[0];
    }
    else {
        return "";
    }
};
var longestCommonPrefix = function (strs) {
    if (strs.length === 0) {
        return "";
    }
    if (strs.length === 1) {
        return strs[0];
    }
    let result;
    outerLoop: for (let len = 1;; len++) {
        if (strs[0].length < len) {
            break;
        }
        let temp_str = strs[0].substr(0, len);
        for (let i = 0; i < strs.length; i++) {
            const cur_str = strs[i];
            if (cur_str.length < len) {
                break outerLoop;
            }
            if (!cur_str.startsWith(temp_str)) {
                break outerLoop;
            }
        }
        result = temp_str;
    }
    return result;
};
const assert_1 = require("assert");
assert_1.strictEqual(longestCommonPrefix(["flower", "flow", "flight"]), "fl");
assert_1.strictEqual(longestCommonPrefix(["dog", "racecar", "car"]), "");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQu5pyA6ZW/5YWs5YWx5YmN57yALmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJsZWV0Y29kZS8xNC7mnIDplb/lhazlhbHliY3nvIAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztLQWlCSzs7QUFFTDs7O0tBR0s7QUFDTDs7O0dBR0c7QUFDSCxJQUFJLG9CQUFvQixHQUFHLFVBQVUsSUFBYztJQUVqRCxNQUFNLEdBQUcsR0FBYyxFQUFFLENBQUM7SUFDMUIsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUksSUFBSSxFQUFFLEVBQUU7UUFDM0IsVUFBVTtRQUNWLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUNqQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUN2RDtnQkFDQSxNQUFNO2FBQ1A7U0FDRjtRQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBYSxDQUFDLENBQUM7UUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLFNBQVM7WUFDVCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO2dCQUMxQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbkMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUk7b0JBQ3JCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3hCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzQjtTQUNGO0tBQ0Y7SUFDRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2xCLE1BQU0sSUFBSSxHQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksTUFBeUIsQ0FBQztRQUM5QixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxxQ0FBcUM7WUFDckMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFBRSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDOUM7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0Y7UUFDRCxPQUFPLE1BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuQjtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUM7S0FDWDtBQUNILENBQUMsQ0FBQztBQUVGLElBQUksbUJBQW1CLEdBQUcsVUFBVSxJQUFjO0lBQ2hELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDckIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEI7SUFDRCxJQUFJLE1BQWMsQ0FBQztJQUVuQixTQUFTLEVBQUUsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUksR0FBRyxFQUFFLEVBQUU7UUFDcEMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUN4QixNQUFNO1NBQ1A7UUFDRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEIsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtnQkFDeEIsTUFBTSxTQUFTLENBQUM7YUFDakI7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDakMsTUFBTSxTQUFTLENBQUM7YUFDakI7U0FDRjtRQUVELE1BQU0sR0FBRyxRQUFRLENBQUM7S0FDbkI7SUFFRCxPQUFPLE1BQU8sQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixtQ0FBcUM7QUFFckMsb0JBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyRSxvQkFBVyxDQUFDLG1CQUFtQixDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDnvJblhpnkuIDkuKrlh73mlbDmnaXmn6Xmib7lrZfnrKbkuLLmlbDnu4TkuK3nmoTmnIDplb/lhazlhbHliY3nvIDjgIJcbiAqXG4gKiDlpoLmnpzkuI3lrZjlnKjlhazlhbHliY3nvIDvvIzov5Tlm57nqbrlrZfnrKbkuLIgXCJcIuOAglxuICpcbiAqIOekuuS+iyAxOlxuICog6L6T5YWlOiBbXCJmbG93ZXJcIixcImZsb3dcIixcImZsaWdodFwiXVxuICog6L6T5Ye6OiBcImZsXCJcbiAqXG4gKiDnpLrkvosgMjpcbiAqIOi+k+WFpTogW1wiZG9nXCIsXCJyYWNlY2FyXCIsXCJjYXJcIl1cbiAqIOi+k+WHujogXCJcIlxuICpcbiAqIOino+mHijog6L6T5YWl5LiN5a2Y5Zyo5YWs5YWx5YmN57yA44CCXG4gKiDor7TmmI46XG4gKlxuICog5omA5pyJ6L6T5YWl5Y+q5YyF5ZCr5bCP5YaZ5a2X5q+NIGEteiDjgIJcbiAqICovXG5cbi8qKlxuICog5pa55qGIMSDmmrTlipsxXG4gKiDlubIg5YGa55qE6LaF6L+H6ZyA5rGC5LqGIOimgea7oei2s+WFqOmDqOeahFxuICogKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gc3Ryc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgX2xvbmdlc3RDb21tb25QcmVmaXggPSBmdW5jdGlvbiAoc3Ryczogc3RyaW5nW10pIHtcbiAgdHlwZSBtYXBEYXRhID0geyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcbiAgY29uc3QgbWFwOiBtYXBEYXRhW10gPSBbXTtcbiAgZm9yIChsZXQgX2xlbiA9IDE7IDsgX2xlbisrKSB7XG4gICAgLy8g5Yik5pat6KaB5LiN6KaB57un57utXG4gICAgaWYgKG1hcC5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnN0IGxhc3RNYXAgPSBtYXBbbWFwLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKFxuICAgICAgICBPYmplY3Qua2V5cyhsYXN0TWFwKS5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobGFzdE1hcCkuZXZlcnkoKFssIHZhbHVlXSkgPT4gdmFsdWUgPCAyKVxuICAgICAgKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXAucHVzaCh7fSBhcyBtYXBEYXRhKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxhc3RNYXAgPSBtYXBbbWFwLmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgY3VyID0gc3Ryc1tpXTtcbiAgICAgIC8vIOiusOW9leacrOasoeW+queOr1xuICAgICAgaWYgKHN0cnNbaV0ubGVuZ3RoID49IF9sZW4pIHtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gY3VyLnN1YnN0cigwLCBfbGVuKTtcbiAgICAgICAgbGFzdE1hcFtwcmVmaXhdICE9IG51bGxcbiAgICAgICAgICA/IChsYXN0TWFwW3ByZWZpeF0gKz0gMSlcbiAgICAgICAgICA6IChsYXN0TWFwW3ByZWZpeF0gPSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG1hcC5sZW5ndGggPiAyKSB7XG4gICAgY29uc3QgX21hcDogbWFwRGF0YSA9IG1hcFttYXAubGVuZ3RoIC0gMl07XG4gICAgbGV0IHJlc3VsdCE6IFtzdHJpbmcsIG51bWJlcl07XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoX21hcCkpIHtcbiAgICAgIC8vIOi/memHjCBrZXkg5ZKMIHZhbHVlIOS4jeiDveaOqOaWrSDkvYbmmK/pnaAgcmVzdWx0IOadpee6puadn1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHRbMV0pIHJlc3VsdCA9IFtrZXksIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IFtrZXksIHZhbHVlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCFbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG5cbnZhciBsb25nZXN0Q29tbW9uUHJlZml4ID0gZnVuY3Rpb24gKHN0cnM6IHN0cmluZ1tdKSB7XG4gIGlmIChzdHJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgaWYgKHN0cnMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHN0cnNbMF07XG4gIH1cbiAgbGV0IHJlc3VsdDogc3RyaW5nO1xuXG4gIG91dGVyTG9vcDogZm9yIChsZXQgbGVuID0gMTsgOyBsZW4rKykge1xuICAgIGlmIChzdHJzWzBdLmxlbmd0aCA8IGxlbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCB0ZW1wX3N0ciA9IHN0cnNbMF0uc3Vic3RyKDAsIGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJfc3RyID0gc3Ryc1tpXTtcblxuICAgICAgaWYgKGN1cl9zdHIubGVuZ3RoIDwgbGVuKSB7XG4gICAgICAgIGJyZWFrIG91dGVyTG9vcDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjdXJfc3RyLnN0YXJ0c1dpdGgodGVtcF9zdHIpKSB7XG4gICAgICAgIGJyZWFrIG91dGVyTG9vcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQgPSB0ZW1wX3N0cjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQhO1xufTtcblxuaW1wb3J0IHsgc3RyaWN0RXF1YWwgfSBmcm9tIFwiYXNzZXJ0XCI7XG5cbnN0cmljdEVxdWFsKGxvbmdlc3RDb21tb25QcmVmaXgoW1wiZmxvd2VyXCIsIFwiZmxvd1wiLCBcImZsaWdodFwiXSksIFwiZmxcIik7XG5zdHJpY3RFcXVhbChsb25nZXN0Q29tbW9uUHJlZml4KFtcImRvZ1wiLCBcInJhY2VjYXJcIiwgXCJjYXJcIl0pLCBcIlwiKTtcbiJdfQ==