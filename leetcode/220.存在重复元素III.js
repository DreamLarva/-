"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {number[]} nums
 * @param {number} k
 * @param {number} t
 * @return {boolean}
 */
var containsNearbyAlmostDuplicate = function (nums, k, t) {
  if (t < 0) return false;
  // 分隔成多个桶
  const map = {};
  const w = t + 1; // 一个桶里面放几个东西
  for (let i = 0; i < nums.length; i++) {
    let m = getID(nums[i], w);
    // 当前桶有 两个值 那么一定在范围内
    if (map[m] != null) return true; // 注意这边 map[m]
    // 相邻的桶中是不是有符合要求的
    if (map[m - 1] != null && Math.abs(nums[i] - map[m - 1]) < w) return true;
    if (map[m + 1] != null && Math.abs(nums[i] - map[m + 1]) < w) return true;
    // 没有满足 直接放入 桶中
    map[m] = nums[i];
    /**
     * 为什么只要比一次就行了呢 就算在相邻的桶中也有可能 并不是想要的结果
     * 但是每次都能覆盖呢
     * 因为很简单 如果要覆盖 必定在同一个桶里面 那么优先因为在一个桶中 而判断为 true 不需要再和相邻的桶判断了
     * */
    // 把 不满足 i - j <= k 的排除 注意此处 i 是index
    if (i >= k) Reflect.deleteProperty(map, getID(nums[i - k], w));
  }
  return false;
};
// 获取 桶的编号
function getID(x, w) {
  return Math.floor(x / w);
}
// 暴力
var containsNearbyAlmostDuplicate1 = function (nums, k, t) {
  // 只要 判断 i 位置 之前 k 个位置内 有没有能够符合 nums [i] 和 nums [j] 的差的绝对值最大为 t 就成了
  for (let i = 0; i < nums.length; i++) {
    let j = i - 1;
    while (j >= 0 && i - j <= k) {
      if (Math.abs(nums[i] - nums[j]) <= t) return true;
      j--;
    }
  }
  return false;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(
  containsNearbyAlmostDuplicate([1, 2, 3, 1], 3, 0),
  true
);
assert_1.default.strictEqual(
  containsNearbyAlmostDuplicate([1, 0, 1, 1], 1, 2),
  true
);
assert_1.default.strictEqual(
  containsNearbyAlmostDuplicate([1, 5, 9, 1, 5, 9], 2, 3),
  false
);
assert_1.default.strictEqual(
  containsNearbyAlmostDuplicate([3, 6, 0, 2], 2, 2),
  true
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIwLuWtmOWcqOmHjeWkjeWFg+e0oElJSS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMjIwLuWtmOWcqOmHjeWkjeWFg+e0oElJSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQXNCQTs7Ozs7R0FLRztBQUNILElBQUksNkJBQTZCLEdBQUcsVUFDaEMsSUFBYyxFQUNkLENBQVMsRUFDVCxDQUFTO0lBRVQsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQ3hCLFNBQVM7SUFFVCxNQUFNLEdBQUcsR0FBOEIsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUIsb0JBQW9CO1FBQ3BCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLGNBQWM7UUFDL0MsaUJBQWlCO1FBQ2pCLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUMxRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFMUUsZUFBZTtRQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakI7Ozs7YUFJSztRQUNMLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsRTtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLFVBQVU7QUFDVixTQUFTLEtBQUssQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUMvQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFHRCxLQUFLO0FBQ0wsSUFBSSw4QkFBOEIsR0FBRyxVQUNqQyxJQUFjLEVBQ2QsQ0FBUyxFQUNULENBQVM7SUFFVCxtRUFBbUU7SUFDbkUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFDbEQsQ0FBQyxFQUFFLENBQUM7U0FDUDtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsb0RBQTRCO0FBRTVCLGdCQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVFLGdCQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVFLGdCQUFNLENBQUMsV0FBVyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkYsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu57uZ5a6a5LiA5Liq5pW05pWw5pWw57uE77yM5Yik5pat5pWw57uE5Lit5piv5ZCm5pyJ5Lik5Liq5LiN5ZCM55qE57Si5byVIGkg5ZKMIGrvvIzkvb/lvpfCoG51bXMgW2ldIOWSjMKgbnVtcyBbal3CoOeahOW3rueahOe7neWvueWAvOacgOWkp+S4uiB077yM5bm25LiUIGkg5ZKMIGog5LmL6Ze055qE5beu55qE57ud5a+55YC85pyA5aSn5Li6IMS344CCXG5cbuekuuS+i8KgMTpcblxu6L6T5YWlOiBudW1zID0gWzEsMiwzLDFdLCBrID0gMywgdCA9IDBcbui+k+WHujogdHJ1ZVxu56S65L6LIDI6XG5cbui+k+WFpTogbnVtcyA9IFsxLDAsMSwxXSwgayA9IDEsIHQgPSAyXG7ovpPlh7o6IHRydWVcbuekuuS+iyAzOlxuXG7ovpPlhaU6IG51bXMgPSBbMSw1LDksMSw1LDldLCBrID0gMiwgdCA9IDNcbui+k+WHujogZmFsc2Vcblxu5p2l5rqQ77ya5Yqb5omj77yITGVldENvZGXvvIlcbumTvuaOpe+8mmh0dHBzOi8vbGVldGNvZGUtY24uY29tL3Byb2JsZW1zL2NvbnRhaW5zLWR1cGxpY2F0ZS1paWlcbuiRl+S9nOadg+W9kumihuaJo+e9kee7nOaJgOacieOAguWVhuS4mui9rOi9veivt+iBlOezu+WumOaWueaOiOadg++8jOmdnuWVhuS4mui9rOi9veivt+azqOaYjuWHuuWkhOOAglxuKiAqL1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyW119IG51bXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBrXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xudmFyIGNvbnRhaW5zTmVhcmJ5QWxtb3N0RHVwbGljYXRlID0gZnVuY3Rpb24gKFxuICAgIG51bXM6IG51bWJlcltdLFxuICAgIGs6IG51bWJlcixcbiAgICB0OiBudW1iZXIsXG4pIHtcbiAgICBpZiAodCA8IDApIHJldHVybiBmYWxzZTtcbiAgICAvLyDliIbpmpTmiJDlpJrkuKrmobZcblxuICAgIGNvbnN0IG1hcDogeyBba2V5OiBudW1iZXJdOiBudW1iZXIgfSA9IHt9O1xuICAgIGNvbnN0IHcgPSB0ICsgMTsgLy8g5LiA5Liq5qG26YeM6Z2i5pS+5Yeg5Liq5Lic6KW/XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBtID0gZ2V0SUQobnVtc1tpXSwgdyk7XG4gICAgICAgIC8vIOW9k+WJjeahtuaciSDkuKTkuKrlgLwg6YKj5LmI5LiA5a6a5Zyo6IyD5Zu05YaFXG4gICAgICAgIGlmIChtYXBbbV0gIT0gbnVsbCkgcmV0dXJuIHRydWU7IC8vIOazqOaEj+i/mei+uSBtYXBbbV1cbiAgICAgICAgLy8g55u46YK755qE5qG25Lit5piv5LiN5piv5pyJ56ym5ZCI6KaB5rGC55qEXG4gICAgICAgIGlmIChtYXBbbSAtIDFdICE9IG51bGwgJiYgTWF0aC5hYnMobnVtc1tpXSAtIG1hcFttIC0gMV0pIDwgdykgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChtYXBbbSArIDFdICE9IG51bGwgJiYgTWF0aC5hYnMobnVtc1tpXSAtIG1hcFttICsgMV0pIDwgdykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgLy8g5rKh5pyJ5ruh6LazIOebtOaOpeaUvuWFpSDmobbkuK1cbiAgICAgICAgbWFwW21dID0gbnVtc1tpXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOS4uuS7gOS5iOWPquimgeavlOS4gOasoeWwseihjOS6huWRoiDlsLHnrpflnKjnm7jpgrvnmoTmobbkuK3kuZ/mnInlj6/og70g5bm25LiN5piv5oOz6KaB55qE57uT5p6cXG4gICAgICAgICAqIOS9huaYr+avj+asoemDveiDveimhuebluWRolxuICAgICAgICAgKiDlm6DkuLrlvojnroDljZUg5aaC5p6c6KaB6KaG55uWIOW/heWumuWcqOWQjOS4gOS4quahtumHjOmdoiDpgqPkuYjkvJjlhYjlm6DkuLrlnKjkuIDkuKrmobbkuK0g6ICM5Yik5pat5Li6IHRydWUg5LiN6ZyA6KaB5YaN5ZKM55u46YK755qE5qG25Yik5pat5LqGXG4gICAgICAgICAqICovXG4gICAgICAgIC8vIOaKiiDkuI3mu6HotrMgaSAtIGogPD0gayDnmoTmjpLpmaQg5rOo5oSP5q2k5aSEIGkg5pivaW5kZXhcbiAgICAgICAgaWYgKGkgPj0gaykgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShtYXAsIGdldElEKG51bXNbaSAtIGtdLCB3KSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIOiOt+WPliDmobbnmoTnvJblj7dcbmZ1bmN0aW9uIGdldElEKHg6IG51bWJlciwgdzogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHcpO1xufVxuXG5cbi8vIOaatOWKm1xudmFyIGNvbnRhaW5zTmVhcmJ5QWxtb3N0RHVwbGljYXRlMSA9IGZ1bmN0aW9uIChcbiAgICBudW1zOiBudW1iZXJbXSxcbiAgICBrOiBudW1iZXIsXG4gICAgdDogbnVtYmVyLFxuKSB7XG4gICAgLy8g5Y+q6KaBIOWIpOaWrSBpIOS9jee9riDkuYvliY0gayDkuKrkvY3nva7lhoUg5pyJ5rKh5pyJ6IO95aSf56ym5ZCIIG51bXMgW2ldIOWSjMKgbnVtcyBbal3CoOeahOW3rueahOe7neWvueWAvOacgOWkp+S4uiB0IOWwseaIkOS6hlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaiA9IGkgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAwICYmIGkgLSBqIDw9IGspIHtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhudW1zW2ldIC0gbnVtc1tqXSkgPD0gdCkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuYXNzZXJ0LnN0cmljdEVxdWFsKGNvbnRhaW5zTmVhcmJ5QWxtb3N0RHVwbGljYXRlKFsxLCAyLCAzLCAxXSwgMywgMCksIHRydWUpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvbnRhaW5zTmVhcmJ5QWxtb3N0RHVwbGljYXRlKFsxLCAwLCAxLCAxXSwgMSwgMiksIHRydWUpO1xuYXNzZXJ0LnN0cmljdEVxdWFsKGNvbnRhaW5zTmVhcmJ5QWxtb3N0RHVwbGljYXRlKFsxLCA1LCA5LCAxLCA1LCA5XSwgMiwgMyksIGZhbHNlKTtcbmFzc2VydC5zdHJpY3RFcXVhbChjb250YWluc05lYXJieUFsbW9zdER1cGxpY2F0ZShbMywgNiwgMCwgMl0sIDIsIDIpLCB0cnVlKTtcbiJdfQ==
