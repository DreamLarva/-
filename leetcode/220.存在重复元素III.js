"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {number[]} nums
 * @param {number} k
 * @param {number} t
 * @return {boolean}
 */
var containsNearbyAlmostDuplicate = function (nums, k, t) {
    if (t < 0)
        return false;
    // 分隔成多个桶
    const map = {};
    const w = t + 1; // 一个桶里面放几个东西
    for (let i = 0; i < nums.length; i++) {
        let m = getID(nums[i], w);
        // 当前桶有 两个值 那么一定在范围内
        if (map[m] != null)
            return true; // 注意这边 map[m]
        // 相邻的桶中是不是有符合要求的
        if (map[m - 1] != null && Math.abs(nums[i] - map[m - 1]) < w)
            return true;
        if (map[m + 1] != null && Math.abs(nums[i] - map[m + 1]) < w)
            return true;
        // 没有满足 直接放入 桶中
        map[m] = nums[i];
        /**
         * 为什么只要比一次就行了呢 就算在相邻的桶中也有可能 并不是想要的结果
         * 但是每次都能覆盖呢
         * 因为很简单 如果要覆盖 必定在同一个桶里面 那么优先因为在一个桶中 而判断为 true 不需要再和相邻的桶判断了
         * */
        // 把 不满足 i - j <= k 的排除 注意此处 i 是index
        if (i >= k)
            Reflect.deleteProperty(map, getID(nums[i - k], w));
    }
    return false;
};
// 获取 桶的编号
function getID(x, w) {
    return Math.floor(x / w);
}
// 暴力
var containsNearbyAlmostDuplicate1 = function (nums, k, t) {
    // 只要 判断 i 位置 之前 k 个位置内 有没有能够符合 nums [i] 和 nums [j] 的差的绝对值最大为 t 就成了
    for (let i = 0; i < nums.length; i++) {
        let j = i - 1;
        while (j >= 0 && i - j <= k) {
            if (Math.abs(nums[i] - nums[j]) <= t)
                return true;
            j--;
        }
    }
    return false;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.strictEqual(containsNearbyAlmostDuplicate([1, 2, 3, 1], 3, 0), true);
assert_1.default.strictEqual(containsNearbyAlmostDuplicate([1, 0, 1, 1], 1, 2), true);
assert_1.default.strictEqual(containsNearbyAlmostDuplicate([1, 5, 9, 1, 5, 9], 2, 3), false);
assert_1.default.strictEqual(containsNearbyAlmostDuplicate([3, 6, 0, 2], 2, 2), true);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIwLuWtmOWcqOmHjeWkjeWFg+e0oElJSS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMjIwLuWtmOWcqOmHjeWkjeWFg+e0oElJSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQXNCQTs7Ozs7R0FLRztBQUNILElBQUksNkJBQTZCLEdBQUcsVUFDbEMsSUFBYyxFQUNkLENBQVMsRUFDVCxDQUFTO0lBRVQsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQ3hCLFNBQVM7SUFFVCxNQUFNLEdBQUcsR0FBOEIsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDMUIsb0JBQW9CO1FBQ3BCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLGNBQWM7UUFDL0MsaUJBQWlCO1FBQ2pCLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUMxRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFMUUsZUFBZTtRQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakI7Ozs7YUFJSztRQUNMLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNoRTtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsVUFBVTtBQUNWLFNBQVMsS0FBSyxDQUFDLENBQVMsRUFBRSxDQUFTO0lBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELEtBQUs7QUFDTCxJQUFJLDhCQUE4QixHQUFHLFVBQ25DLElBQWMsRUFDZCxDQUFTLEVBQ1QsQ0FBUztJQUVULG1FQUFtRTtJQUNuRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFBRSxPQUFPLElBQUksQ0FBQztZQUNsRCxDQUFDLEVBQUUsQ0FBQztTQUNMO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RSxnQkFBTSxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RSxnQkFBTSxDQUFDLFdBQVcsQ0FDaEIsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDdkQsS0FBSyxDQUNOLENBQUM7QUFDRixnQkFBTSxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG7nu5nlrprkuIDkuKrmlbTmlbDmlbDnu4TvvIzliKTmlq3mlbDnu4TkuK3mmK/lkKbmnInkuKTkuKrkuI3lkIznmoTntKLlvJUgaSDlkowgau+8jOS9v+W+l8KgbnVtcyBbaV0g5ZKMwqBudW1zIFtqXcKg55qE5beu55qE57ud5a+55YC85pyA5aSn5Li6IHTvvIzlubbkuJQgaSDlkowgaiDkuYvpl7TnmoTlt67nmoTnu53lr7nlgLzmnIDlpKfkuLogxLfjgIJcblxu56S65L6LwqAxOlxuXG7ovpPlhaU6IG51bXMgPSBbMSwyLDMsMV0sIGsgPSAzLCB0ID0gMFxu6L6T5Ye6OiB0cnVlXG7npLrkvosgMjpcblxu6L6T5YWlOiBudW1zID0gWzEsMCwxLDFdLCBrID0gMSwgdCA9IDJcbui+k+WHujogdHJ1ZVxu56S65L6LIDM6XG5cbui+k+WFpTogbnVtcyA9IFsxLDUsOSwxLDUsOV0sIGsgPSAyLCB0ID0gM1xu6L6T5Ye6OiBmYWxzZVxuXG7mnaXmupDvvJrlipvmiaPvvIhMZWV0Q29kZe+8iVxu6ZO+5o6l77yaaHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLWlpaVxu6JGX5L2c5p2D5b2S6aKG5omj572R57uc5omA5pyJ44CC5ZWG5Lia6L2s6L296K+36IGU57O75a6Y5pa55o6I5p2D77yM6Z2e5ZWG5Lia6L2s6L296K+35rOo5piO5Ye65aSE44CCXG4qICovXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJbXX0gbnVtc1xuICogQHBhcmFtIHtudW1iZXJ9IGtcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG52YXIgY29udGFpbnNOZWFyYnlBbG1vc3REdXBsaWNhdGUgPSBmdW5jdGlvbiAoXG4gIG51bXM6IG51bWJlcltdLFxuICBrOiBudW1iZXIsXG4gIHQ6IG51bWJlclxuKSB7XG4gIGlmICh0IDwgMCkgcmV0dXJuIGZhbHNlO1xuICAvLyDliIbpmpTmiJDlpJrkuKrmobZcblxuICBjb25zdCBtYXA6IHsgW2tleTogbnVtYmVyXTogbnVtYmVyIH0gPSB7fTtcbiAgY29uc3QgdyA9IHQgKyAxOyAvLyDkuIDkuKrmobbph4zpnaLmlL7lh6DkuKrkuJzopb9cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG0gPSBnZXRJRChudW1zW2ldLCB3KTtcbiAgICAvLyDlvZPliY3mobbmnIkg5Lik5Liq5YC8IOmCo+S5iOS4gOWumuWcqOiMg+WbtOWGhVxuICAgIGlmIChtYXBbbV0gIT0gbnVsbCkgcmV0dXJuIHRydWU7IC8vIOazqOaEj+i/mei+uSBtYXBbbV1cbiAgICAvLyDnm7jpgrvnmoTmobbkuK3mmK/kuI3mmK/mnInnrKblkIjopoHmsYLnmoRcbiAgICBpZiAobWFwW20gLSAxXSAhPSBudWxsICYmIE1hdGguYWJzKG51bXNbaV0gLSBtYXBbbSAtIDFdKSA8IHcpIHJldHVybiB0cnVlO1xuICAgIGlmIChtYXBbbSArIDFdICE9IG51bGwgJiYgTWF0aC5hYnMobnVtc1tpXSAtIG1hcFttICsgMV0pIDwgdykgcmV0dXJuIHRydWU7XG5cbiAgICAvLyDmsqHmnInmu6HotrMg55u05o6l5pS+5YWlIOahtuS4rVxuICAgIG1hcFttXSA9IG51bXNbaV07XG4gICAgLyoqXG4gICAgICog5Li65LuA5LmI5Y+q6KaB5q+U5LiA5qyh5bCx6KGM5LqG5ZGiIOWwseeul+WcqOebuOmCu+eahOahtuS4reS5n+acieWPr+iDvSDlubbkuI3mmK/mg7PopoHnmoTnu5PmnpxcbiAgICAgKiDkvYbmmK/mr4/mrKHpg73og73opobnm5blkaJcbiAgICAgKiDlm6DkuLrlvojnroDljZUg5aaC5p6c6KaB6KaG55uWIOW/heWumuWcqOWQjOS4gOS4quahtumHjOmdoiDpgqPkuYjkvJjlhYjlm6DkuLrlnKjkuIDkuKrmobbkuK0g6ICM5Yik5pat5Li6IHRydWUg5LiN6ZyA6KaB5YaN5ZKM55u46YK755qE5qG25Yik5pat5LqGXG4gICAgICogKi9cbiAgICAvLyDmioog5LiN5ruh6LazIGkgLSBqIDw9IGsg55qE5o6S6ZmkIOazqOaEj+atpOWkhCBpIOaYr2luZGV4XG4gICAgaWYgKGkgPj0gaykgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShtYXAsIGdldElEKG51bXNbaSAtIGtdLCB3KSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8g6I635Y+WIOahtueahOe8luWPt1xuZnVuY3Rpb24gZ2V0SUQoeDogbnVtYmVyLCB3OiBudW1iZXIpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHcpO1xufVxuXG4vLyDmmrTliptcbnZhciBjb250YWluc05lYXJieUFsbW9zdER1cGxpY2F0ZTEgPSBmdW5jdGlvbiAoXG4gIG51bXM6IG51bWJlcltdLFxuICBrOiBudW1iZXIsXG4gIHQ6IG51bWJlclxuKSB7XG4gIC8vIOWPquimgSDliKTmlq0gaSDkvY3nva4g5LmL5YmNIGsg5Liq5L2N572u5YaFIOacieayoeacieiDveWkn+espuWQiCBudW1zIFtpXSDlkozCoG51bXMgW2pdwqDnmoTlt67nmoTnu53lr7nlgLzmnIDlpKfkuLogdCDlsLHmiJDkuoZcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGogPSBpIC0gMTtcbiAgICB3aGlsZSAoaiA+PSAwICYmIGkgLSBqIDw9IGspIHtcbiAgICAgIGlmIChNYXRoLmFicyhudW1zW2ldIC0gbnVtc1tqXSkgPD0gdCkgcmV0dXJuIHRydWU7XG4gICAgICBqLS07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5zdHJpY3RFcXVhbChjb250YWluc05lYXJieUFsbW9zdER1cGxpY2F0ZShbMSwgMiwgMywgMV0sIDMsIDApLCB0cnVlKTtcbmFzc2VydC5zdHJpY3RFcXVhbChjb250YWluc05lYXJieUFsbW9zdER1cGxpY2F0ZShbMSwgMCwgMSwgMV0sIDEsIDIpLCB0cnVlKTtcbmFzc2VydC5zdHJpY3RFcXVhbChcbiAgY29udGFpbnNOZWFyYnlBbG1vc3REdXBsaWNhdGUoWzEsIDUsIDksIDEsIDUsIDldLCAyLCAzKSxcbiAgZmFsc2Vcbik7XG5hc3NlcnQuc3RyaWN0RXF1YWwoY29udGFpbnNOZWFyYnlBbG1vc3REdXBsaWNhdGUoWzMsIDYsIDAsIDJdLCAyLCAyKSwgdHJ1ZSk7XG4iXX0=