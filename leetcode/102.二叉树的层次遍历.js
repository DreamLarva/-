"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]
* */
const BinaryTree_1 = require("../util/BinaryTree");
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var levelOrder = function (root) {
    if (root === null)
        return [];
    const list_cache = [root];
    let list_output = [];
    const result = [];
    while (list_cache.length) {
        if (list_output.length === 0) {
            list_output = [...list_cache];
            list_cache.length = 0;
        }
        const temp_arr = [];
        while (list_output.length) {
            const node = list_output.shift();
            temp_arr.push(node.val);
            node.left && list_cache.push(node.left);
            node.right && list_cache.push(node.right);
        }
        result.push(temp_arr);
    }
    return result;
};
const assert_1 = __importDefault(require("assert"));
assert_1.default.deepStrictEqual(levelOrder(null), []);
assert_1.default.deepStrictEqual(levelOrder(BinaryTree_1.createBinaryTree([1, 2, 3, 4, 5, 6])), [
    [1],
    [2, 3],
    [4, 5, 6],
]);
assert_1.default.deepStrictEqual(levelOrder(BinaryTree_1.createBinaryTree([3, 9, 20, null, null, 15, 7])), [[3], [9, 20], [15, 7]]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLuS6jOWPieagkeeahOWxguasoemBjeWOhi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibGVldGNvZGUvMTAyLuS6jOWPieagkeeahOWxguasoemBjeWOhi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrQkk7QUFDSixtREFBZ0U7QUFFaEU7OztHQUdHO0FBQ0gsSUFBSSxVQUFVLEdBQUcsVUFBYSxJQUF3QjtJQUNwRCxJQUFJLElBQUksS0FBSyxJQUFJO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDN0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixJQUFJLFdBQVcsR0FBa0IsRUFBRSxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztJQUV6QixPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDeEIsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixXQUFXLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQzlCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsTUFBTSxRQUFRLEdBQVEsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUN6QixNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFLLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQU0sQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN2QjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLG9EQUE0QjtBQUU1QixnQkFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0MsZ0JBQU0sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLDZCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ1YsQ0FBQyxDQUFDO0FBQ0gsZ0JBQU0sQ0FBQyxlQUFlLENBQ3BCLFVBQVUsQ0FBQyw2QkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDM0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxu57uZ5a6a5LiA5Liq5LqM5Y+J5qCR77yM6L+U5Zue5YW25oyJ5bGC5qyh6YGN5Y6G55qE6IqC54K55YC844CCIO+8iOWNs+mAkOWxguWcsO+8jOS7juW3puWIsOWPs+iuv+mXruaJgOacieiKgueCue+8ieOAglxuXG7kvovlpoI6XG7nu5nlrprkuozlj4nmoJE6IFszLDksMjAsbnVsbCxudWxsLDE1LDddLFxuXG4gICAgM1xuICAgLyBcXFxuICA5ICAyMFxuICAgIC8gIFxcXG4gICAxNSAgIDdcbui/lOWbnuWFtuWxguasoemBjeWOhue7k+aenO+8mlxuXG5bXG4gIFszXSxcbiAgWzksMjBdLFxuICBbMTUsN11cbl1cbiogKi9cbmltcG9ydCB7IFRyZWVOb2RlLCBjcmVhdGVCaW5hcnlUcmVlIH0gZnJvbSBcIi4uL3V0aWwvQmluYXJ5VHJlZVwiO1xuXG4vKipcbiAqIEBwYXJhbSB7VHJlZU5vZGV9IHJvb3RcbiAqIEByZXR1cm4ge251bWJlcltdW119XG4gKi9cbnZhciBsZXZlbE9yZGVyID0gZnVuY3Rpb24gPFQ+KHJvb3Q6IFRyZWVOb2RlPFQ+IHwgbnVsbCkge1xuICBpZiAocm9vdCA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuICBjb25zdCBsaXN0X2NhY2hlID0gW3Jvb3RdO1xuICBsZXQgbGlzdF9vdXRwdXQ6IFRyZWVOb2RlPFQ+W10gPSBbXTtcbiAgY29uc3QgcmVzdWx0OiBUW11bXSA9IFtdO1xuXG4gIHdoaWxlIChsaXN0X2NhY2hlLmxlbmd0aCkge1xuICAgIGlmIChsaXN0X291dHB1dC5sZW5ndGggPT09IDApIHtcbiAgICAgIGxpc3Rfb3V0cHV0ID0gWy4uLmxpc3RfY2FjaGVdO1xuICAgICAgbGlzdF9jYWNoZS5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBjb25zdCB0ZW1wX2FycjogVFtdID0gW107XG4gICAgd2hpbGUgKGxpc3Rfb3V0cHV0Lmxlbmd0aCkge1xuICAgICAgY29uc3Qgbm9kZSA9IGxpc3Rfb3V0cHV0LnNoaWZ0KCkhO1xuICAgICAgdGVtcF9hcnIucHVzaChub2RlLnZhbCk7XG4gICAgICBub2RlLmxlZnQgJiYgbGlzdF9jYWNoZS5wdXNoKG5vZGUubGVmdCEpO1xuICAgICAgbm9kZS5yaWdodCAmJiBsaXN0X2NhY2hlLnB1c2gobm9kZS5yaWdodCEpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh0ZW1wX2Fycik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobGV2ZWxPcmRlcihudWxsKSwgW10pO1xuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChsZXZlbE9yZGVyKGNyZWF0ZUJpbmFyeVRyZWUoWzEsIDIsIDMsIDQsIDUsIDZdKSksIFtcbiAgWzFdLFxuICBbMiwgM10sXG4gIFs0LCA1LCA2XSxcbl0pO1xuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChcbiAgbGV2ZWxPcmRlcihjcmVhdGVCaW5hcnlUcmVlKFszLCA5LCAyMCwgbnVsbCwgbnVsbCwgMTUsIDddKSksXG4gIFtbM10sIFs5LCAyMF0sIFsxNSwgN11dXG4pO1xuIl19