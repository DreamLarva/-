"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const obj = {
    get prop() {
        console.log("getter has run");
        // Replace me!
        return Math.random() < 0.5;
    },
    set prop(_val) {
        console.log("setter has run");
    },
};
function foo() {
    console.log("right side evaluated");
    return true;
}
console.log("This one always runs the setter");
obj.prop = obj.prop || foo();
console.log("This one *sometimes* runs the setter");
obj.prop ||= foo();
var objects = [
    { a: 1, b: 2, c: 3 },
    { a: 4, b: 5, c: 6 },
];
console.log(lodash_1.default.filter(objects, lodash_1.default.matches({ a: 4, c: 6 })));
console.log(lodash_1.default.matches(1)(1));
const valueToDesc = lodash_1.default.find([{ value: 1 }], { value: 2 })?.value ?? "--";
const positiveOrNegative = lodash_1.default.cond([
    [(v) => v === 0, lodash_1.default.toString],
    [(v) => v > 0, (v) => "+" + v],
    [(v) => v < 0, (v) => "-" + v],
]);
const gte = lodash_1.default.curryRight(lodash_1.default.gte);
const getUnit = lodash_1.default.cond([
    [gte(10 ** 8), lodash_1.default.constant("亿元")],
    [gte(10 ** 4), lodash_1.default.constant("万元")],
    [lodash_1.default.stubTrue, lodash_1.default.constant("元")],
]);
function getUnit2(data) {
    data = Math.abs(data);
    return getUnit(data);
}
const fun1 = (fun) => lodash_1.default.wrap(fun, function (fun, ...args) {
    return args.length < fun.length || lodash_1.default.some(args, lodash_1.default.isNil)
        ? void 0
        : fun(...args);
});
function a(fun) {
    return function (...args2) {
        return args2.length < fun.length || args2.some(lodash_1.default.isNil)
            ? null
            : fun(...args2);
    };
}
console.log(a((a, b) => a + b)(1, 1));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsidGVzdC8yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQXVCO0FBQ3ZCLE1BQU0sR0FBRyxHQUFHO0lBQ1YsSUFBSSxJQUFJO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTlCLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQUksSUFBSSxDQUFDLElBQWE7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFDO0FBRUYsU0FBUyxHQUFHO0lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUMvQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFFN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQ3BELEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFFbkIsSUFBSSxPQUFPLEdBQUc7SUFDWixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBRXBCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDckIsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLGdCQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdCLE1BQU0sV0FBVyxHQUFHLGdCQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLENBQUM7QUFFeEUsTUFBTSxrQkFBa0IsR0FBRyxnQkFBQyxDQUFDLElBQUksQ0FBaUI7SUFDaEQsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxnQkFBQyxDQUFDLFFBQVEsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7Q0FDL0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxHQUFHLEdBQUcsZ0JBQUMsQ0FBQyxVQUFVLENBQUMsZ0JBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxNQUFNLE9BQU8sR0FBRyxnQkFBQyxDQUFDLElBQUksQ0FBaUI7SUFDckMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLGdCQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxnQkFBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDLGdCQUFDLENBQUMsUUFBUSxFQUFFLGdCQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzlCLENBQUMsQ0FBQztBQUNILFNBQVMsUUFBUSxDQUFDLElBQVk7SUFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUVELE1BQU0sSUFBSSxHQUFHLENBQXFCLEdBQWEsRUFBRSxFQUFFLENBQ2pELGdCQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHLElBQUk7SUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksZ0JBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDUixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFFTCxTQUFTLENBQUMsQ0FBc0IsR0FBd0I7SUFDdEQsT0FBTyxVQUFVLEdBQUcsS0FBa0I7UUFDcEMsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBQyxDQUFDLEtBQUssQ0FBQztZQUNyRCxDQUFDLENBQUMsSUFBSTtZQUNOLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBSSxLQUFZLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5jb25zdCBvYmogPSB7XG4gIGdldCBwcm9wKCkge1xuICAgIGNvbnNvbGUubG9nKFwiZ2V0dGVyIGhhcyBydW5cIik7XG5cbiAgICAvLyBSZXBsYWNlIG1lIVxuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICB9LFxuICBzZXQgcHJvcChfdmFsOiBib29sZWFuKSB7XG4gICAgY29uc29sZS5sb2coXCJzZXR0ZXIgaGFzIHJ1blwiKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGZvbygpIHtcbiAgY29uc29sZS5sb2coXCJyaWdodCBzaWRlIGV2YWx1YXRlZFwiKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmNvbnNvbGUubG9nKFwiVGhpcyBvbmUgYWx3YXlzIHJ1bnMgdGhlIHNldHRlclwiKTtcbm9iai5wcm9wID0gb2JqLnByb3AgfHwgZm9vKCk7XG5cbmNvbnNvbGUubG9nKFwiVGhpcyBvbmUgKnNvbWV0aW1lcyogcnVucyB0aGUgc2V0dGVyXCIpO1xub2JqLnByb3AgfHw9IGZvbygpO1xuXG52YXIgb2JqZWN0cyA9IFtcbiAgeyBhOiAxLCBiOiAyLCBjOiAzIH0sXG5cbiAgeyBhOiA0LCBiOiA1LCBjOiA2IH0sXG5dO1xuXG5jb25zb2xlLmxvZyhfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyBhOiA0LCBjOiA2IH0pKSk7XG5cbmNvbnNvbGUubG9nKF8ubWF0Y2hlcygxKSgxKSk7XG5cbmNvbnN0IHZhbHVlVG9EZXNjID0gXy5maW5kKFt7IHZhbHVlOiAxIH1dLCB7IHZhbHVlOiAyIH0pPy52YWx1ZSA/PyBcIi0tXCI7XG5cbmNvbnN0IHBvc2l0aXZlT3JOZWdhdGl2ZSA9IF8uY29uZDxudW1iZXIsIHN0cmluZz4oW1xuICBbKHYpID0+IHYgPT09IDAsIF8udG9TdHJpbmddLFxuICBbKHYpID0+IHYgPiAwLCAodikgPT4gXCIrXCIgKyB2XSxcbiAgWyh2KSA9PiB2IDwgMCwgKHYpID0+IFwiLVwiICsgdl0sXG5dKTtcblxuY29uc3QgZ3RlID0gXy5jdXJyeVJpZ2h0KF8uZ3RlKTtcbmNvbnN0IGdldFVuaXQgPSBfLmNvbmQ8bnVtYmVyLCBzdHJpbmc+KFtcbiAgW2d0ZSgxMCAqKiA4KSwgXy5jb25zdGFudChcIuS6v+WFg1wiKV0sXG4gIFtndGUoMTAgKiogNCksIF8uY29uc3RhbnQoXCLkuIflhYNcIildLFxuICBbXy5zdHViVHJ1ZSwgXy5jb25zdGFudChcIuWFg1wiKV0sXG5dKTtcbmZ1bmN0aW9uIGdldFVuaXQyKGRhdGE6IG51bWJlcikge1xuICBkYXRhID0gTWF0aC5hYnMoZGF0YSk7XG4gIHJldHVybiBnZXRVbml0KGRhdGEpO1xufVxuXG5jb25zdCBmdW4xID0gPFQgZXh0ZW5kcyBGdW5jdGlvbj4oZnVuOiBGdW5jdGlvbikgPT5cbiAgXy53cmFwKGZ1biwgZnVuY3Rpb24gKGZ1biwgLi4uYXJncykge1xuICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IGZ1bi5sZW5ndGggfHwgXy5zb21lKGFyZ3MsIF8uaXNOaWwpXG4gICAgICA/IHZvaWQgMFxuICAgICAgOiBmdW4oLi4uYXJncyk7XG4gIH0pO1xuXG5mdW5jdGlvbiBhPFAxIGV4dGVuZHMgYW55W10sIFI+KGZ1bjogKC4uLmFyZ3MxOiBQMSkgPT4gUikge1xuICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MyOiBQYXJ0aWFsPFAxPik6IFIgfCBudWxsIHtcbiAgICByZXR1cm4gYXJnczIubGVuZ3RoIDwgZnVuLmxlbmd0aCB8fCBhcmdzMi5zb21lKF8uaXNOaWwpXG4gICAgICA/IG51bGxcbiAgICAgIDogZnVuKC4uLihhcmdzMiBhcyBQMSkpO1xuICB9O1xufVxuXG5jb25zb2xlLmxvZyhhKChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSArIGIpKDEsIDEpKTtcbiJdfQ==